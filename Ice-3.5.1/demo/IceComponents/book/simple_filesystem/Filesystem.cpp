// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Filesystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Filesystem.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Filesystem__Node__name_name = "name";

const ::std::string __Filesystem__File__read_name = "read";

const ::std::string __Filesystem__File__write_name = "write";

const ::std::string __Filesystem__Directory__list_name = "list";

}

namespace
{

const char* __Filesystem__GenericError_name = "Filesystem::GenericError";

struct __F__Filesystem__GenericError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Filesystem::GenericError();
    }
};

class __F__Filesystem__GenericError__Init
{
public:

    __F__Filesystem__GenericError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Filesystem::GenericError", new __F__Filesystem__GenericError);
    }

    ~__F__Filesystem__GenericError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Filesystem::GenericError");
    }
};

const __F__Filesystem__GenericError__Init __F__Filesystem__GenericError__i;

}

Filesystem::GenericError::GenericError(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

Filesystem::GenericError::~GenericError() throw()
{
}

::std::string
Filesystem::GenericError::ice_name() const
{
    return __Filesystem__GenericError_name;
}

Filesystem::GenericError*
Filesystem::GenericError::ice_clone() const
{
    return new GenericError(*this);
}

void
Filesystem::GenericError::ice_throw() const
{
    throw *this;
}

void
Filesystem::GenericError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Filesystem::GenericError", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
Filesystem::GenericError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Filesystem::upCast(::IceProxy::Filesystem::Node* p) { return p; }

void
::IceProxy::Filesystem::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Filesystem::Node>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Filesystem::Node;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::Filesystem::Node::name(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Filesystem__Node__name_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Filesystem__Node__name_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Filesystem::Node* __del = dynamic_cast< ::IceDelegate::Filesystem::Node*>(__delBase.get());
            return __del->name(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Filesystem::Node::begin_name(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Filesystem__Node__name_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Filesystem__Node__name_name, __del, __cookie);
    try
    {
        __result->__prepare(__Filesystem__Node__name_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::Filesystem::Node::end_name(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Filesystem__Node__name_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Filesystem::Node::ice_staticId()
{
    return ::Filesystem::Node::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Filesystem::Node::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Filesystem::Node);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Filesystem::Node::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Filesystem::Node);
}

::IceProxy::Ice::Object*
IceProxy::Filesystem::Node::__newInstance() const
{
    return new Node;
}
::IceProxy::Ice::Object* ::IceProxy::Filesystem::upCast(::IceProxy::Filesystem::File* p) { return p; }

void
::IceProxy::Filesystem::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Filesystem::File>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Filesystem::File;
        v->__copyFrom(proxy);
    }
}

::Filesystem::Lines
IceProxy::Filesystem::File::read(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Filesystem__File__read_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Filesystem__File__read_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Filesystem::File* __del = dynamic_cast< ::IceDelegate::Filesystem::File*>(__delBase.get());
            return __del->read(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Filesystem::File::begin_read(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Filesystem__File__read_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Filesystem__File__read_name, __del, __cookie);
    try
    {
        __result->__prepare(__Filesystem__File__read_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Filesystem::Lines
IceProxy::Filesystem::File::end_read(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Filesystem__File__read_name);
    ::Filesystem::Lines __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Filesystem::File::write(const ::Filesystem::Lines& text, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Filesystem__File__write_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Filesystem__File__write_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Filesystem::File* __del = dynamic_cast< ::IceDelegate::Filesystem::File*>(__delBase.get());
            __del->write(text, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Filesystem::File::begin_write(const ::Filesystem::Lines& text, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Filesystem__File__write_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Filesystem__File__write_name, __del, __cookie);
    try
    {
        __result->__prepare(__Filesystem__File__write_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(text);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Filesystem::File::end_write(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Filesystem__File__write_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Filesystem::GenericError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Filesystem::File::ice_staticId()
{
    return ::Filesystem::File::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Filesystem::File::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Filesystem::File);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Filesystem::File::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Filesystem::File);
}

::IceProxy::Ice::Object*
IceProxy::Filesystem::File::__newInstance() const
{
    return new File;
}
::IceProxy::Ice::Object* ::IceProxy::Filesystem::upCast(::IceProxy::Filesystem::Directory* p) { return p; }

void
::IceProxy::Filesystem::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Filesystem::Directory>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Filesystem::Directory;
        v->__copyFrom(proxy);
    }
}

::Filesystem::NodeSeq
IceProxy::Filesystem::Directory::list(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Filesystem__Directory__list_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Filesystem__Directory__list_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Filesystem::Directory* __del = dynamic_cast< ::IceDelegate::Filesystem::Directory*>(__delBase.get());
            return __del->list(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Filesystem::Directory::begin_list(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Filesystem__Directory__list_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Filesystem__Directory__list_name, __del, __cookie);
    try
    {
        __result->__prepare(__Filesystem__Directory__list_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Filesystem::NodeSeq
IceProxy::Filesystem::Directory::end_list(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Filesystem__Directory__list_name);
    ::Filesystem::NodeSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Filesystem::Directory::ice_staticId()
{
    return ::Filesystem::Directory::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Filesystem::Directory::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Filesystem::Directory);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Filesystem::Directory::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Filesystem::Directory);
}

::IceProxy::Ice::Object*
IceProxy::Filesystem::Directory::__newInstance() const
{
    return new Directory;
}

::std::string
IceDelegateM::Filesystem::Node::name(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Filesystem__Node__name_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Filesystem::Lines
IceDelegateM::Filesystem::File::read(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Filesystem__File__read_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Filesystem::Lines __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Filesystem::File::write(const ::Filesystem::Lines& text, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Filesystem__File__write_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(text);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Filesystem::GenericError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Filesystem::NodeSeq
IceDelegateM::Filesystem::Directory::list(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Filesystem__Directory__list_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Filesystem::NodeSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateD::Filesystem::Node::name(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Filesystem::Node* servant = dynamic_cast< ::Filesystem::Node*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->name(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Filesystem__Node__name_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Filesystem::Lines
IceDelegateD::Filesystem::File::read(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Filesystem::Lines& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Filesystem::File* servant = dynamic_cast< ::Filesystem::File*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->read(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Filesystem::Lines& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Filesystem__File__read_name, ::Ice::Idempotent, __context);
    ::Filesystem::Lines __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Filesystem::File::write(const ::Filesystem::Lines& text, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Filesystem::Lines& __p_text, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_text(__p_text)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Filesystem::File* servant = dynamic_cast< ::Filesystem::File*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->write(_m_text, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::Filesystem::Lines& _m_text;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Filesystem__File__write_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(text, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Filesystem::GenericError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Filesystem::NodeSeq
IceDelegateD::Filesystem::Directory::list(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Filesystem::NodeSeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Filesystem::Directory* servant = dynamic_cast< ::Filesystem::Directory*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->list(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Filesystem::NodeSeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Filesystem__Directory__list_name, ::Ice::Idempotent, __context);
    ::Filesystem::NodeSeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* Filesystem::upCast(::Filesystem::Node* p) { return p; }

namespace
{
const ::std::string __Filesystem__Node_ids[2] =
{
    "::Filesystem::Node",
    "::Ice::Object"
};

}

bool
Filesystem::Node::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Filesystem__Node_ids, __Filesystem__Node_ids + 2, _s);
}

::std::vector< ::std::string>
Filesystem::Node::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Filesystem__Node_ids[0], &__Filesystem__Node_ids[2]);
}

const ::std::string&
Filesystem::Node::ice_id(const ::Ice::Current&) const
{
    return __Filesystem__Node_ids[0];
}

const ::std::string&
Filesystem::Node::ice_staticId()
{
    return __Filesystem__Node_ids[0];
}

::Ice::DispatchStatus
Filesystem::Node::___name(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = name(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Filesystem__Node_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "name"
};

}

::Ice::DispatchStatus
Filesystem::Node::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Filesystem__Node_all, __Filesystem__Node_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Filesystem__Node_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___name(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Filesystem::Node::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Filesystem::Node::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Filesystem::__patch(NodePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Filesystem::NodePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Filesystem::Node::ice_staticId(), v);
    }
}

::Ice::Object* Filesystem::upCast(::Filesystem::File* p) { return p; }

namespace
{
const ::std::string __Filesystem__File_ids[3] =
{
    "::Filesystem::File",
    "::Filesystem::Node",
    "::Ice::Object"
};

}

bool
Filesystem::File::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Filesystem__File_ids, __Filesystem__File_ids + 3, _s);
}

::std::vector< ::std::string>
Filesystem::File::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Filesystem__File_ids[0], &__Filesystem__File_ids[3]);
}

const ::std::string&
Filesystem::File::ice_id(const ::Ice::Current&) const
{
    return __Filesystem__File_ids[0];
}

const ::std::string&
Filesystem::File::ice_staticId()
{
    return __Filesystem__File_ids[0];
}

::Ice::DispatchStatus
Filesystem::File::___read(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Filesystem::Lines __ret = read(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Filesystem::File::___write(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Filesystem::Lines text;
    __is->read(text);
    __inS.endReadParams();
    try
    {
        write(text, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Filesystem::GenericError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Filesystem__File_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "name",
    "read",
    "write"
};

}

::Ice::DispatchStatus
Filesystem::File::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Filesystem__File_all, __Filesystem__File_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Filesystem__File_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___name(in, current);
        }
        case 5:
        {
            return ___read(in, current);
        }
        case 6:
        {
            return ___write(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Filesystem::File::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Filesystem::File::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Filesystem::__patch(FilePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Filesystem::FilePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Filesystem::File::ice_staticId(), v);
    }
}

::Ice::Object* Filesystem::upCast(::Filesystem::Directory* p) { return p; }

namespace
{
const ::std::string __Filesystem__Directory_ids[3] =
{
    "::Filesystem::Directory",
    "::Filesystem::Node",
    "::Ice::Object"
};

}

bool
Filesystem::Directory::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Filesystem__Directory_ids, __Filesystem__Directory_ids + 3, _s);
}

::std::vector< ::std::string>
Filesystem::Directory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Filesystem__Directory_ids[0], &__Filesystem__Directory_ids[3]);
}

const ::std::string&
Filesystem::Directory::ice_id(const ::Ice::Current&) const
{
    return __Filesystem__Directory_ids[0];
}

const ::std::string&
Filesystem::Directory::ice_staticId()
{
    return __Filesystem__Directory_ids[0];
}

::Ice::DispatchStatus
Filesystem::Directory::___list(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Filesystem::NodeSeq __ret = list(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Filesystem__Directory_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "list",
    "name"
};

}

::Ice::DispatchStatus
Filesystem::Directory::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Filesystem__Directory_all, __Filesystem__Directory_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Filesystem__Directory_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___list(in, current);
        }
        case 5:
        {
            return ___name(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Filesystem::Directory::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Filesystem::Directory::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Filesystem::__patch(DirectoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Filesystem::DirectoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Filesystem::Directory::ice_staticId(), v);
    }
}
