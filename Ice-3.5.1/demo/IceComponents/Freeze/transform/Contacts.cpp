// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Contacts.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


// Freeze types in this file:
// name="Demo::Contacts", key="string", value="Demo::ContactData"

#include <Ice/BasicStream.h>
#include <IceUtil/StringUtil.h>
#include <Contacts.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

void
Demo::ContactsKeyCodec::write(const ::std::string& v, Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.write(v);
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
Demo::ContactsKeyCodec::read(::std::string& v, const Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.read(v);
}

namespace
{
    const ::std::string __Demo__ContactsKeyCodec_typeId = "string";
}

const ::std::string&
Demo::ContactsKeyCodec::typeId()
{
    return __Demo__ContactsKeyCodec_typeId;
}

void
Demo::ContactsValueCodec::write(const ::Demo::ContactData& v, Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.startWriteEncaps();
    stream.write(v);
    stream.endWriteEncaps();
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
Demo::ContactsValueCodec::read(::Demo::ContactData& v, const Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.startReadEncaps();
    stream.read(v);
    stream.endReadEncaps();
}

namespace
{
    const ::std::string __Demo__ContactsValueCodec_typeId = "::Demo::ContactData";
}

const ::std::string&
Demo::ContactsValueCodec::typeId()
{
    return __Demo__ContactsValueCodec_typeId;
}

Demo::Contacts::PhoneNumberIndex::PhoneNumberIndex(const std::string& __name, const std::less< ::std::string>& __compare)
    : Freeze::MapIndex< ::std::string, PhoneNumberIndex, std::less< ::std::string> >(__name, __compare)
{
}

void
Demo::Contacts::PhoneNumberIndex::marshalKey(const Freeze::Value& __v, Freeze::Key& __k) const
{
    ::Demo::ContactData __x;
    Demo::ContactsValueCodec::read(__x, __v, _communicator, _encoding);
    write(__x.phoneNumber, __k, _communicator, _encoding);
}

void
Demo::Contacts::PhoneNumberIndex::write(const ::std::string& __index, Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    IceInternal::InstancePtr __instance = IceInternal::getInstance(__communicator);
    IceInternal::BasicStream __stream(__instance.get(), __encoding, true);
    __stream.write(__index);
    ::std::vector<Ice::Byte>(__stream.b.begin(), __stream.b.end()).swap(__bytes);
}

void
Demo::Contacts::PhoneNumberIndex::read(::std::string& __index, const Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    IceInternal::InstancePtr __instance = IceInternal::getInstance(__communicator);
    IceInternal::BasicStream __stream(__instance.get(), __encoding, &__bytes[0], &__bytes[0] + __bytes.size());
    __stream.read(__index);
}

Demo::Contacts::Contacts(const Freeze::ConnectionPtr& __connection, const std::string& __dbName ,bool __createDb, const std::less< ::std::string>& __compare)
    : Freeze::Map< ::std::string, ::Demo::ContactData, ContactsKeyCodec, ContactsValueCodec, std::less< ::std::string> >(__connection->getCommunicator(), __connection->getEncoding())
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::std::string, ContactsKeyCodec, std::less< ::std::string> >(__compare, _communicator, _encoding);
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new PhoneNumberIndex("phoneNumber"));
    _helper.reset(Freeze::MapHelper::create(__connection, __dbName, Demo::ContactsKeyCodec::typeId(), Demo::ContactsValueCodec::typeId(), __keyCompare, __indices, __createDb));
}

void
Demo::Contacts::recreate(const Freeze::ConnectionPtr& __connection, const std::string& __dbName , const std::less< ::std::string>& __compare)
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::std::string, ContactsKeyCodec, std::less< ::std::string> >(__compare, __connection->getCommunicator(), __connection->getEncoding());
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new PhoneNumberIndex("phoneNumber"));
    Freeze::MapHelper::recreate(__connection, __dbName, Demo::ContactsKeyCodec::typeId(), Demo::ContactsValueCodec::typeId(), __keyCompare, __indices);
}

Demo::Contacts::iterator
Demo::Contacts::findByPhoneNumber(const ::std::string& __index, bool __onlyDups)
{
    Freeze::Key __bytes;
    PhoneNumberIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("phoneNumber")->untypedFind(__bytes, false, __onlyDups), _communicator, _encoding);
}

Demo::Contacts::const_iterator
Demo::Contacts::findByPhoneNumber(const ::std::string& __index, bool __onlyDups) const
{
    Freeze::Key __bytes;
    PhoneNumberIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("phoneNumber")->untypedFind(__bytes, true, __onlyDups), _communicator, _encoding);
}

Demo::Contacts::iterator
Demo::Contacts::beginForPhoneNumber()
{
    return iterator(_helper->index("phoneNumber")->begin(false), _communicator, _encoding);
}

Demo::Contacts::const_iterator
Demo::Contacts::beginForPhoneNumber() const
{
    return const_iterator(_helper->index("phoneNumber")->begin(true), _communicator, _encoding);
}

Demo::Contacts::iterator
Demo::Contacts::endForPhoneNumber()
{
    return iterator();
}

Demo::Contacts::const_iterator
Demo::Contacts::endForPhoneNumber() const
{
    return const_iterator();
}

Demo::Contacts::iterator
Demo::Contacts::lowerBoundForPhoneNumber(const ::std::string& __index)
{
    Freeze::Key __bytes;
    PhoneNumberIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("phoneNumber")->untypedLowerBound(__bytes, false), _communicator, _encoding);
}

Demo::Contacts::const_iterator
Demo::Contacts::lowerBoundForPhoneNumber(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    PhoneNumberIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("phoneNumber")->untypedLowerBound(__bytes, true), _communicator, _encoding);
}

Demo::Contacts::iterator
Demo::Contacts::upperBoundForPhoneNumber(const ::std::string& __index)
{
    Freeze::Key __bytes;
    PhoneNumberIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("phoneNumber")->untypedUpperBound(__bytes, false), _communicator, _encoding);
}

Demo::Contacts::const_iterator
Demo::Contacts::upperBoundForPhoneNumber(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    PhoneNumberIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("phoneNumber")->untypedUpperBound(__bytes, true), _communicator, _encoding);
}

std::pair<Demo::Contacts::iterator, Demo::Contacts::iterator>
Demo::Contacts::equalRangeForPhoneNumber(const ::std::string& __index)
{
    return std::make_pair(lowerBoundForPhoneNumber(__index), upperBoundForPhoneNumber(__index));
}

std::pair<Demo::Contacts::const_iterator, Demo::Contacts::const_iterator>
Demo::Contacts::equalRangeForPhoneNumber(const ::std::string& __index) const
{
    return std::make_pair(lowerBoundForPhoneNumber(__index), upperBoundForPhoneNumber(__index));
}

int
Demo::Contacts::phoneNumberCount(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    PhoneNumberIndex::write(__index, __bytes, _communicator, _encoding);
    return _helper->index("phoneNumber")->untypedCount(__bytes);
}
