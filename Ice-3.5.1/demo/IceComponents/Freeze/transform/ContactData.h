// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ContactData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____ContactData_h__
#define ____ContactData_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace Demo
{

struct ContactData
{
    ::std::string phoneNumber;

    bool operator==(const ContactData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(phoneNumber != __rhs.phoneNumber)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ContactData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(phoneNumber < __rhs.phoneNumber)
        {
            return true;
        }
        else if(__rhs.phoneNumber < phoneNumber)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ContactData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ContactData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ContactData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ContactData& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::ContactData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Demo::ContactData, S>
{
    static void write(S* __os, const ::Demo::ContactData& v)
    {
        __os->write(v.phoneNumber);
    }
};

template<class S>
struct StreamReader< ::Demo::ContactData, S>
{
    static void read(S* __is, ::Demo::ContactData& v)
    {
        __is->read(v.phoneNumber);
    }
};

}

#endif
