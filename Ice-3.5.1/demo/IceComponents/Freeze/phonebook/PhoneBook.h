// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `PhoneBook.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____PhoneBook_h__
#define ____PhoneBook_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class Contact;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Contact>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Contact*);

class PhoneBook;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::PhoneBook>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::PhoneBook*);

}

}

namespace Demo
{

class Contact;
bool operator==(const Contact&, const Contact&);
bool operator<(const Contact&, const Contact&);
::Ice::Object* upCast(::Demo::Contact*);
typedef ::IceInternal::Handle< ::Demo::Contact> ContactPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Contact> ContactPrx;
void __patch(ContactPtr&, const ::Ice::ObjectPtr&);

class PhoneBook;
bool operator==(const PhoneBook&, const PhoneBook&);
bool operator<(const PhoneBook&, const PhoneBook&);
::Ice::Object* upCast(::Demo::PhoneBook*);
typedef ::IceInternal::Handle< ::Demo::PhoneBook> PhoneBookPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::PhoneBook> PhoneBookPrx;
void __patch(PhoneBookPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

class DatabaseException : public ::Ice::UserException
{
public:

    DatabaseException() {}
    explicit DatabaseException(const ::std::string&);
    virtual ~DatabaseException() throw();

    virtual ::std::string ice_name() const;
    virtual DatabaseException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string message;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static DatabaseException __DatabaseException_init;

typedef ::std::vector< ::Demo::ContactPrx> Contacts;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::DatabaseException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Demo
{

class Callback_Contact_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Contact_getName_Base> Callback_Contact_getNamePtr;

class Callback_Contact_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Contact_setName_Base> Callback_Contact_setNamePtr;

class Callback_Contact_getAddress_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Contact_getAddress_Base> Callback_Contact_getAddressPtr;

class Callback_Contact_setAddress_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Contact_setAddress_Base> Callback_Contact_setAddressPtr;

class Callback_Contact_getPhone_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Contact_getPhone_Base> Callback_Contact_getPhonePtr;

class Callback_Contact_setPhone_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Contact_setPhone_Base> Callback_Contact_setPhonePtr;

class Callback_Contact_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Contact_destroy_Base> Callback_Contact_destroyPtr;

class Callback_PhoneBook_createContact_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PhoneBook_createContact_Base> Callback_PhoneBook_createContactPtr;

class Callback_PhoneBook_findContacts_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PhoneBook_findContacts_Base> Callback_PhoneBook_findContactsPtr;

class Callback_PhoneBook_setEvictorSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PhoneBook_setEvictorSize_Base> Callback_PhoneBook_setEvictorSizePtr;

class Callback_PhoneBook_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PhoneBook_shutdown_Base> Callback_PhoneBook_shutdownPtr;

}

namespace IceProxy
{

namespace Demo
{

class Contact : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string getName()
    {
        return getName(0);
    }
    ::std::string getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Demo::Callback_Contact_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Demo::Callback_Contact_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::std::string& name)
    {
        setName(name, 0);
    }
    void setName(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        setName(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setName(const ::std::string& name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setName(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setName(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setName(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setName(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setName(const ::std::string& name)
    {
        return begin_setName(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_setName(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::std::string& name, const ::Demo::Callback_Contact_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::std::string& name, const ::Ice::Context& __ctx, const ::Demo::Callback_Contact_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(name, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getAddress()
    {
        return getAddress(0);
    }
    ::std::string getAddress(const ::Ice::Context& __ctx)
    {
        return getAddress(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAddress(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAddress(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAddress(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAddress(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAddress(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAddress(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAddress(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAddress(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAddress(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getAddress(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getAddress(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAddress()
    {
        return begin_getAddress(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAddress(const ::Ice::Context& __ctx)
    {
        return begin_getAddress(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAddress(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAddress(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAddress(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAddress(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAddress(const ::Demo::Callback_Contact_getAddressPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAddress(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAddress(const ::Ice::Context& __ctx, const ::Demo::Callback_Contact_getAddressPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAddress(&__ctx, __del, __cookie);
    }

    ::std::string end_getAddress(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getAddress(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAddress(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setAddress(const ::std::string& address)
    {
        setAddress(address, 0);
    }
    void setAddress(const ::std::string& address, const ::Ice::Context& __ctx)
    {
        setAddress(address, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAddress(const ::std::string& address, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAddress(address, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setAddress(const ::std::string& address, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAddress(address, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAddress(const ::std::string& address, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAddress(address, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAddress(const ::std::string& address, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAddress(address, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setAddress(const ::std::string& address)
    {
        return begin_setAddress(address, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAddress(const ::std::string& address, const ::Ice::Context& __ctx)
    {
        return begin_setAddress(address, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAddress(const ::std::string& address, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAddress(address, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAddress(const ::std::string& address, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAddress(address, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAddress(const ::std::string& address, const ::Demo::Callback_Contact_setAddressPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAddress(address, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAddress(const ::std::string& address, const ::Ice::Context& __ctx, const ::Demo::Callback_Contact_setAddressPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAddress(address, &__ctx, __del, __cookie);
    }

    void end_setAddress(const ::Ice::AsyncResultPtr&);
    
private:

    void setAddress(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAddress(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getPhone()
    {
        return getPhone(0);
    }
    ::std::string getPhone(const ::Ice::Context& __ctx)
    {
        return getPhone(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPhone(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPhone(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPhone(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPhone(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPhone(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPhone(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPhone(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPhone(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPhone(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getPhone(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getPhone(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPhone()
    {
        return begin_getPhone(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhone(const ::Ice::Context& __ctx)
    {
        return begin_getPhone(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhone(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhone(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhone(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhone(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhone(const ::Demo::Callback_Contact_getPhonePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhone(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhone(const ::Ice::Context& __ctx, const ::Demo::Callback_Contact_getPhonePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhone(&__ctx, __del, __cookie);
    }

    ::std::string end_getPhone(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getPhone(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPhone(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPhone(const ::std::string& phone)
    {
        setPhone(phone, 0);
    }
    void setPhone(const ::std::string& phone, const ::Ice::Context& __ctx)
    {
        setPhone(phone, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPhone(const ::std::string& phone, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPhone(phone, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPhone(const ::std::string& phone, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPhone(phone, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPhone(const ::std::string& phone, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPhone(phone, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPhone(const ::std::string& phone, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPhone(phone, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPhone(const ::std::string& phone)
    {
        return begin_setPhone(phone, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhone(const ::std::string& phone, const ::Ice::Context& __ctx)
    {
        return begin_setPhone(phone, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhone(const ::std::string& phone, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhone(phone, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhone(const ::std::string& phone, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhone(phone, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhone(const ::std::string& phone, const ::Demo::Callback_Contact_setPhonePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhone(phone, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhone(const ::std::string& phone, const ::Ice::Context& __ctx, const ::Demo::Callback_Contact_setPhonePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhone(phone, &__ctx, __del, __cookie);
    }

    void end_setPhone(const ::Ice::AsyncResultPtr&);
    
private:

    void setPhone(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPhone(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroy(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroy(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_destroy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_destroy(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Demo::Callback_Contact_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Demo::Callback_Contact_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Contact> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_secure(bool __secure) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_twoway() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_oneway() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_batchOneway() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_datagram() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_batchDatagram() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_compress(bool __compress) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PhoneBook : virtual public ::IceProxy::Ice::Object
{
public:

    ::Demo::ContactPrx createContact()
    {
        return createContact(0);
    }
    ::Demo::ContactPrx createContact(const ::Ice::Context& __ctx)
    {
        return createContact(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createContact(const ::IceInternal::Function<void (const ::Demo::ContactPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createContact(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createContact(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createContact(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createContact(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::ContactPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createContact(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createContact(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createContact(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createContact(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::ContactPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::ContactPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
                ::Demo::ContactPrx __ret;
                try
                {
                    __ret = __proxy->end_createContact(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::ContactPrx&)> _response;
        };
        return begin_createContact(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createContact()
    {
        return begin_createContact(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createContact(const ::Ice::Context& __ctx)
    {
        return begin_createContact(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createContact(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createContact(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createContact(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createContact(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createContact(const ::Demo::Callback_PhoneBook_createContactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createContact(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createContact(const ::Ice::Context& __ctx, const ::Demo::Callback_PhoneBook_createContactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createContact(&__ctx, __del, __cookie);
    }

    ::Demo::ContactPrx end_createContact(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::ContactPrx createContact(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createContact(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::Contacts findContacts(const ::std::string& name)
    {
        return findContacts(name, 0);
    }
    ::Demo::Contacts findContacts(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return findContacts(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findContacts(const ::std::string& name, const ::IceInternal::Function<void (const ::Demo::Contacts&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findContacts(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findContacts(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findContacts(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findContacts(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::Contacts&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findContacts(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findContacts(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findContacts(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findContacts(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::Contacts&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::Contacts&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
                ::Demo::Contacts __ret;
                try
                {
                    __ret = __proxy->end_findContacts(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::Contacts&)> _response;
        };
        return begin_findContacts(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findContacts(const ::std::string& name)
    {
        return begin_findContacts(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findContacts(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_findContacts(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findContacts(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findContacts(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findContacts(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findContacts(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findContacts(const ::std::string& name, const ::Demo::Callback_PhoneBook_findContactsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findContacts(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findContacts(const ::std::string& name, const ::Ice::Context& __ctx, const ::Demo::Callback_PhoneBook_findContactsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findContacts(name, &__ctx, __del, __cookie);
    }

    ::Demo::Contacts end_findContacts(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::Contacts findContacts(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findContacts(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEvictorSize(::Ice::Int size)
    {
        setEvictorSize(size, 0);
    }
    void setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx)
    {
        setEvictorSize(size, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setEvictorSize(size, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEvictorSize(size, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setEvictorSize(size, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEvictorSize(size, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setEvictorSize(::Ice::Int size, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setEvictorSize(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setEvictorSize(size, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size)
    {
        return begin_setEvictorSize(size, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx)
    {
        return begin_setEvictorSize(size, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Demo::Callback_PhoneBook_setEvictorSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::Demo::Callback_PhoneBook_setEvictorSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, &__ctx, __del, __cookie);
    }

    void end_setEvictorSize(const ::Ice::AsyncResultPtr&);
    
private:

    void setEvictorSize(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_PhoneBook_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_PhoneBook_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_secure(bool __secure) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_twoway() const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_oneway() const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_batchOneway() const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_datagram() const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_batchDatagram() const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_compress(bool __compress) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PhoneBook> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PhoneBook*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class Contact : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getAddress(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setAddress(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getPhone(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPhone(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PhoneBook : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Demo::ContactPrx createContact(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::Contacts findContacts(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class Contact : virtual public ::IceDelegate::Demo::Contact,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getAddress(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAddress(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getPhone(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPhone(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PhoneBook : virtual public ::IceDelegate::Demo::PhoneBook,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Demo::ContactPrx createContact(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::Contacts findContacts(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class Contact : virtual public ::IceDelegate::Demo::Contact,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getAddress(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAddress(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getPhone(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPhone(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PhoneBook : virtual public ::IceDelegate::Demo::PhoneBook,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Demo::ContactPrx createContact(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::Contacts findContacts(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class Contact : virtual public ::Ice::Object
{
public:

    typedef ContactPrx ProxyType;
    typedef ContactPtr PointerType;

    Contact()
    {
    }

    Contact(const ::std::string& __ice_name, const ::std::string& __ice_address, const ::std::string& __ice_phone) :
        name(__ice_name),
        address(__ice_address),
        phone(__ice_phone)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::std::string getName(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setName(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getAddress(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getAddress(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setAddress(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAddress(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getPhone(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getPhone(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setPhone(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPhone(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string name;

    ::std::string address;

    ::std::string phone;
};

inline bool operator==(const Contact& l, const Contact& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Contact& l, const Contact& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PhoneBook : virtual public ::Ice::Object
{
public:

    typedef PhoneBookPrx ProxyType;
    typedef PhoneBookPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Demo::ContactPrx createContact(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createContact(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::Contacts findContacts(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___findContacts(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEvictorSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PhoneBook& l, const PhoneBook& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PhoneBook& l, const PhoneBook& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_Contact_getName : public Callback_Contact_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Contact_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Contact_getNamePtr
newCallback_Contact_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_getNamePtr
newCallback_Contact_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Contact_getName : public Callback_Contact_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Contact_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Contact_getNamePtr
newCallback_Contact_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_getNamePtr
newCallback_Contact_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Contact_setName : public Callback_Contact_setName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Contact_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Contact_setNamePtr
newCallback_Contact_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_setNamePtr
newCallback_Contact_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Contact_setNamePtr
newCallback_Contact_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_setNamePtr
newCallback_Contact_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Contact_setName : public Callback_Contact_setName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Contact_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Contact_setNamePtr
newCallback_Contact_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setNamePtr
newCallback_Contact_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setNamePtr
newCallback_Contact_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setNamePtr
newCallback_Contact_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Contact_getAddress : public Callback_Contact_getAddress_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Contact_getAddress(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getAddress(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Contact_getAddressPtr
newCallback_Contact_getAddress(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_getAddress<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_getAddressPtr
newCallback_Contact_getAddress(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_getAddress<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Contact_getAddress : public Callback_Contact_getAddress_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Contact_getAddress(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getAddress(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Contact_getAddressPtr
newCallback_Contact_getAddress(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_getAddress<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_getAddressPtr
newCallback_Contact_getAddress(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_getAddress<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Contact_setAddress : public Callback_Contact_setAddress_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Contact_setAddress(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setAddress<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setAddress<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setAddress<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setAddress<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Contact_setAddress : public Callback_Contact_setAddress_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Contact_setAddress(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setAddress<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setAddress<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setAddress<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setAddressPtr
newCallback_Contact_setAddress(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setAddress<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Contact_getPhone : public Callback_Contact_getPhone_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Contact_getPhone(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getPhone(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Contact_getPhonePtr
newCallback_Contact_getPhone(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_getPhone<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_getPhonePtr
newCallback_Contact_getPhone(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_getPhone<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Contact_getPhone : public Callback_Contact_getPhone_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Contact_getPhone(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getPhone(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Contact_getPhonePtr
newCallback_Contact_getPhone(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_getPhone<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_getPhonePtr
newCallback_Contact_getPhone(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_getPhone<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Contact_setPhone : public Callback_Contact_setPhone_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Contact_setPhone(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setPhone<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setPhone<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setPhone<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_setPhone<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Contact_setPhone : public Callback_Contact_setPhone_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Contact_setPhone(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setPhone<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setPhone<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setPhone<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_setPhonePtr
newCallback_Contact_setPhone(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_setPhone<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Contact_destroy : public Callback_Contact_destroy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Contact_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Contact_destroyPtr
newCallback_Contact_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_destroyPtr
newCallback_Contact_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Contact_destroyPtr
newCallback_Contact_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Contact_destroyPtr
newCallback_Contact_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Contact_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Contact_destroy : public Callback_Contact_destroy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Contact_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactPrx __proxy = ::Demo::ContactPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Contact_destroyPtr
newCallback_Contact_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_destroyPtr
newCallback_Contact_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_destroyPtr
newCallback_Contact_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Contact_destroyPtr
newCallback_Contact_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Contact_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PhoneBook_createContact : public Callback_PhoneBook_createContact_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::ContactPrx&);

    CallbackNC_PhoneBook_createContact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
        ::Demo::ContactPrx __ret;
        try
        {
            __ret = __proxy->end_createContact(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PhoneBook_createContactPtr
newCallback_PhoneBook_createContact(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::ContactPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_createContact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PhoneBook_createContactPtr
newCallback_PhoneBook_createContact(T* instance, void (T::*cb)(const ::Demo::ContactPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_createContact<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PhoneBook_createContact : public Callback_PhoneBook_createContact_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::ContactPrx&, const CT&);

    Callback_PhoneBook_createContact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
        ::Demo::ContactPrx __ret;
        try
        {
            __ret = __proxy->end_createContact(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PhoneBook_createContactPtr
newCallback_PhoneBook_createContact(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::ContactPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_createContact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_createContactPtr
newCallback_PhoneBook_createContact(T* instance, void (T::*cb)(const ::Demo::ContactPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_createContact<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PhoneBook_findContacts : public Callback_PhoneBook_findContacts_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::Contacts&);

    CallbackNC_PhoneBook_findContacts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
        ::Demo::Contacts __ret;
        try
        {
            __ret = __proxy->end_findContacts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PhoneBook_findContactsPtr
newCallback_PhoneBook_findContacts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::Contacts&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_findContacts<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PhoneBook_findContactsPtr
newCallback_PhoneBook_findContacts(T* instance, void (T::*cb)(const ::Demo::Contacts&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_findContacts<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PhoneBook_findContacts : public Callback_PhoneBook_findContacts_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::Contacts&, const CT&);

    Callback_PhoneBook_findContacts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
        ::Demo::Contacts __ret;
        try
        {
            __ret = __proxy->end_findContacts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PhoneBook_findContactsPtr
newCallback_PhoneBook_findContacts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::Contacts&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_findContacts<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_findContactsPtr
newCallback_PhoneBook_findContacts(T* instance, void (T::*cb)(const ::Demo::Contacts&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_findContacts<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PhoneBook_setEvictorSize : public Callback_PhoneBook_setEvictorSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PhoneBook_setEvictorSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setEvictorSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_setEvictorSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_setEvictorSize<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_setEvictorSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_setEvictorSize<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PhoneBook_setEvictorSize : public Callback_PhoneBook_setEvictorSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PhoneBook_setEvictorSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PhoneBookPrx __proxy = ::Demo::PhoneBookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setEvictorSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_setEvictorSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_setEvictorSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_setEvictorSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_setEvictorSizePtr
newCallback_PhoneBook_setEvictorSize(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_setEvictorSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PhoneBook_shutdown : public Callback_PhoneBook_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PhoneBook_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PhoneBook_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PhoneBook_shutdown : public Callback_PhoneBook_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PhoneBook_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PhoneBook_shutdownPtr
newCallback_PhoneBook_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PhoneBook_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
