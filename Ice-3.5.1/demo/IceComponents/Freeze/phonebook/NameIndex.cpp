// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `NameIndex.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


// Freeze types in this file:
// name="NameIndex", type="Demo::Contact", member="name" (case insensitive)

#include <Ice/BasicStream.h>
#include <IceUtil/StringUtil.h>
#include <NameIndex.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

NameIndex::NameIndex(const ::std::string& __name, const ::std::string& __facet)
    : Freeze::Index(__name, __facet)
{
}

std::vector<Ice::Identity>
NameIndex::findFirst(const ::std::string& __index, ::Ice::Int __firstN) const
{
    Freeze::Key __bytes;
    marshalKey(__index, __bytes);
    return untypedFindFirst(__bytes, __firstN);
}

std::vector<Ice::Identity>
NameIndex::find(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    marshalKey(__index, __bytes);
    return untypedFind(__bytes);
}

Ice::Int
NameIndex::count(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    marshalKey(__index, __bytes);
    return untypedCount(__bytes);
}

bool
NameIndex::marshalKey(const Ice::ObjectPtr& __servant, Freeze::Key& __bytes) const
{
    ::Demo::ContactPtr __s = ::Demo::ContactPtr::dynamicCast(__servant);
    if(__s != 0)
    {
        marshalKey(__s->name, __bytes);
        return true;
    }
    else
    {
        return false;
    }
}

void
NameIndex::marshalKey(const ::std::string& __index, Freeze::Key& __bytes) const
{
    IceInternal::InstancePtr __instance = IceInternal::getInstance(_communicator);
    IceInternal::BasicStream __stream(__instance.get(), _encoding, true);
    ::std::string __lowerCaseIndex = IceUtilInternal::toLower(__index);
    __stream.write(__lowerCaseIndex);
    ::std::vector<Ice::Byte>(__stream.b.begin(), __stream.b.end()).swap(__bytes);
}
