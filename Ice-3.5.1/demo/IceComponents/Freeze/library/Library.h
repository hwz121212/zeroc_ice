// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Library.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____Library_h__
#define ____Library_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class Book;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Book>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Book*);

class Library;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Library>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Library*);

}

}

namespace Demo
{

class Book;
bool operator==(const Book&, const Book&);
bool operator<(const Book&, const Book&);
::Ice::Object* upCast(::Demo::Book*);
typedef ::IceInternal::Handle< ::Demo::Book> BookPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Book> BookPrx;
void __patch(BookPtr&, const ::Ice::ObjectPtr&);

class Library;
bool operator==(const Library&, const Library&);
bool operator<(const Library&, const Library&);
::Ice::Object* upCast(::Demo::Library*);
typedef ::IceInternal::Handle< ::Demo::Library> LibraryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Library> LibraryPrx;
void __patch(LibraryPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

class DatabaseException : public ::Ice::UserException
{
public:

    DatabaseException() {}
    explicit DatabaseException(const ::std::string&);
    virtual ~DatabaseException() throw();

    virtual ::std::string ice_name() const;
    virtual DatabaseException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string message;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static DatabaseException __DatabaseException_init;

class BookExistsException : public ::Ice::UserException
{
public:

    BookExistsException() {}
    virtual ~BookExistsException() throw();

    virtual ::std::string ice_name() const;
    virtual BookExistsException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class BookRentedException : public ::Ice::UserException
{
public:

    BookRentedException() {}
    virtual ~BookRentedException() throw();

    virtual ::std::string ice_name() const;
    virtual BookRentedException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class BookNotRentedException : public ::Ice::UserException
{
public:

    BookNotRentedException() {}
    virtual ~BookNotRentedException() throw();

    virtual ::std::string ice_name() const;
    virtual BookNotRentedException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

struct BookDescription
{
    ::std::string isbn;
    ::std::string title;
    ::std::string authors;

    bool operator==(const BookDescription& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(isbn != __rhs.isbn)
        {
            return false;
        }
        if(title != __rhs.title)
        {
            return false;
        }
        if(authors != __rhs.authors)
        {
            return false;
        }
        return true;
    }

    bool operator<(const BookDescription& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(isbn < __rhs.isbn)
        {
            return true;
        }
        else if(__rhs.isbn < isbn)
        {
            return false;
        }
        if(title < __rhs.title)
        {
            return true;
        }
        else if(__rhs.title < title)
        {
            return false;
        }
        if(authors < __rhs.authors)
        {
            return true;
        }
        else if(__rhs.authors < authors)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const BookDescription& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const BookDescription& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const BookDescription& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const BookDescription& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Demo::BookPrx> BookPrxSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::DatabaseException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Demo::BookExistsException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Demo::BookRentedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Demo::BookNotRentedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Demo::BookDescription>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Demo::BookDescription, S>
{
    static void write(S* __os, const ::Demo::BookDescription& v)
    {
        __os->write(v.isbn);
        __os->write(v.title);
        __os->write(v.authors);
    }
};

template<class S>
struct StreamReader< ::Demo::BookDescription, S>
{
    static void read(S* __is, ::Demo::BookDescription& v)
    {
        __is->read(v.isbn);
        __is->read(v.title);
        __is->read(v.authors);
    }
};

}

namespace Demo
{

class Callback_Book_getBookDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Book_getBookDescription_Base> Callback_Book_getBookDescriptionPtr;

class Callback_Book_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Book_destroy_Base> Callback_Book_destroyPtr;

class Callback_Book_rentBook_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Book_rentBook_Base> Callback_Book_rentBookPtr;

class Callback_Book_getRenterName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Book_getRenterName_Base> Callback_Book_getRenterNamePtr;

class Callback_Book_returnBook_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Book_returnBook_Base> Callback_Book_returnBookPtr;

class Callback_Library_createBook_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Library_createBook_Base> Callback_Library_createBookPtr;

class Callback_Library_findByIsbn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Library_findByIsbn_Base> Callback_Library_findByIsbnPtr;

class Callback_Library_findByAuthors_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Library_findByAuthors_Base> Callback_Library_findByAuthorsPtr;

class Callback_Library_setEvictorSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Library_setEvictorSize_Base> Callback_Library_setEvictorSizePtr;

class Callback_Library_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Library_shutdown_Base> Callback_Library_shutdownPtr;

}

namespace IceProxy
{

namespace Demo
{

class Book : virtual public ::IceProxy::Ice::Object
{
public:

    ::Demo::BookDescription getBookDescription()
    {
        return getBookDescription(0);
    }
    ::Demo::BookDescription getBookDescription(const ::Ice::Context& __ctx)
    {
        return getBookDescription(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBookDescription(const ::IceInternal::Function<void (const ::Demo::BookDescription&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBookDescription(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBookDescription(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBookDescription(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBookDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::BookDescription&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBookDescription(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBookDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBookDescription(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBookDescription(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::BookDescription&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::BookDescription&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
                ::Demo::BookDescription __ret;
                try
                {
                    __ret = __proxy->end_getBookDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::BookDescription&)> _response;
        };
        return begin_getBookDescription(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBookDescription()
    {
        return begin_getBookDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBookDescription(const ::Ice::Context& __ctx)
    {
        return begin_getBookDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBookDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBookDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBookDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBookDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBookDescription(const ::Demo::Callback_Book_getBookDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBookDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBookDescription(const ::Ice::Context& __ctx, const ::Demo::Callback_Book_getBookDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBookDescription(&__ctx, __del, __cookie);
    }

    ::Demo::BookDescription end_getBookDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::BookDescription getBookDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBookDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroy(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroy(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_destroy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_destroy(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Demo::Callback_Book_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Demo::Callback_Book_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void rentBook(const ::std::string& name)
    {
        rentBook(name, 0);
    }
    void rentBook(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        rentBook(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_rentBook(const ::std::string& name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_rentBook(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_rentBook(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rentBook(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_rentBook(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_rentBook(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_rentBook(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rentBook(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_rentBook(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_rentBook(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_rentBook(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_rentBook(const ::std::string& name)
    {
        return begin_rentBook(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rentBook(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_rentBook(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rentBook(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rentBook(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rentBook(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rentBook(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rentBook(const ::std::string& name, const ::Demo::Callback_Book_rentBookPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rentBook(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rentBook(const ::std::string& name, const ::Ice::Context& __ctx, const ::Demo::Callback_Book_rentBookPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rentBook(name, &__ctx, __del, __cookie);
    }

    void end_rentBook(const ::Ice::AsyncResultPtr&);
    
private:

    void rentBook(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_rentBook(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getRenterName()
    {
        return getRenterName(0);
    }
    ::std::string getRenterName(const ::Ice::Context& __ctx)
    {
        return getRenterName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRenterName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRenterName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRenterName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRenterName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRenterName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRenterName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRenterName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRenterName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRenterName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getRenterName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getRenterName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRenterName()
    {
        return begin_getRenterName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRenterName(const ::Ice::Context& __ctx)
    {
        return begin_getRenterName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRenterName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenterName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRenterName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenterName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRenterName(const ::Demo::Callback_Book_getRenterNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenterName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRenterName(const ::Ice::Context& __ctx, const ::Demo::Callback_Book_getRenterNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenterName(&__ctx, __del, __cookie);
    }

    ::std::string end_getRenterName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getRenterName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRenterName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void returnBook()
    {
        returnBook(0);
    }
    void returnBook(const ::Ice::Context& __ctx)
    {
        returnBook(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_returnBook(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_returnBook(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_returnBook(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_returnBook(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_returnBook(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_returnBook(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_returnBook(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_returnBook(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_returnBook(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_returnBook(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_returnBook(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_returnBook()
    {
        return begin_returnBook(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_returnBook(const ::Ice::Context& __ctx)
    {
        return begin_returnBook(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_returnBook(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnBook(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_returnBook(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnBook(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_returnBook(const ::Demo::Callback_Book_returnBookPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnBook(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_returnBook(const ::Ice::Context& __ctx, const ::Demo::Callback_Book_returnBookPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnBook(&__ctx, __del, __cookie);
    }

    void end_returnBook(const ::Ice::AsyncResultPtr&);
    
private:

    void returnBook(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_returnBook(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Book> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_secure(bool __secure) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_twoway() const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_oneway() const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_batchOneway() const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_datagram() const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_batchDatagram() const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_compress(bool __compress) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Book> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Book*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Library : virtual public ::IceProxy::Ice::Object
{
public:

    ::Demo::BookPrx createBook(const ::Demo::BookDescription& description)
    {
        return createBook(description, 0);
    }
    ::Demo::BookPrx createBook(const ::Demo::BookDescription& description, const ::Ice::Context& __ctx)
    {
        return createBook(description, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createBook(const ::Demo::BookDescription& description, const ::IceInternal::Function<void (const ::Demo::BookPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createBook(description, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createBook(const ::Demo::BookDescription& description, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createBook(description, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createBook(const ::Demo::BookDescription& description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::BookPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createBook(description, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createBook(const ::Demo::BookDescription& description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createBook(description, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createBook(const ::Demo::BookDescription& description, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::BookPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::BookPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
                ::Demo::BookPrx __ret;
                try
                {
                    __ret = __proxy->end_createBook(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::BookPrx&)> _response;
        };
        return begin_createBook(description, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createBook(const ::Demo::BookDescription& description)
    {
        return begin_createBook(description, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createBook(const ::Demo::BookDescription& description, const ::Ice::Context& __ctx)
    {
        return begin_createBook(description, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createBook(const ::Demo::BookDescription& description, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBook(description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createBook(const ::Demo::BookDescription& description, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBook(description, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createBook(const ::Demo::BookDescription& description, const ::Demo::Callback_Library_createBookPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBook(description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createBook(const ::Demo::BookDescription& description, const ::Ice::Context& __ctx, const ::Demo::Callback_Library_createBookPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBook(description, &__ctx, __del, __cookie);
    }

    ::Demo::BookPrx end_createBook(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::BookPrx createBook(const ::Demo::BookDescription&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createBook(const ::Demo::BookDescription&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::BookPrx findByIsbn(const ::std::string& isbn)
    {
        return findByIsbn(isbn, 0);
    }
    ::Demo::BookPrx findByIsbn(const ::std::string& isbn, const ::Ice::Context& __ctx)
    {
        return findByIsbn(isbn, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findByIsbn(const ::std::string& isbn, const ::IceInternal::Function<void (const ::Demo::BookPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByIsbn(isbn, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByIsbn(const ::std::string& isbn, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByIsbn(isbn, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findByIsbn(const ::std::string& isbn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::BookPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByIsbn(isbn, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByIsbn(const ::std::string& isbn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByIsbn(isbn, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findByIsbn(const ::std::string& isbn, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::BookPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::BookPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
                ::Demo::BookPrx __ret;
                try
                {
                    __ret = __proxy->end_findByIsbn(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::BookPrx&)> _response;
        };
        return begin_findByIsbn(isbn, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findByIsbn(const ::std::string& isbn)
    {
        return begin_findByIsbn(isbn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByIsbn(const ::std::string& isbn, const ::Ice::Context& __ctx)
    {
        return begin_findByIsbn(isbn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByIsbn(const ::std::string& isbn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByIsbn(isbn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByIsbn(const ::std::string& isbn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByIsbn(isbn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByIsbn(const ::std::string& isbn, const ::Demo::Callback_Library_findByIsbnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByIsbn(isbn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByIsbn(const ::std::string& isbn, const ::Ice::Context& __ctx, const ::Demo::Callback_Library_findByIsbnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByIsbn(isbn, &__ctx, __del, __cookie);
    }

    ::Demo::BookPrx end_findByIsbn(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::BookPrx findByIsbn(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findByIsbn(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::BookPrxSeq findByAuthors(const ::std::string& authors)
    {
        return findByAuthors(authors, 0);
    }
    ::Demo::BookPrxSeq findByAuthors(const ::std::string& authors, const ::Ice::Context& __ctx)
    {
        return findByAuthors(authors, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findByAuthors(const ::std::string& authors, const ::IceInternal::Function<void (const ::Demo::BookPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByAuthors(authors, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByAuthors(const ::std::string& authors, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByAuthors(authors, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findByAuthors(const ::std::string& authors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::BookPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findByAuthors(authors, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findByAuthors(const ::std::string& authors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findByAuthors(authors, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findByAuthors(const ::std::string& authors, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::BookPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::BookPrxSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
                ::Demo::BookPrxSeq __ret;
                try
                {
                    __ret = __proxy->end_findByAuthors(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::BookPrxSeq&)> _response;
        };
        return begin_findByAuthors(authors, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findByAuthors(const ::std::string& authors)
    {
        return begin_findByAuthors(authors, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByAuthors(const ::std::string& authors, const ::Ice::Context& __ctx)
    {
        return begin_findByAuthors(authors, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findByAuthors(const ::std::string& authors, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByAuthors(authors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByAuthors(const ::std::string& authors, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByAuthors(authors, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByAuthors(const ::std::string& authors, const ::Demo::Callback_Library_findByAuthorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByAuthors(authors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findByAuthors(const ::std::string& authors, const ::Ice::Context& __ctx, const ::Demo::Callback_Library_findByAuthorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findByAuthors(authors, &__ctx, __del, __cookie);
    }

    ::Demo::BookPrxSeq end_findByAuthors(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::BookPrxSeq findByAuthors(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findByAuthors(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEvictorSize(::Ice::Int size)
    {
        setEvictorSize(size, 0);
    }
    void setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx)
    {
        setEvictorSize(size, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setEvictorSize(size, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEvictorSize(size, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setEvictorSize(size, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEvictorSize(size, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setEvictorSize(::Ice::Int size, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setEvictorSize(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setEvictorSize(size, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size)
    {
        return begin_setEvictorSize(size, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx)
    {
        return begin_setEvictorSize(size, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Demo::Callback_Library_setEvictorSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::Demo::Callback_Library_setEvictorSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvictorSize(size, &__ctx, __del, __cookie);
    }

    void end_setEvictorSize(const ::Ice::AsyncResultPtr&);
    
private:

    void setEvictorSize(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEvictorSize(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_Library_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_Library_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Library> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_secure(bool __secure) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_twoway() const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_oneway() const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_batchOneway() const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_datagram() const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_batchDatagram() const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_compress(bool __compress) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Library> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Library*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class Book : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Demo::BookDescription getBookDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void rentBook(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getRenterName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void returnBook(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Library : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Demo::BookPrx createBook(const ::Demo::BookDescription&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::BookPrx findByIsbn(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::BookPrxSeq findByAuthors(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class Book : virtual public ::IceDelegate::Demo::Book,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Demo::BookDescription getBookDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void rentBook(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getRenterName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void returnBook(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Library : virtual public ::IceDelegate::Demo::Library,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Demo::BookPrx createBook(const ::Demo::BookDescription&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::BookPrx findByIsbn(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::BookPrxSeq findByAuthors(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class Book : virtual public ::IceDelegate::Demo::Book,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Demo::BookDescription getBookDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void rentBook(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getRenterName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void returnBook(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Library : virtual public ::IceDelegate::Demo::Library,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Demo::BookPrx createBook(const ::Demo::BookDescription&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::BookPrx findByIsbn(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::BookPrxSeq findByAuthors(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class Book : virtual public ::Ice::Object
{
public:

    typedef BookPrx ProxyType;
    typedef BookPtr PointerType;

    Book()
    {
    }

    Book(const ::Demo::BookDescription& __ice_description, const ::std::string& __ice_rentalCustomerName) :
        description(__ice_description),
        rentalCustomerName(__ice_rentalCustomerName)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::Demo::BookDescription getBookDescription(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getBookDescription(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void rentBook(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___rentBook(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getRenterName(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getRenterName(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void returnBook(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___returnBook(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Demo::BookDescription description;

    ::std::string rentalCustomerName;
};

inline bool operator==(const Book& l, const Book& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Book& l, const Book& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Library : virtual public ::Ice::Object
{
public:

    typedef LibraryPrx ProxyType;
    typedef LibraryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Demo::BookPrx createBook(const ::Demo::BookDescription&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createBook(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::BookPrx findByIsbn(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___findByIsbn(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Demo::BookPrxSeq findByAuthors(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___findByAuthors(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setEvictorSize(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEvictorSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Library& l, const Library& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Library& l, const Library& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_Book_getBookDescription : public Callback_Book_getBookDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::BookDescription&);

    CallbackNC_Book_getBookDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookDescription __ret;
        try
        {
            __ret = __proxy->end_getBookDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Book_getBookDescriptionPtr
newCallback_Book_getBookDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookDescription&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_getBookDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_getBookDescriptionPtr
newCallback_Book_getBookDescription(T* instance, void (T::*cb)(const ::Demo::BookDescription&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_getBookDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Book_getBookDescription : public Callback_Book_getBookDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::BookDescription&, const CT&);

    Callback_Book_getBookDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookDescription __ret;
        try
        {
            __ret = __proxy->end_getBookDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Book_getBookDescriptionPtr
newCallback_Book_getBookDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookDescription&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_getBookDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_getBookDescriptionPtr
newCallback_Book_getBookDescription(T* instance, void (T::*cb)(const ::Demo::BookDescription&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_getBookDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Book_destroy : public Callback_Book_destroy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Book_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Book_destroyPtr
newCallback_Book_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_destroyPtr
newCallback_Book_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Book_destroyPtr
newCallback_Book_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_destroyPtr
newCallback_Book_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Book_destroy : public Callback_Book_destroy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Book_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Book_destroyPtr
newCallback_Book_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_destroyPtr
newCallback_Book_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Book_destroyPtr
newCallback_Book_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_destroyPtr
newCallback_Book_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Book_rentBook : public Callback_Book_rentBook_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Book_rentBook(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_rentBook(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Book_rentBookPtr
newCallback_Book_rentBook(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_rentBook<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_rentBookPtr
newCallback_Book_rentBook(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_rentBook<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Book_rentBookPtr
newCallback_Book_rentBook(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_rentBook<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_rentBookPtr
newCallback_Book_rentBook(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_rentBook<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Book_rentBook : public Callback_Book_rentBook_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Book_rentBook(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_rentBook(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Book_rentBookPtr
newCallback_Book_rentBook(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_rentBook<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_rentBookPtr
newCallback_Book_rentBook(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_rentBook<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Book_rentBookPtr
newCallback_Book_rentBook(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_rentBook<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_rentBookPtr
newCallback_Book_rentBook(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_rentBook<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Book_getRenterName : public Callback_Book_getRenterName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Book_getRenterName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getRenterName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Book_getRenterNamePtr
newCallback_Book_getRenterName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_getRenterName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_getRenterNamePtr
newCallback_Book_getRenterName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_getRenterName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Book_getRenterName : public Callback_Book_getRenterName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Book_getRenterName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getRenterName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Book_getRenterNamePtr
newCallback_Book_getRenterName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_getRenterName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_getRenterNamePtr
newCallback_Book_getRenterName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_getRenterName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Book_returnBook : public Callback_Book_returnBook_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Book_returnBook(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_returnBook(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Book_returnBookPtr
newCallback_Book_returnBook(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_returnBook<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_returnBookPtr
newCallback_Book_returnBook(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_returnBook<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Book_returnBookPtr
newCallback_Book_returnBook(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_returnBook<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Book_returnBookPtr
newCallback_Book_returnBook(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Book_returnBook<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Book_returnBook : public Callback_Book_returnBook_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Book_returnBook(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::BookPrx __proxy = ::Demo::BookPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_returnBook(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Book_returnBookPtr
newCallback_Book_returnBook(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_returnBook<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_returnBookPtr
newCallback_Book_returnBook(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_returnBook<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Book_returnBookPtr
newCallback_Book_returnBook(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_returnBook<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Book_returnBookPtr
newCallback_Book_returnBook(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Book_returnBook<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Library_createBook : public Callback_Library_createBook_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::BookPrx&);

    CallbackNC_Library_createBook(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookPrx __ret;
        try
        {
            __ret = __proxy->end_createBook(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Library_createBookPtr
newCallback_Library_createBook(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_createBook<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Library_createBookPtr
newCallback_Library_createBook(T* instance, void (T::*cb)(const ::Demo::BookPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_createBook<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Library_createBook : public Callback_Library_createBook_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::BookPrx&, const CT&);

    Callback_Library_createBook(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookPrx __ret;
        try
        {
            __ret = __proxy->end_createBook(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Library_createBookPtr
newCallback_Library_createBook(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_createBook<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Library_createBookPtr
newCallback_Library_createBook(T* instance, void (T::*cb)(const ::Demo::BookPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_createBook<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Library_findByIsbn : public Callback_Library_findByIsbn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::BookPrx&);

    CallbackNC_Library_findByIsbn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookPrx __ret;
        try
        {
            __ret = __proxy->end_findByIsbn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Library_findByIsbnPtr
newCallback_Library_findByIsbn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_findByIsbn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Library_findByIsbnPtr
newCallback_Library_findByIsbn(T* instance, void (T::*cb)(const ::Demo::BookPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_findByIsbn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Library_findByIsbn : public Callback_Library_findByIsbn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::BookPrx&, const CT&);

    Callback_Library_findByIsbn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookPrx __ret;
        try
        {
            __ret = __proxy->end_findByIsbn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Library_findByIsbnPtr
newCallback_Library_findByIsbn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_findByIsbn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Library_findByIsbnPtr
newCallback_Library_findByIsbn(T* instance, void (T::*cb)(const ::Demo::BookPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_findByIsbn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Library_findByAuthors : public Callback_Library_findByAuthors_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::BookPrxSeq&);

    CallbackNC_Library_findByAuthors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookPrxSeq __ret;
        try
        {
            __ret = __proxy->end_findByAuthors(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Library_findByAuthorsPtr
newCallback_Library_findByAuthors(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_findByAuthors<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Library_findByAuthorsPtr
newCallback_Library_findByAuthors(T* instance, void (T::*cb)(const ::Demo::BookPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_findByAuthors<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Library_findByAuthors : public Callback_Library_findByAuthors_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::BookPrxSeq&, const CT&);

    Callback_Library_findByAuthors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        ::Demo::BookPrxSeq __ret;
        try
        {
            __ret = __proxy->end_findByAuthors(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Library_findByAuthorsPtr
newCallback_Library_findByAuthors(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::BookPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_findByAuthors<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Library_findByAuthorsPtr
newCallback_Library_findByAuthors(T* instance, void (T::*cb)(const ::Demo::BookPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_findByAuthors<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Library_setEvictorSize : public Callback_Library_setEvictorSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Library_setEvictorSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setEvictorSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_setEvictorSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_setEvictorSize<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_setEvictorSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_setEvictorSize<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Library_setEvictorSize : public Callback_Library_setEvictorSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Library_setEvictorSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::LibraryPrx __proxy = ::Demo::LibraryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setEvictorSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_setEvictorSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_setEvictorSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_setEvictorSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Library_setEvictorSizePtr
newCallback_Library_setEvictorSize(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_setEvictorSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Library_shutdown : public Callback_Library_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Library_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Library_shutdownPtr
newCallback_Library_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Library_shutdownPtr
newCallback_Library_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Library_shutdownPtr
newCallback_Library_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Library_shutdownPtr
newCallback_Library_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Library_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Library_shutdown : public Callback_Library_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Library_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Library_shutdownPtr
newCallback_Library_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Library_shutdownPtr
newCallback_Library_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Library_shutdownPtr
newCallback_Library_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Library_shutdownPtr
newCallback_Library_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Library_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
