// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Demo::upCast(::IceProxy::Demo::Class1* p) { return p; }

void
::IceProxy::Demo::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Class1>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Demo::Class1;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Demo::Class1::ice_staticId()
{
    return ::Demo::Class1::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Demo::Class1::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Demo::Class1);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Demo::Class1::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Demo::Class1);
}

::IceProxy::Ice::Object*
IceProxy::Demo::Class1::__newInstance() const
{
    return new Class1;
}
::IceProxy::Ice::Object* ::IceProxy::Demo::upCast(::IceProxy::Demo::Class2* p) { return p; }

void
::IceProxy::Demo::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Class2>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Demo::Class2;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Demo::Class2::ice_staticId()
{
    return ::Demo::Class2::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Demo::Class2::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Demo::Class2);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Demo::Class2::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Demo::Class2);
}

::IceProxy::Ice::Object*
IceProxy::Demo::Class2::__newInstance() const
{
    return new Class2;
}

::Ice::Object* Demo::upCast(::Demo::Class1* p) { return p; }
::Ice::ObjectPtr
Demo::Class1::ice_clone() const
{
    ::Ice::Object* __p = new Class1(*this);
    return __p;
}

namespace
{
const ::std::string __Demo__Class1_ids[2] =
{
    "::Demo::Class1",
    "::Ice::Object"
};

}

bool
Demo::Class1::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Demo__Class1_ids, __Demo__Class1_ids + 2, _s);
}

::std::vector< ::std::string>
Demo::Class1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Demo__Class1_ids[0], &__Demo__Class1_ids[2]);
}

const ::std::string&
Demo::Class1::ice_id(const ::Ice::Current&) const
{
    return __Demo__Class1_ids[0];
}

const ::std::string&
Demo::Class1::ice_staticId()
{
    return __Demo__Class1_ids[0];
}

void
Demo::Class1::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(s);
    __os->endWriteSlice();
}

void
Demo::Class1::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(s);
    __is->endReadSlice();
}

namespace
{

class __F__Demo__Class1 : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Demo::Class1::ice_staticId());
        return new ::Demo::Class1;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Demo__Class1_Ptr = new __F__Demo__Class1;

class __F__Demo__Class1__Init
{
public:

    __F__Demo__Class1__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Demo::Class1::ice_staticId(), __F__Demo__Class1_Ptr);
    }

    ~__F__Demo__Class1__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Demo::Class1::ice_staticId());
    }
};

const __F__Demo__Class1__Init __F__Demo__Class1__i;

}

const ::Ice::ObjectFactoryPtr&
Demo::Class1::ice_factory()
{
    return __F__Demo__Class1_Ptr;
}

void 
Demo::__patch(Class1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Demo::Class1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Demo::Class1::ice_staticId(), v);
    }
}

::Ice::Object* Demo::upCast(::Demo::Class2* p) { return p; }
::Ice::ObjectPtr
Demo::Class2::ice_clone() const
{
    ::Ice::Object* __p = new Class2(*this);
    return __p;
}

namespace
{
const ::std::string __Demo__Class2_ids[3] =
{
    "::Demo::Class1",
    "::Demo::Class2",
    "::Ice::Object"
};

}

bool
Demo::Class2::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Demo__Class2_ids, __Demo__Class2_ids + 3, _s);
}

::std::vector< ::std::string>
Demo::Class2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Demo__Class2_ids[0], &__Demo__Class2_ids[3]);
}

const ::std::string&
Demo::Class2::ice_id(const ::Ice::Current&) const
{
    return __Demo__Class2_ids[1];
}

const ::std::string&
Demo::Class2::ice_staticId()
{
    return __Demo__Class2_ids[1];
}

void
Demo::Class2::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Demo::Class2::__usesGC()
{
    return true;
}

void
Demo::Class2::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(obj)
    {
        obj->__addObject(_c);
    }
    if(rec)
    {
        rec->__addObject(_c);
    }
}

void
Demo::Class2::__gcClear()
{
    if(obj)
    {
        if(obj->__usesGC())
        {
            obj->__decRefUnsafe();
            obj.__clearHandleUnsafe();
        }
        else
        {
            obj = 0;
        }
    }
    if(rec)
    {
        if(rec->__usesGC())
        {
            rec->__decRefUnsafe();
            rec.__clearHandleUnsafe();
        }
        else
        {
            rec = 0;
        }
    }
}

void
Demo::Class2::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(obj);
    __os->write(rec);
    __os->endWriteSlice();
    ::Demo::Class1::__writeImpl(__os);
}

void
Demo::Class2::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(obj);
    __is->read(rec);
    __is->endReadSlice();
    ::Demo::Class1::__readImpl(__is);
}

namespace
{

class __F__Demo__Class2 : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Demo::Class2::ice_staticId());
        return new ::Demo::Class2;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Demo__Class2_Ptr = new __F__Demo__Class2;

class __F__Demo__Class2__Init
{
public:

    __F__Demo__Class2__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Demo::Class2::ice_staticId(), __F__Demo__Class2_Ptr);
    }

    ~__F__Demo__Class2__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Demo::Class2::ice_staticId());
    }
};

const __F__Demo__Class2__Init __F__Demo__Class2__i;

}

const ::Ice::ObjectFactoryPtr&
Demo::Class2::ice_factory()
{
    return __F__Demo__Class2_Ptr;
}

void 
Demo::__patch(Class2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Demo::Class2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Demo::Class2::ice_staticId(), v);
    }
}
