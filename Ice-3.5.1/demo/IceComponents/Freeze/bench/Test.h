// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____Test_h__
#define ____Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class Class1;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Class1>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Class1*);

class Class2;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Class2>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Class2*);

}

}

namespace Demo
{

class Class1;
bool operator==(const Class1&, const Class1&);
bool operator<(const Class1&, const Class1&);
::Ice::Object* upCast(::Demo::Class1*);
typedef ::IceInternal::Handle< ::Demo::Class1> Class1Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Class1> Class1Prx;
void __patch(Class1Ptr&, const ::Ice::ObjectPtr&);

class Class2;
bool operator==(const Class2&, const Class2&);
bool operator<(const Class2&, const Class2&);
::Ice::Object* upCast(::Demo::Class2*);
typedef ::IceInternal::Handle< ::Demo::Class2> Class2Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Class2> Class2Prx;
void __patch(Class2Ptr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

struct Struct1
{
    ::Ice::Long l;

    bool operator==(const Struct1& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(l != __rhs.l)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Struct1& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(l < __rhs.l)
        {
            return true;
        }
        else if(__rhs.l < l)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Struct1& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Struct1& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Struct1& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Struct1& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Struct2
{
    ::std::string s;
    ::Demo::Struct1 s1;

    bool operator==(const Struct2& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(s != __rhs.s)
        {
            return false;
        }
        if(s1 != __rhs.s1)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Struct2& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(s < __rhs.s)
        {
            return true;
        }
        else if(__rhs.s < s)
        {
            return false;
        }
        if(s1 < __rhs.s1)
        {
            return true;
        }
        else if(__rhs.s1 < s1)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Struct2& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Struct2& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Struct2& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Struct2& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::Struct1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Demo::Struct1, S>
{
    static void write(S* __os, const ::Demo::Struct1& v)
    {
        __os->write(v.l);
    }
};

template<class S>
struct StreamReader< ::Demo::Struct1, S>
{
    static void read(S* __is, ::Demo::Struct1& v)
    {
        __is->read(v.l);
    }
};

template<>
struct StreamableTraits< ::Demo::Struct2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Demo::Struct2, S>
{
    static void write(S* __os, const ::Demo::Struct2& v)
    {
        __os->write(v.s);
        __os->write(v.s1);
    }
};

template<class S>
struct StreamReader< ::Demo::Struct2, S>
{
    static void read(S* __is, ::Demo::Struct2& v)
    {
        __is->read(v.s);
        __is->read(v.s1);
    }
};

}

namespace Demo
{

}

namespace IceProxy
{

namespace Demo
{

class Class1 : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Class1> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_secure(bool __secure) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_twoway() const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_oneway() const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_batchOneway() const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_datagram() const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_batchDatagram() const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_compress(bool __compress) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Class1> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Class1*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Class2 : virtual public ::IceProxy::Demo::Class1
{
public:
    
    ::IceInternal::ProxyHandle<Class2> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_secure(bool __secure) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_twoway() const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_oneway() const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_batchOneway() const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_datagram() const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_batchDatagram() const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_compress(bool __compress) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Class2> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Class2*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class Class1 : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Class2 : virtual public ::IceDelegate::Demo::Class1
{
public:
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class Class1 : virtual public ::IceDelegate::Demo::Class1,
               virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Class2 : virtual public ::IceDelegate::Demo::Class2,
               virtual public ::IceDelegateM::Demo::Class1
{
public:
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class Class1 : virtual public ::IceDelegate::Demo::Class1,
               virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Class2 : virtual public ::IceDelegate::Demo::Class2,
               virtual public ::IceDelegateD::Demo::Class1
{
public:
};

}

}

namespace Demo
{

class Class1 : virtual public ::Ice::Object
{
public:

    typedef Class1Prx ProxyType;
    typedef Class1Ptr PointerType;

    Class1()
    {
    }

    explicit Class1(const ::std::string& __ice_s) :
        s(__ice_s)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string s;

protected:

    virtual ~Class1() {}

    friend class Class1__staticInit;
};

class Class1__staticInit
{
public:

    ::Demo::Class1 _init;
};

static Class1__staticInit _Class1_init;

inline bool operator==(const Class1& l, const Class1& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Class1& l, const Class1& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Class2 : public ::Demo::Class1, public IceInternal::GCShared
{
public:

    typedef Class2Prx ProxyType;
    typedef Class2Ptr PointerType;

    Class2()
    {
    }

    Class2(const ::std::string& __ice_s, const ::Ice::ObjectPtr& __ice_obj, const ::Ice::ObjectPtr& __ice_rec) :
        ::Demo::Class1(__ice_s)
        ,
        obj(__ice_obj),
        rec(__ice_rec)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Demo::Class1::__writeImpl;
    using ::Demo::Class1::__readImpl;
    #endif

public:

    ::Ice::ObjectPtr obj;

    ::Ice::ObjectPtr rec;

protected:

    virtual ~Class2() {}
};

inline bool operator==(const Class2& l, const Class2& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Class2& l, const Class2& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

}

#endif
