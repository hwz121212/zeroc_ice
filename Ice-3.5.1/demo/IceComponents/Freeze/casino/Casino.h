// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Casino.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____Casino_h__
#define ____Casino_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Casino
{

class Player;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Casino::Player>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Casino::Player*);

class Bet;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Casino::Bet>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Casino::Bet*);

class Bank;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Casino::Bank>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Casino::Bank*);

}

}

namespace Casino
{

class Player;
bool operator==(const Player&, const Player&);
bool operator<(const Player&, const Player&);
::Ice::Object* upCast(::Casino::Player*);
typedef ::IceInternal::Handle< ::Casino::Player> PlayerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Casino::Player> PlayerPrx;
void __patch(PlayerPtr&, const ::Ice::ObjectPtr&);

class Bet;
bool operator==(const Bet&, const Bet&);
bool operator<(const Bet&, const Bet&);
::Ice::Object* upCast(::Casino::Bet*);
typedef ::IceInternal::Handle< ::Casino::Bet> BetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Casino::Bet> BetPrx;
void __patch(BetPtr&, const ::Ice::ObjectPtr&);

class Bank;
bool operator==(const Bank&, const Bank&);
bool operator<(const Bank&, const Bank&);
::Ice::Object* upCast(::Casino::Bank*);
typedef ::IceInternal::Handle< ::Casino::Bank> BankPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Casino::Bank> BankPrx;
void __patch(BankPtr&, const ::Ice::ObjectPtr&);

}

namespace Casino
{

typedef ::std::vector< ::Casino::PlayerPrx> PlayerPrxSeq;

class OutOfChipsException : public ::Ice::UserException
{
public:

    OutOfChipsException() {}
    virtual ~OutOfChipsException() throw();

    virtual ::std::string ice_name() const;
    virtual OutOfChipsException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static OutOfChipsException __OutOfChipsException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Casino::OutOfChipsException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Casino
{

class Callback_Player_getChips_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_getChips_Base> Callback_Player_getChipsPtr;

class Callback_Player_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Player_destroy_Base> Callback_Player_destroyPtr;

class Callback_Bet_getAmount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bet_getAmount_Base> Callback_Bet_getAmountPtr;

class Callback_Bet_accept_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bet_accept_Base> Callback_Bet_acceptPtr;

class Callback_Bank_buyChips_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bank_buyChips_Base> Callback_Bank_buyChipsPtr;

class Callback_Bank_getPlayers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bank_getPlayers_Base> Callback_Bank_getPlayersPtr;

class Callback_Bank_getOutstandingChips_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bank_getOutstandingChips_Base> Callback_Bank_getOutstandingChipsPtr;

class Callback_Bank_getLiveBetCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bank_getLiveBetCount_Base> Callback_Bank_getLiveBetCountPtr;

class Callback_Bank_getEarnings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bank_getEarnings_Base> Callback_Bank_getEarningsPtr;

class Callback_Bank_checkAllChips_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bank_checkAllChips_Base> Callback_Bank_checkAllChipsPtr;

class Callback_Bank_createBet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bank_createBet_Base> Callback_Bank_createBetPtr;

}

namespace IceProxy
{

namespace Casino
{

class Player : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getChips()
    {
        return getChips(0);
    }
    ::Ice::Int getChips(const ::Ice::Context& __ctx)
    {
        return getChips(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getChips(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChips(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChips(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChips(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getChips(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChips(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChips(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChips(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getChips(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::PlayerPrx __proxy = ::Casino::PlayerPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getChips(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getChips(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getChips()
    {
        return begin_getChips(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChips(const ::Ice::Context& __ctx)
    {
        return begin_getChips(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChips(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChips(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChips(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChips(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChips(const ::Casino::Callback_Player_getChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChips(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChips(const ::Ice::Context& __ctx, const ::Casino::Callback_Player_getChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChips(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getChips(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getChips(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getChips(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Casino::Callback_Player_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Casino::Callback_Player_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Player> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_secure(bool __secure) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_twoway() const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_oneway() const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_batchOneway() const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_datagram() const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_batchDatagram() const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_compress(bool __compress) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Player> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Player*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Bet : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getAmount()
    {
        return getAmount(0);
    }
    ::Ice::Int getAmount(const ::Ice::Context& __ctx)
    {
        return getAmount(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAmount(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAmount(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAmount(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAmount(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAmount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAmount(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAmount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAmount(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAmount(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BetPrx __proxy = ::Casino::BetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getAmount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getAmount(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAmount()
    {
        return begin_getAmount(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAmount(const ::Ice::Context& __ctx)
    {
        return begin_getAmount(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAmount(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAmount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAmount(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAmount(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAmount(const ::Casino::Callback_Bet_getAmountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAmount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAmount(const ::Ice::Context& __ctx, const ::Casino::Callback_Bet_getAmountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAmount(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getAmount(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getAmount(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAmount(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void accept(const ::Casino::PlayerPrx& p)
    {
        accept(p, 0);
    }
    void accept(const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx)
    {
        accept(p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_accept(const ::Casino::PlayerPrx& p, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_accept(p, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_accept(const ::Casino::PlayerPrx& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_accept(p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_accept(const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_accept(p, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_accept(const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_accept(p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_accept(const ::Casino::PlayerPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BetPrx __proxy = ::Casino::BetPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_accept(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_accept(p, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_accept(const ::Casino::PlayerPrx& p)
    {
        return begin_accept(p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_accept(const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx)
    {
        return begin_accept(p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_accept(const ::Casino::PlayerPrx& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_accept(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_accept(const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_accept(p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_accept(const ::Casino::PlayerPrx& p, const ::Casino::Callback_Bet_acceptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_accept(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_accept(const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::Casino::Callback_Bet_acceptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_accept(p, &__ctx, __del, __cookie);
    }

    void end_accept(const ::Ice::AsyncResultPtr&);
    
private:

    void accept(const ::Casino::PlayerPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_accept(const ::Casino::PlayerPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Bet> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_secure(bool __secure) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_twoway() const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_oneway() const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_batchOneway() const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_datagram() const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_batchDatagram() const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_compress(bool __compress) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Bet> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Bet*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Bank : virtual public ::IceProxy::Ice::Object
{
public:

    bool buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p)
    {
        return buyChips(chips, p, 0);
    }
    bool buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx)
    {
        return buyChips(chips, p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_buyChips(chips, p, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_buyChips(chips, p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_buyChips(chips, p, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_buyChips(chips, p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_buyChips(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_buyChips(chips, p, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p)
    {
        return begin_buyChips(chips, p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx)
    {
        return begin_buyChips(chips, p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_buyChips(chips, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_buyChips(chips, p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Casino::Callback_Bank_buyChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_buyChips(chips, p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_buyChips(::Ice::Int chips, const ::Casino::PlayerPrx& p, const ::Ice::Context& __ctx, const ::Casino::Callback_Bank_buyChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_buyChips(chips, p, &__ctx, __del, __cookie);
    }

    bool end_buyChips(const ::Ice::AsyncResultPtr&);
    
private:

    bool buyChips(::Ice::Int, const ::Casino::PlayerPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_buyChips(::Ice::Int, const ::Casino::PlayerPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Casino::PlayerPrxSeq getPlayers()
    {
        return getPlayers(0);
    }
    ::Casino::PlayerPrxSeq getPlayers(const ::Ice::Context& __ctx)
    {
        return getPlayers(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPlayers(const ::IceInternal::Function<void (const ::Casino::PlayerPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPlayers(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPlayers(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPlayers(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPlayers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Casino::PlayerPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPlayers(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPlayers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPlayers(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPlayers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Casino::PlayerPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Casino::PlayerPrxSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
                ::Casino::PlayerPrxSeq __ret;
                try
                {
                    __ret = __proxy->end_getPlayers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Casino::PlayerPrxSeq&)> _response;
        };
        return begin_getPlayers(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPlayers()
    {
        return begin_getPlayers(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlayers(const ::Ice::Context& __ctx)
    {
        return begin_getPlayers(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlayers(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlayers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlayers(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlayers(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlayers(const ::Casino::Callback_Bank_getPlayersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlayers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlayers(const ::Ice::Context& __ctx, const ::Casino::Callback_Bank_getPlayersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlayers(&__ctx, __del, __cookie);
    }

    ::Casino::PlayerPrxSeq end_getPlayers(const ::Ice::AsyncResultPtr&);
    
private:

    ::Casino::PlayerPrxSeq getPlayers(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPlayers(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getOutstandingChips()
    {
        return getOutstandingChips(0);
    }
    ::Ice::Int getOutstandingChips(const ::Ice::Context& __ctx)
    {
        return getOutstandingChips(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOutstandingChips(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOutstandingChips(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOutstandingChips(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOutstandingChips(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOutstandingChips(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOutstandingChips(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOutstandingChips(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOutstandingChips(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOutstandingChips(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getOutstandingChips(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getOutstandingChips(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOutstandingChips()
    {
        return begin_getOutstandingChips(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOutstandingChips(const ::Ice::Context& __ctx)
    {
        return begin_getOutstandingChips(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOutstandingChips(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOutstandingChips(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOutstandingChips(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOutstandingChips(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOutstandingChips(const ::Casino::Callback_Bank_getOutstandingChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOutstandingChips(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOutstandingChips(const ::Ice::Context& __ctx, const ::Casino::Callback_Bank_getOutstandingChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOutstandingChips(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getOutstandingChips(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getOutstandingChips(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOutstandingChips(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getLiveBetCount()
    {
        return getLiveBetCount(0);
    }
    ::Ice::Int getLiveBetCount(const ::Ice::Context& __ctx)
    {
        return getLiveBetCount(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLiveBetCount(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLiveBetCount(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLiveBetCount(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLiveBetCount(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLiveBetCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLiveBetCount(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLiveBetCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLiveBetCount(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLiveBetCount(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getLiveBetCount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getLiveBetCount(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLiveBetCount()
    {
        return begin_getLiveBetCount(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLiveBetCount(const ::Ice::Context& __ctx)
    {
        return begin_getLiveBetCount(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLiveBetCount(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLiveBetCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLiveBetCount(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLiveBetCount(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLiveBetCount(const ::Casino::Callback_Bank_getLiveBetCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLiveBetCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLiveBetCount(const ::Ice::Context& __ctx, const ::Casino::Callback_Bank_getLiveBetCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLiveBetCount(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getLiveBetCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getLiveBetCount(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLiveBetCount(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getEarnings()
    {
        return getEarnings(0);
    }
    ::Ice::Int getEarnings(const ::Ice::Context& __ctx)
    {
        return getEarnings(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEarnings(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEarnings(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEarnings(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEarnings(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEarnings(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEarnings(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEarnings(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEarnings(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEarnings(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getEarnings(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getEarnings(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEarnings()
    {
        return begin_getEarnings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEarnings(const ::Ice::Context& __ctx)
    {
        return begin_getEarnings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEarnings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEarnings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEarnings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEarnings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEarnings(const ::Casino::Callback_Bank_getEarningsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEarnings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEarnings(const ::Ice::Context& __ctx, const ::Casino::Callback_Bank_getEarningsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEarnings(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getEarnings(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getEarnings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEarnings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool checkAllChips()
    {
        return checkAllChips(0);
    }
    bool checkAllChips(const ::Ice::Context& __ctx)
    {
        return checkAllChips(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkAllChips(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkAllChips(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkAllChips(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkAllChips(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkAllChips(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkAllChips(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkAllChips(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkAllChips(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkAllChips(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_checkAllChips(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_checkAllChips(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkAllChips()
    {
        return begin_checkAllChips(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkAllChips(const ::Ice::Context& __ctx)
    {
        return begin_checkAllChips(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkAllChips(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkAllChips(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkAllChips(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkAllChips(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkAllChips(const ::Casino::Callback_Bank_checkAllChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkAllChips(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkAllChips(const ::Ice::Context& __ctx, const ::Casino::Callback_Bank_checkAllChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkAllChips(&__ctx, __del, __cookie);
    }

    bool end_checkAllChips(const ::Ice::AsyncResultPtr&);
    
private:

    bool checkAllChips(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkAllChips(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Casino::BetPrx createBet(::Ice::Int amount, ::Ice::Int lifetime)
    {
        return createBet(amount, lifetime, 0);
    }
    ::Casino::BetPrx createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::Context& __ctx)
    {
        return createBet(amount, lifetime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::IceInternal::Function<void (const ::Casino::BetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createBet(amount, lifetime, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createBet(amount, lifetime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Casino::BetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createBet(amount, lifetime, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createBet(amount, lifetime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Casino::BetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Casino::BetPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
                ::Casino::BetPrx __ret;
                try
                {
                    __ret = __proxy->end_createBet(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Casino::BetPrx&)> _response;
        };
        return begin_createBet(amount, lifetime, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createBet(::Ice::Int amount, ::Ice::Int lifetime)
    {
        return begin_createBet(amount, lifetime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::Context& __ctx)
    {
        return begin_createBet(amount, lifetime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBet(amount, lifetime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBet(amount, lifetime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Casino::Callback_Bank_createBetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBet(amount, lifetime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createBet(::Ice::Int amount, ::Ice::Int lifetime, const ::Ice::Context& __ctx, const ::Casino::Callback_Bank_createBetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createBet(amount, lifetime, &__ctx, __del, __cookie);
    }

    ::Casino::BetPrx end_createBet(const ::Ice::AsyncResultPtr&);
    
private:

    ::Casino::BetPrx createBet(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createBet(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Bank> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_secure(bool __secure) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_twoway() const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_oneway() const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_batchOneway() const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_datagram() const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_batchDatagram() const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_compress(bool __compress) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Bank> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Bank*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Casino
{

class Player : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Bet : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getAmount(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void accept(const ::Casino::PlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Bank : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool buyChips(::Ice::Int, const ::Casino::PlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Casino::PlayerPrxSeq getPlayers(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getOutstandingChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getLiveBetCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getEarnings(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool checkAllChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Casino::BetPrx createBet(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Casino
{

class Player : virtual public ::IceDelegate::Casino::Player,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Bet : virtual public ::IceDelegate::Casino::Bet,
            virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getAmount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void accept(const ::Casino::PlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Bank : virtual public ::IceDelegate::Casino::Bank,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool buyChips(::Ice::Int, const ::Casino::PlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Casino::PlayerPrxSeq getPlayers(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getOutstandingChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getLiveBetCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getEarnings(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkAllChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Casino::BetPrx createBet(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Casino
{

class Player : virtual public ::IceDelegate::Casino::Player,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Bet : virtual public ::IceDelegate::Casino::Bet,
            virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getAmount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void accept(const ::Casino::PlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Bank : virtual public ::IceDelegate::Casino::Bank,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool buyChips(::Ice::Int, const ::Casino::PlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Casino::PlayerPrxSeq getPlayers(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getOutstandingChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getLiveBetCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getEarnings(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkAllChips(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Casino::BetPrx createBet(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Casino
{

class Player : virtual public ::Ice::Object
{
public:

    typedef PlayerPrx ProxyType;
    typedef PlayerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getChips(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getChips(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Player& l, const Player& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Player& l, const Player& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Bet : virtual public ::Ice::Object
{
public:

    typedef BetPrx ProxyType;
    typedef BetPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getAmount(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getAmount(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void accept(const ::Casino::PlayerPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___accept(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Bet& l, const Bet& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Bet& l, const Bet& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Bank : virtual public ::Ice::Object
{
public:

    typedef BankPrx ProxyType;
    typedef BankPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool buyChips(::Ice::Int, const ::Casino::PlayerPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___buyChips(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Casino::PlayerPrxSeq getPlayers(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getPlayers(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int getOutstandingChips(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getOutstandingChips(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int getLiveBetCount(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getLiveBetCount(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int getEarnings(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getEarnings(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual bool checkAllChips(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___checkAllChips(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Casino::BetPrx createBet(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createBet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Bank& l, const Bank& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Bank& l, const Bank& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Casino
{

template<class T>
class CallbackNC_Player_getChips : public Callback_Player_getChips_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Player_getChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::PlayerPrx __proxy = ::Casino::PlayerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Player_getChipsPtr
newCallback_Player_getChips(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_getChips<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_getChipsPtr
newCallback_Player_getChips(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_getChips<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_getChips : public Callback_Player_getChips_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Player_getChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::PlayerPrx __proxy = ::Casino::PlayerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Player_getChipsPtr
newCallback_Player_getChips(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_getChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_getChipsPtr
newCallback_Player_getChips(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_getChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Player_destroy : public Callback_Player_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Player_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Player_destroyPtr
newCallback_Player_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_destroyPtr
newCallback_Player_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Player_destroyPtr
newCallback_Player_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Player_destroyPtr
newCallback_Player_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Player_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Player_destroy : public Callback_Player_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Player_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Player_destroyPtr
newCallback_Player_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_destroyPtr
newCallback_Player_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Player_destroyPtr
newCallback_Player_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Player_destroyPtr
newCallback_Player_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Player_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Bet_getAmount : public Callback_Bet_getAmount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Bet_getAmount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BetPrx __proxy = ::Casino::BetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getAmount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bet_getAmountPtr
newCallback_Bet_getAmount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bet_getAmount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bet_getAmountPtr
newCallback_Bet_getAmount(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bet_getAmount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bet_getAmount : public Callback_Bet_getAmount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Bet_getAmount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BetPrx __proxy = ::Casino::BetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getAmount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bet_getAmountPtr
newCallback_Bet_getAmount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bet_getAmount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bet_getAmountPtr
newCallback_Bet_getAmount(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bet_getAmount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bet_accept : public Callback_Bet_accept_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Bet_accept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BetPrx __proxy = ::Casino::BetPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_accept(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Bet_acceptPtr
newCallback_Bet_accept(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bet_accept<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bet_acceptPtr
newCallback_Bet_accept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bet_accept<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Bet_acceptPtr
newCallback_Bet_accept(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bet_accept<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bet_acceptPtr
newCallback_Bet_accept(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bet_accept<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bet_accept : public Callback_Bet_accept_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Bet_accept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BetPrx __proxy = ::Casino::BetPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_accept(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bet_acceptPtr
newCallback_Bet_accept(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bet_accept<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bet_acceptPtr
newCallback_Bet_accept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bet_accept<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Bet_acceptPtr
newCallback_Bet_accept(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bet_accept<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bet_acceptPtr
newCallback_Bet_accept(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bet_accept<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Bank_buyChips : public Callback_Bank_buyChips_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Bank_buyChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_buyChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bank_buyChipsPtr
newCallback_Bank_buyChips(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_buyChips<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bank_buyChipsPtr
newCallback_Bank_buyChips(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_buyChips<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bank_buyChips : public Callback_Bank_buyChips_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Bank_buyChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_buyChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bank_buyChipsPtr
newCallback_Bank_buyChips(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_buyChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bank_buyChipsPtr
newCallback_Bank_buyChips(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_buyChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bank_getPlayers : public Callback_Bank_getPlayers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Casino::PlayerPrxSeq&);

    CallbackNC_Bank_getPlayers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Casino::PlayerPrxSeq __ret;
        try
        {
            __ret = __proxy->end_getPlayers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bank_getPlayersPtr
newCallback_Bank_getPlayers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Casino::PlayerPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getPlayers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bank_getPlayersPtr
newCallback_Bank_getPlayers(T* instance, void (T::*cb)(const ::Casino::PlayerPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getPlayers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bank_getPlayers : public Callback_Bank_getPlayers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Casino::PlayerPrxSeq&, const CT&);

    Callback_Bank_getPlayers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Casino::PlayerPrxSeq __ret;
        try
        {
            __ret = __proxy->end_getPlayers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bank_getPlayersPtr
newCallback_Bank_getPlayers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Casino::PlayerPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getPlayers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bank_getPlayersPtr
newCallback_Bank_getPlayers(T* instance, void (T::*cb)(const ::Casino::PlayerPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getPlayers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bank_getOutstandingChips : public Callback_Bank_getOutstandingChips_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Bank_getOutstandingChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getOutstandingChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bank_getOutstandingChipsPtr
newCallback_Bank_getOutstandingChips(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getOutstandingChips<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bank_getOutstandingChipsPtr
newCallback_Bank_getOutstandingChips(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getOutstandingChips<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bank_getOutstandingChips : public Callback_Bank_getOutstandingChips_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Bank_getOutstandingChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getOutstandingChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bank_getOutstandingChipsPtr
newCallback_Bank_getOutstandingChips(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getOutstandingChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bank_getOutstandingChipsPtr
newCallback_Bank_getOutstandingChips(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getOutstandingChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bank_getLiveBetCount : public Callback_Bank_getLiveBetCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Bank_getLiveBetCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getLiveBetCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bank_getLiveBetCountPtr
newCallback_Bank_getLiveBetCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getLiveBetCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bank_getLiveBetCountPtr
newCallback_Bank_getLiveBetCount(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getLiveBetCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bank_getLiveBetCount : public Callback_Bank_getLiveBetCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Bank_getLiveBetCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getLiveBetCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bank_getLiveBetCountPtr
newCallback_Bank_getLiveBetCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getLiveBetCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bank_getLiveBetCountPtr
newCallback_Bank_getLiveBetCount(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getLiveBetCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bank_getEarnings : public Callback_Bank_getEarnings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Bank_getEarnings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getEarnings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bank_getEarningsPtr
newCallback_Bank_getEarnings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getEarnings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bank_getEarningsPtr
newCallback_Bank_getEarnings(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_getEarnings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bank_getEarnings : public Callback_Bank_getEarnings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Bank_getEarnings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getEarnings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bank_getEarningsPtr
newCallback_Bank_getEarnings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getEarnings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bank_getEarningsPtr
newCallback_Bank_getEarnings(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_getEarnings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bank_checkAllChips : public Callback_Bank_checkAllChips_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Bank_checkAllChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkAllChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bank_checkAllChipsPtr
newCallback_Bank_checkAllChips(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_checkAllChips<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bank_checkAllChipsPtr
newCallback_Bank_checkAllChips(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_checkAllChips<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bank_checkAllChips : public Callback_Bank_checkAllChips_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Bank_checkAllChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkAllChips(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bank_checkAllChipsPtr
newCallback_Bank_checkAllChips(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_checkAllChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bank_checkAllChipsPtr
newCallback_Bank_checkAllChips(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_checkAllChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bank_createBet : public Callback_Bank_createBet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Casino::BetPrx&);

    CallbackNC_Bank_createBet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Casino::BetPrx __ret;
        try
        {
            __ret = __proxy->end_createBet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Bank_createBetPtr
newCallback_Bank_createBet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Casino::BetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_createBet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bank_createBetPtr
newCallback_Bank_createBet(T* instance, void (T::*cb)(const ::Casino::BetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bank_createBet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bank_createBet : public Callback_Bank_createBet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Casino::BetPrx&, const CT&);

    Callback_Bank_createBet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Casino::BankPrx __proxy = ::Casino::BankPrx::uncheckedCast(__result->getProxy());
        ::Casino::BetPrx __ret;
        try
        {
            __ret = __proxy->end_createBet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Bank_createBetPtr
newCallback_Bank_createBet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Casino::BetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_createBet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bank_createBetPtr
newCallback_Bank_createBet(T* instance, void (T::*cb)(const ::Casino::BetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bank_createBet<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
