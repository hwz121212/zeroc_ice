// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CasinoStore.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____CasinoStore_h__
#define ____CasinoStore_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Casino.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CasinoStore
{

class Winner;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::Winner>&);
::IceProxy::Ice::Object* upCast(::IceProxy::CasinoStore::Winner*);

class PersistentPlayer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentPlayer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::CasinoStore::PersistentPlayer*);

class PersistentBet;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentBet>&);
::IceProxy::Ice::Object* upCast(::IceProxy::CasinoStore::PersistentBet*);

class PersistentBank;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentBank>&);
::IceProxy::Ice::Object* upCast(::IceProxy::CasinoStore::PersistentBank*);

}

}

namespace CasinoStore
{

class Winner;
bool operator==(const Winner&, const Winner&);
bool operator<(const Winner&, const Winner&);
::Ice::Object* upCast(::CasinoStore::Winner*);
typedef ::IceInternal::Handle< ::CasinoStore::Winner> WinnerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::Winner> WinnerPrx;
void __patch(WinnerPtr&, const ::Ice::ObjectPtr&);

class PersistentPlayer;
bool operator==(const PersistentPlayer&, const PersistentPlayer&);
bool operator<(const PersistentPlayer&, const PersistentPlayer&);
::Ice::Object* upCast(::CasinoStore::PersistentPlayer*);
typedef ::IceInternal::Handle< ::CasinoStore::PersistentPlayer> PersistentPlayerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentPlayer> PersistentPlayerPrx;
void __patch(PersistentPlayerPtr&, const ::Ice::ObjectPtr&);

class PersistentBet;
bool operator==(const PersistentBet&, const PersistentBet&);
bool operator<(const PersistentBet&, const PersistentBet&);
::Ice::Object* upCast(::CasinoStore::PersistentBet*);
typedef ::IceInternal::Handle< ::CasinoStore::PersistentBet> PersistentBetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentBet> PersistentBetPrx;
void __patch(PersistentBetPtr&, const ::Ice::ObjectPtr&);

class PersistentBank;
bool operator==(const PersistentBank&, const PersistentBank&);
bool operator<(const PersistentBank&, const PersistentBank&);
::Ice::Object* upCast(::CasinoStore::PersistentBank*);
typedef ::IceInternal::Handle< ::CasinoStore::PersistentBank> PersistentBankPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentBank> PersistentBankPrx;
void __patch(PersistentBankPtr&, const ::Ice::ObjectPtr&);

}

namespace CasinoStore
{

typedef ::std::vector< ::CasinoStore::WinnerPrx> WinnerPrxSeq;

}

namespace CasinoStore
{

class Callback_Winner_win_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Winner_win_Base> Callback_Winner_winPtr;

class Callback_PersistentPlayer_withdraw_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PersistentPlayer_withdraw_Base> Callback_PersistentPlayer_withdrawPtr;

class Callback_PersistentBet_getChipsInPlay_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PersistentBet_getChipsInPlay_Base> Callback_PersistentBet_getChipsInPlayPtr;

class Callback_PersistentBet_getCloseTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PersistentBet_getCloseTime_Base> Callback_PersistentBet_getCloseTimePtr;

class Callback_PersistentBet_complete_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PersistentBet_complete_Base> Callback_PersistentBet_completePtr;

class Callback_PersistentBank_returnAllChips_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PersistentBank_returnAllChips_Base> Callback_PersistentBank_returnAllChipsPtr;

class Callback_PersistentBank_reloadBets_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PersistentBank_reloadBets_Base> Callback_PersistentBank_reloadBetsPtr;

}

namespace IceProxy
{

namespace CasinoStore
{

class Winner : virtual public ::IceProxy::Ice::Object
{
public:

    void win(::Ice::Int count)
    {
        win(count, 0);
    }
    void win(::Ice::Int count, const ::Ice::Context& __ctx)
    {
        win(count, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_win(::Ice::Int count, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_win(count, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_win(::Ice::Int count, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_win(count, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_win(::Ice::Int count, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_win(count, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_win(::Ice::Int count, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_win(count, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_win(::Ice::Int count)
    {
        return begin_win(count, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_win(::Ice::Int count, const ::Ice::Context& __ctx)
    {
        return begin_win(count, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_win(::Ice::Int count, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(count, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_win(::Ice::Int count, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(count, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_win(::Ice::Int count, const ::CasinoStore::Callback_Winner_winPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(count, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_win(::Ice::Int count, const ::Ice::Context& __ctx, const ::CasinoStore::Callback_Winner_winPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_win(count, &__ctx, __del, __cookie);
    }

    void end_win(const ::Ice::AsyncResultPtr&);
    
private:

    void win(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_win(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Winner> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_secure(bool __secure) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_twoway() const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_oneway() const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_batchOneway() const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_datagram() const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_batchDatagram() const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_compress(bool __compress) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Winner> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Winner*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PersistentPlayer : virtual public ::IceProxy::Casino::Player,
                         virtual public ::IceProxy::CasinoStore::Winner
{
public:

    void withdraw(::Ice::Int count)
    {
        withdraw(count, 0);
    }
    void withdraw(::Ice::Int count, const ::Ice::Context& __ctx)
    {
        withdraw(count, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int count, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_withdraw(count, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int count, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_withdraw(count, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int count, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_withdraw(count, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int count, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_withdraw(count, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_withdraw(::Ice::Int count, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::CasinoStore::PersistentPlayerPrx __proxy = ::CasinoStore::PersistentPlayerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_withdraw(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_withdraw(count, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int count)
    {
        return begin_withdraw(count, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int count, const ::Ice::Context& __ctx)
    {
        return begin_withdraw(count, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int count, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(count, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int count, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(count, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int count, const ::CasinoStore::Callback_PersistentPlayer_withdrawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(count, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int count, const ::Ice::Context& __ctx, const ::CasinoStore::Callback_PersistentPlayer_withdrawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(count, &__ctx, __del, __cookie);
    }

    void end_withdraw(const ::Ice::AsyncResultPtr&);
    
private:

    void withdraw(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_secure(bool __secure) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_twoway() const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_oneway() const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_batchOneway() const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_datagram() const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_batchDatagram() const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_compress(bool __compress) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentPlayer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PersistentPlayer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PersistentBet : virtual public ::IceProxy::Casino::Bet
{
public:

    ::Ice::Int getChipsInPlay()
    {
        return getChipsInPlay(0);
    }
    ::Ice::Int getChipsInPlay(const ::Ice::Context& __ctx)
    {
        return getChipsInPlay(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getChipsInPlay(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChipsInPlay(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChipsInPlay(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChipsInPlay(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getChipsInPlay(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChipsInPlay(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChipsInPlay(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChipsInPlay(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getChipsInPlay(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::CasinoStore::PersistentBetPrx __proxy = ::CasinoStore::PersistentBetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getChipsInPlay(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getChipsInPlay(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getChipsInPlay()
    {
        return begin_getChipsInPlay(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChipsInPlay(const ::Ice::Context& __ctx)
    {
        return begin_getChipsInPlay(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChipsInPlay(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChipsInPlay(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChipsInPlay(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChipsInPlay(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChipsInPlay(const ::CasinoStore::Callback_PersistentBet_getChipsInPlayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChipsInPlay(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChipsInPlay(const ::Ice::Context& __ctx, const ::CasinoStore::Callback_PersistentBet_getChipsInPlayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChipsInPlay(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getChipsInPlay(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getChipsInPlay(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getChipsInPlay(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long getCloseTime()
    {
        return getCloseTime(0);
    }
    ::Ice::Long getCloseTime(const ::Ice::Context& __ctx)
    {
        return getCloseTime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCloseTime(const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCloseTime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCloseTime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCloseTime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCloseTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCloseTime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCloseTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCloseTime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCloseTime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::CasinoStore::PersistentBetPrx __proxy = ::CasinoStore::PersistentBetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_getCloseTime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_getCloseTime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCloseTime()
    {
        return begin_getCloseTime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCloseTime(const ::Ice::Context& __ctx)
    {
        return begin_getCloseTime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCloseTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCloseTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCloseTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCloseTime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCloseTime(const ::CasinoStore::Callback_PersistentBet_getCloseTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCloseTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCloseTime(const ::Ice::Context& __ctx, const ::CasinoStore::Callback_PersistentBet_getCloseTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCloseTime(&__ctx, __del, __cookie);
    }

    ::Ice::Long end_getCloseTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long getCloseTime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCloseTime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void complete(::Ice::Int random)
    {
        complete(random, 0);
    }
    void complete(::Ice::Int random, const ::Ice::Context& __ctx)
    {
        complete(random, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_complete(::Ice::Int random, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_complete(random, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_complete(::Ice::Int random, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_complete(random, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_complete(::Ice::Int random, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_complete(random, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_complete(::Ice::Int random, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_complete(random, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_complete(::Ice::Int random)
    {
        return begin_complete(random, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_complete(::Ice::Int random, const ::Ice::Context& __ctx)
    {
        return begin_complete(random, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_complete(::Ice::Int random, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_complete(random, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_complete(::Ice::Int random, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_complete(random, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_complete(::Ice::Int random, const ::CasinoStore::Callback_PersistentBet_completePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_complete(random, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_complete(::Ice::Int random, const ::Ice::Context& __ctx, const ::CasinoStore::Callback_PersistentBet_completePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_complete(random, &__ctx, __del, __cookie);
    }

    void end_complete(const ::Ice::AsyncResultPtr&);
    
private:

    void complete(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_complete(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_secure(bool __secure) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_twoway() const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_oneway() const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_batchOneway() const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_datagram() const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_batchDatagram() const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_compress(bool __compress) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBet> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PersistentBet*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PersistentBank : virtual public ::IceProxy::Casino::Bank,
                       virtual public ::IceProxy::CasinoStore::Winner
{
public:

    void returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p)
    {
        returnAllChips(p, 0);
    }
    void returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context& __ctx)
    {
        returnAllChips(p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_returnAllChips(p, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_returnAllChips(p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_returnAllChips(p, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_returnAllChips(p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p)
    {
        return begin_returnAllChips(p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context& __ctx)
    {
        return begin_returnAllChips(p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnAllChips(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnAllChips(p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::CasinoStore::Callback_PersistentBank_returnAllChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnAllChips(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context& __ctx, const ::CasinoStore::Callback_PersistentBank_returnAllChipsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_returnAllChips(p, &__ctx, __del, __cookie);
    }

    void end_returnAllChips(const ::Ice::AsyncResultPtr&);
    
private:

    void returnAllChips(const ::CasinoStore::PersistentPlayerPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadBets()
    {
        reloadBets(0);
    }
    void reloadBets(const ::Ice::Context& __ctx)
    {
        reloadBets(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadBets(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadBets(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadBets(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadBets(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadBets(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadBets(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadBets(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadBets(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadBets()
    {
        return begin_reloadBets(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadBets(const ::Ice::Context& __ctx)
    {
        return begin_reloadBets(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadBets(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadBets(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadBets(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadBets(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadBets(const ::CasinoStore::Callback_PersistentBank_reloadBetsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadBets(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadBets(const ::Ice::Context& __ctx, const ::CasinoStore::Callback_PersistentBank_reloadBetsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadBets(&__ctx, __del, __cookie);
    }

    void end_reloadBets(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadBets(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadBets(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_secure(bool __secure) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_twoway() const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_oneway() const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_batchOneway() const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_datagram() const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_batchDatagram() const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_compress(bool __compress) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PersistentBank> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PersistentBank*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CasinoStore
{

class Winner : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void win(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PersistentPlayer : virtual public ::IceDelegate::Casino::Player,
                         virtual public ::IceDelegate::CasinoStore::Winner
{
public:

    virtual void withdraw(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PersistentBet : virtual public ::IceDelegate::Casino::Bet
{
public:

    virtual ::Ice::Int getChipsInPlay(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long getCloseTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void complete(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PersistentBank : virtual public ::IceDelegate::Casino::Bank,
                       virtual public ::IceDelegate::CasinoStore::Winner
{
public:

    virtual void returnAllChips(const ::CasinoStore::PersistentPlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadBets(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace CasinoStore
{

class Winner : virtual public ::IceDelegate::CasinoStore::Winner,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void win(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PersistentPlayer : virtual public ::IceDelegate::CasinoStore::PersistentPlayer,
                         virtual public ::IceDelegateM::Casino::Player,
                         virtual public ::IceDelegateM::CasinoStore::Winner
{
public:

    virtual void withdraw(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PersistentBet : virtual public ::IceDelegate::CasinoStore::PersistentBet,
                      virtual public ::IceDelegateM::Casino::Bet
{
public:

    virtual ::Ice::Int getChipsInPlay(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getCloseTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void complete(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PersistentBank : virtual public ::IceDelegate::CasinoStore::PersistentBank,
                       virtual public ::IceDelegateM::Casino::Bank,
                       virtual public ::IceDelegateM::CasinoStore::Winner
{
public:

    virtual void returnAllChips(const ::CasinoStore::PersistentPlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadBets(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace CasinoStore
{

class Winner : virtual public ::IceDelegate::CasinoStore::Winner,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void win(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PersistentPlayer : virtual public ::IceDelegate::CasinoStore::PersistentPlayer,
                         virtual public ::IceDelegateD::Casino::Player,
                         virtual public ::IceDelegateD::CasinoStore::Winner
{
public:

    virtual void withdraw(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PersistentBet : virtual public ::IceDelegate::CasinoStore::PersistentBet,
                      virtual public ::IceDelegateD::Casino::Bet
{
public:

    virtual ::Ice::Int getChipsInPlay(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getCloseTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void complete(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PersistentBank : virtual public ::IceDelegate::CasinoStore::PersistentBank,
                       virtual public ::IceDelegateD::Casino::Bank,
                       virtual public ::IceDelegateD::CasinoStore::Winner
{
public:

    virtual void returnAllChips(const ::CasinoStore::PersistentPlayerPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadBets(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace CasinoStore
{

class Winner : virtual public ::Ice::Object
{
public:

    typedef WinnerPrx ProxyType;
    typedef WinnerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void win(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___win(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Winner& l, const Winner& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Winner& l, const Winner& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PersistentPlayer : virtual public ::Casino::Player,
                         virtual public ::CasinoStore::Winner
{
public:

    typedef PersistentPlayerPrx ProxyType;
    typedef PersistentPlayerPtr PointerType;

    PersistentPlayer()
    {
    }

    explicit PersistentPlayer(::Ice::Int __ice_chips) :
        chips(__ice_chips)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void withdraw(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___withdraw(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int chips;
};

inline bool operator==(const PersistentPlayer& l, const PersistentPlayer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PersistentPlayer& l, const PersistentPlayer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PersistentBet : virtual public ::Casino::Bet
{
public:

    typedef PersistentBetPrx ProxyType;
    typedef PersistentBetPtr PointerType;

    PersistentBet()
    {
    }

    PersistentBet(const ::CasinoStore::WinnerPrxSeq& __ice_potentialWinners, ::Ice::Int __ice_amount, ::Ice::Long __ice_closeTime) :
        potentialWinners(__ice_potentialWinners),
        amount(__ice_amount),
        closeTime(__ice_closeTime)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::Ice::Int getChipsInPlay(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getChipsInPlay(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Long getCloseTime(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getCloseTime(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void complete(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___complete(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::CasinoStore::WinnerPrxSeq potentialWinners;

    ::Ice::Int amount;

    ::Ice::Long closeTime;
};

inline bool operator==(const PersistentBet& l, const PersistentBet& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PersistentBet& l, const PersistentBet& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PersistentBank : virtual public ::Casino::Bank,
                       virtual public ::CasinoStore::Winner
{
public:

    typedef PersistentBankPrx ProxyType;
    typedef PersistentBankPtr PointerType;

    PersistentBank()
    {
    }

    PersistentBank(::Ice::Int __ice_chipsSold, ::Ice::Int __ice_outstandingChips) :
        chipsSold(__ice_chipsSold),
        outstandingChips(__ice_outstandingChips)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void returnAllChips(const ::CasinoStore::PersistentPlayerPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___returnAllChips(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadBets(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadBets(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int chipsSold;

    ::Ice::Int outstandingChips;
};

inline bool operator==(const PersistentBank& l, const PersistentBank& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PersistentBank& l, const PersistentBank& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CasinoStore
{

template<class T>
class CallbackNC_Winner_win : public Callback_Winner_win_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Winner_win(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Winner_winPtr
newCallback_Winner_win(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Winner_win<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Winner_winPtr
newCallback_Winner_win(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Winner_win<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Winner_winPtr
newCallback_Winner_win(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Winner_win<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Winner_winPtr
newCallback_Winner_win(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Winner_win<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Winner_win : public Callback_Winner_win_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Winner_win(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Winner_winPtr
newCallback_Winner_win(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Winner_win<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Winner_winPtr
newCallback_Winner_win(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Winner_win<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Winner_winPtr
newCallback_Winner_win(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Winner_win<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Winner_winPtr
newCallback_Winner_win(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Winner_win<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PersistentPlayer_withdraw : public Callback_PersistentPlayer_withdraw_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PersistentPlayer_withdraw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CasinoStore::PersistentPlayerPrx __proxy = ::CasinoStore::PersistentPlayerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_withdraw(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentPlayer_withdraw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentPlayer_withdraw<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentPlayer_withdraw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentPlayer_withdraw<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PersistentPlayer_withdraw : public Callback_PersistentPlayer_withdraw_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PersistentPlayer_withdraw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CasinoStore::PersistentPlayerPrx __proxy = ::CasinoStore::PersistentPlayerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_withdraw(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentPlayer_withdraw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentPlayer_withdraw<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentPlayer_withdraw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentPlayer_withdrawPtr
newCallback_PersistentPlayer_withdraw(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentPlayer_withdraw<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PersistentBet_getChipsInPlay : public Callback_PersistentBet_getChipsInPlay_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PersistentBet_getChipsInPlay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CasinoStore::PersistentBetPrx __proxy = ::CasinoStore::PersistentBetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getChipsInPlay(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PersistentBet_getChipsInPlayPtr
newCallback_PersistentBet_getChipsInPlay(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_getChipsInPlay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBet_getChipsInPlayPtr
newCallback_PersistentBet_getChipsInPlay(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_getChipsInPlay<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PersistentBet_getChipsInPlay : public Callback_PersistentBet_getChipsInPlay_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PersistentBet_getChipsInPlay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CasinoStore::PersistentBetPrx __proxy = ::CasinoStore::PersistentBetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getChipsInPlay(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PersistentBet_getChipsInPlayPtr
newCallback_PersistentBet_getChipsInPlay(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_getChipsInPlay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBet_getChipsInPlayPtr
newCallback_PersistentBet_getChipsInPlay(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_getChipsInPlay<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PersistentBet_getCloseTime : public Callback_PersistentBet_getCloseTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_PersistentBet_getCloseTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CasinoStore::PersistentBetPrx __proxy = ::CasinoStore::PersistentBetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getCloseTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PersistentBet_getCloseTimePtr
newCallback_PersistentBet_getCloseTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_getCloseTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBet_getCloseTimePtr
newCallback_PersistentBet_getCloseTime(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_getCloseTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PersistentBet_getCloseTime : public Callback_PersistentBet_getCloseTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_PersistentBet_getCloseTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CasinoStore::PersistentBetPrx __proxy = ::CasinoStore::PersistentBetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getCloseTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PersistentBet_getCloseTimePtr
newCallback_PersistentBet_getCloseTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_getCloseTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBet_getCloseTimePtr
newCallback_PersistentBet_getCloseTime(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_getCloseTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PersistentBet_complete : public Callback_PersistentBet_complete_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PersistentBet_complete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_complete<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_complete<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_complete<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBet_complete<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PersistentBet_complete : public Callback_PersistentBet_complete_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PersistentBet_complete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_complete<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_complete<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_complete<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBet_completePtr
newCallback_PersistentBet_complete(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBet_complete<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PersistentBank_returnAllChips : public Callback_PersistentBank_returnAllChips_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PersistentBank_returnAllChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_returnAllChips<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_returnAllChips<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_returnAllChips<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_returnAllChips<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PersistentBank_returnAllChips : public Callback_PersistentBank_returnAllChips_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PersistentBank_returnAllChips(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_returnAllChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_returnAllChips<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_returnAllChips<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBank_returnAllChipsPtr
newCallback_PersistentBank_returnAllChips(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_returnAllChips<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PersistentBank_reloadBets : public Callback_PersistentBank_reloadBets_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PersistentBank_reloadBets(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_reloadBets<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_reloadBets<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_reloadBets<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PersistentBank_reloadBets<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PersistentBank_reloadBets : public Callback_PersistentBank_reloadBets_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PersistentBank_reloadBets(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_reloadBets<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_reloadBets<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_reloadBets<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PersistentBank_reloadBetsPtr
newCallback_PersistentBank_reloadBets(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PersistentBank_reloadBets<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
