// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CasinoStore.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <CasinoStore.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __CasinoStore__Winner__win_name = "win";

const ::std::string __CasinoStore__PersistentPlayer__withdraw_name = "withdraw";

const ::std::string __CasinoStore__PersistentBet__getChipsInPlay_name = "getChipsInPlay";

const ::std::string __CasinoStore__PersistentBet__getCloseTime_name = "getCloseTime";

const ::std::string __CasinoStore__PersistentBet__complete_name = "complete";

const ::std::string __CasinoStore__PersistentBank__returnAllChips_name = "returnAllChips";

const ::std::string __CasinoStore__PersistentBank__reloadBets_name = "reloadBets";

}
::IceProxy::Ice::Object* ::IceProxy::CasinoStore::upCast(::IceProxy::CasinoStore::Winner* p) { return p; }

void
::IceProxy::CasinoStore::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::Winner>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::CasinoStore::Winner;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::CasinoStore::Winner::win(::Ice::Int count, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CasinoStore__Winner__win_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::CasinoStore::Winner* __del = dynamic_cast< ::IceDelegate::CasinoStore::Winner*>(__delBase.get());
            __del->win(count, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CasinoStore::Winner::begin_win(::Ice::Int count, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CasinoStore__Winner__win_name, __del, __cookie);
    try
    {
        __result->__prepare(__CasinoStore__Winner__win_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(count);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CasinoStore::Winner::end_win(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __CasinoStore__Winner__win_name);
}

const ::std::string&
IceProxy::CasinoStore::Winner::ice_staticId()
{
    return ::CasinoStore::Winner::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::CasinoStore::Winner::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::CasinoStore::Winner);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::CasinoStore::Winner::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::CasinoStore::Winner);
}

::IceProxy::Ice::Object*
IceProxy::CasinoStore::Winner::__newInstance() const
{
    return new Winner;
}
::IceProxy::Ice::Object* ::IceProxy::CasinoStore::upCast(::IceProxy::CasinoStore::PersistentPlayer* p) { return p; }

void
::IceProxy::CasinoStore::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentPlayer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::CasinoStore::PersistentPlayer;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::CasinoStore::PersistentPlayer::withdraw(::Ice::Int count, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CasinoStore__PersistentPlayer__withdraw_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CasinoStore__PersistentPlayer__withdraw_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CasinoStore::PersistentPlayer* __del = dynamic_cast< ::IceDelegate::CasinoStore::PersistentPlayer*>(__delBase.get());
            __del->withdraw(count, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CasinoStore::PersistentPlayer::begin_withdraw(::Ice::Int count, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CasinoStore__PersistentPlayer__withdraw_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CasinoStore__PersistentPlayer__withdraw_name, __del, __cookie);
    try
    {
        __result->__prepare(__CasinoStore__PersistentPlayer__withdraw_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(count);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CasinoStore::PersistentPlayer::end_withdraw(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CasinoStore__PersistentPlayer__withdraw_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Casino::OutOfChipsException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::CasinoStore::PersistentPlayer::ice_staticId()
{
    return ::CasinoStore::PersistentPlayer::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::CasinoStore::PersistentPlayer::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::CasinoStore::PersistentPlayer);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::CasinoStore::PersistentPlayer::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::CasinoStore::PersistentPlayer);
}

::IceProxy::Ice::Object*
IceProxy::CasinoStore::PersistentPlayer::__newInstance() const
{
    return new PersistentPlayer;
}
::IceProxy::Ice::Object* ::IceProxy::CasinoStore::upCast(::IceProxy::CasinoStore::PersistentBet* p) { return p; }

void
::IceProxy::CasinoStore::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentBet>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::CasinoStore::PersistentBet;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::CasinoStore::PersistentBet::getChipsInPlay(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CasinoStore__PersistentBet__getChipsInPlay_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CasinoStore__PersistentBet__getChipsInPlay_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CasinoStore::PersistentBet* __del = dynamic_cast< ::IceDelegate::CasinoStore::PersistentBet*>(__delBase.get());
            return __del->getChipsInPlay(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CasinoStore::PersistentBet::begin_getChipsInPlay(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CasinoStore__PersistentBet__getChipsInPlay_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CasinoStore__PersistentBet__getChipsInPlay_name, __del, __cookie);
    try
    {
        __result->__prepare(__CasinoStore__PersistentBet__getChipsInPlay_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::CasinoStore::PersistentBet::end_getChipsInPlay(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CasinoStore__PersistentBet__getChipsInPlay_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Long
IceProxy::CasinoStore::PersistentBet::getCloseTime(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CasinoStore__PersistentBet__getCloseTime_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CasinoStore__PersistentBet__getCloseTime_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CasinoStore::PersistentBet* __del = dynamic_cast< ::IceDelegate::CasinoStore::PersistentBet*>(__delBase.get());
            return __del->getCloseTime(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CasinoStore::PersistentBet::begin_getCloseTime(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CasinoStore__PersistentBet__getCloseTime_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CasinoStore__PersistentBet__getCloseTime_name, __del, __cookie);
    try
    {
        __result->__prepare(__CasinoStore__PersistentBet__getCloseTime_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::CasinoStore::PersistentBet::end_getCloseTime(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CasinoStore__PersistentBet__getCloseTime_name);
    ::Ice::Long __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::CasinoStore::PersistentBet::complete(::Ice::Int random, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CasinoStore__PersistentBet__complete_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::CasinoStore::PersistentBet* __del = dynamic_cast< ::IceDelegate::CasinoStore::PersistentBet*>(__delBase.get());
            __del->complete(random, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CasinoStore::PersistentBet::begin_complete(::Ice::Int random, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CasinoStore__PersistentBet__complete_name, __del, __cookie);
    try
    {
        __result->__prepare(__CasinoStore__PersistentBet__complete_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(random);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CasinoStore::PersistentBet::end_complete(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __CasinoStore__PersistentBet__complete_name);
}

const ::std::string&
IceProxy::CasinoStore::PersistentBet::ice_staticId()
{
    return ::CasinoStore::PersistentBet::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::CasinoStore::PersistentBet::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::CasinoStore::PersistentBet);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::CasinoStore::PersistentBet::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::CasinoStore::PersistentBet);
}

::IceProxy::Ice::Object*
IceProxy::CasinoStore::PersistentBet::__newInstance() const
{
    return new PersistentBet;
}
::IceProxy::Ice::Object* ::IceProxy::CasinoStore::upCast(::IceProxy::CasinoStore::PersistentBank* p) { return p; }

void
::IceProxy::CasinoStore::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::CasinoStore::PersistentBank>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::CasinoStore::PersistentBank;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::CasinoStore::PersistentBank::returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CasinoStore__PersistentBank__returnAllChips_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::CasinoStore::PersistentBank* __del = dynamic_cast< ::IceDelegate::CasinoStore::PersistentBank*>(__delBase.get());
            __del->returnAllChips(p, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CasinoStore::PersistentBank::begin_returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CasinoStore__PersistentBank__returnAllChips_name, __del, __cookie);
    try
    {
        __result->__prepare(__CasinoStore__PersistentBank__returnAllChips_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CasinoStore::PersistentBank::end_returnAllChips(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __CasinoStore__PersistentBank__returnAllChips_name);
}

void
IceProxy::CasinoStore::PersistentBank::reloadBets(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CasinoStore__PersistentBank__reloadBets_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::CasinoStore::PersistentBank* __del = dynamic_cast< ::IceDelegate::CasinoStore::PersistentBank*>(__delBase.get());
            __del->reloadBets(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CasinoStore::PersistentBank::begin_reloadBets(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CasinoStore__PersistentBank__reloadBets_name, __del, __cookie);
    try
    {
        __result->__prepare(__CasinoStore__PersistentBank__reloadBets_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CasinoStore::PersistentBank::end_reloadBets(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __CasinoStore__PersistentBank__reloadBets_name);
}

const ::std::string&
IceProxy::CasinoStore::PersistentBank::ice_staticId()
{
    return ::CasinoStore::PersistentBank::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::CasinoStore::PersistentBank::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::CasinoStore::PersistentBank);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::CasinoStore::PersistentBank::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::CasinoStore::PersistentBank);
}

::IceProxy::Ice::Object*
IceProxy::CasinoStore::PersistentBank::__newInstance() const
{
    return new PersistentBank;
}

void
IceDelegateM::CasinoStore::Winner::win(::Ice::Int count, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CasinoStore__Winner__win_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(count);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::CasinoStore::PersistentPlayer::withdraw(::Ice::Int count, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CasinoStore__PersistentPlayer__withdraw_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(count);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Casino::OutOfChipsException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::CasinoStore::PersistentBet::getChipsInPlay(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CasinoStore__PersistentBet__getChipsInPlay_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateM::CasinoStore::PersistentBet::getCloseTime(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CasinoStore__PersistentBet__getCloseTime_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::CasinoStore::PersistentBet::complete(::Ice::Int random, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CasinoStore__PersistentBet__complete_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(random);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::CasinoStore::PersistentBank::returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CasinoStore__PersistentBank__returnAllChips_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::CasinoStore::PersistentBank::reloadBets(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CasinoStore__PersistentBank__reloadBets_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::CasinoStore::Winner::win(::Ice::Int count, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_count, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_count(__p_count)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CasinoStore::Winner* servant = dynamic_cast< ::CasinoStore::Winner*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->win(_m_count, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_count;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CasinoStore__Winner__win_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(count, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::CasinoStore::PersistentPlayer::withdraw(::Ice::Int count, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_count, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_count(__p_count)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CasinoStore::PersistentPlayer* servant = dynamic_cast< ::CasinoStore::PersistentPlayer*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->withdraw(_m_count, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_count;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CasinoStore__PersistentPlayer__withdraw_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(count, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Casino::OutOfChipsException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::CasinoStore::PersistentBet::getChipsInPlay(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CasinoStore::PersistentBet* servant = dynamic_cast< ::CasinoStore::PersistentBet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getChipsInPlay(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CasinoStore__PersistentBet__getChipsInPlay_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Long
IceDelegateD::CasinoStore::PersistentBet::getCloseTime(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CasinoStore::PersistentBet* servant = dynamic_cast< ::CasinoStore::PersistentBet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getCloseTime(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Long& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CasinoStore__PersistentBet__getCloseTime_name, ::Ice::Normal, __context);
    ::Ice::Long __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::CasinoStore::PersistentBet::complete(::Ice::Int random, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_random, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_random(__p_random)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CasinoStore::PersistentBet* servant = dynamic_cast< ::CasinoStore::PersistentBet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->complete(_m_random, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_random;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CasinoStore__PersistentBet__complete_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(random, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::CasinoStore::PersistentBank::returnAllChips(const ::CasinoStore::PersistentPlayerPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::CasinoStore::PersistentPlayerPrx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CasinoStore::PersistentBank* servant = dynamic_cast< ::CasinoStore::PersistentBank*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->returnAllChips(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::CasinoStore::PersistentPlayerPrx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CasinoStore__PersistentBank__returnAllChips_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::CasinoStore::PersistentBank::reloadBets(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CasinoStore::PersistentBank* servant = dynamic_cast< ::CasinoStore::PersistentBank*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->reloadBets(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CasinoStore__PersistentBank__reloadBets_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* CasinoStore::upCast(::CasinoStore::Winner* p) { return p; }

namespace
{
const ::std::string __CasinoStore__Winner_ids[2] =
{
    "::CasinoStore::Winner",
    "::Ice::Object"
};

}

bool
CasinoStore::Winner::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__CasinoStore__Winner_ids, __CasinoStore__Winner_ids + 2, _s);
}

::std::vector< ::std::string>
CasinoStore::Winner::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__CasinoStore__Winner_ids[0], &__CasinoStore__Winner_ids[2]);
}

const ::std::string&
CasinoStore::Winner::ice_id(const ::Ice::Current&) const
{
    return __CasinoStore__Winner_ids[0];
}

const ::std::string&
CasinoStore::Winner::ice_staticId()
{
    return __CasinoStore__Winner_ids[0];
}

::Ice::DispatchStatus
CasinoStore::Winner::___win(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int count;
    __is->read(count);
    __inS.endReadParams();
    win(count, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __CasinoStore__Winner_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "win"
};

}

::Ice::DispatchStatus
CasinoStore::Winner::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__Winner_all, __CasinoStore__Winner_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __CasinoStore__Winner_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___win(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

namespace
{
const int __CasinoStore__Winner_operationAttributes[] = 
{
    0, // ice_id
    0, // ice_ids
    0, // ice_isA
    0, // ice_ping
    3 // win
};

}

::Ice::Int
CasinoStore::Winner::ice_operationAttributes(const ::std::string& opName) const
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__Winner_all, __CasinoStore__Winner_all + 5, opName);
    if(r.first == r.second)
    {
        return -1;
    }
    return __CasinoStore__Winner_operationAttributes[r.first - __CasinoStore__Winner_all];
}

void
CasinoStore::Winner::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
CasinoStore::Winner::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
CasinoStore::__patch(WinnerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::CasinoStore::WinnerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::CasinoStore::Winner::ice_staticId(), v);
    }
}

::Ice::Object* CasinoStore::upCast(::CasinoStore::PersistentPlayer* p) { return p; }
::Ice::ObjectPtr
CasinoStore::PersistentPlayer::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __CasinoStore__PersistentPlayer_ids[4] =
{
    "::Casino::Player",
    "::CasinoStore::PersistentPlayer",
    "::CasinoStore::Winner",
    "::Ice::Object"
};

}

bool
CasinoStore::PersistentPlayer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__CasinoStore__PersistentPlayer_ids, __CasinoStore__PersistentPlayer_ids + 4, _s);
}

::std::vector< ::std::string>
CasinoStore::PersistentPlayer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__CasinoStore__PersistentPlayer_ids[0], &__CasinoStore__PersistentPlayer_ids[4]);
}

const ::std::string&
CasinoStore::PersistentPlayer::ice_id(const ::Ice::Current&) const
{
    return __CasinoStore__PersistentPlayer_ids[1];
}

const ::std::string&
CasinoStore::PersistentPlayer::ice_staticId()
{
    return __CasinoStore__PersistentPlayer_ids[1];
}

::Ice::DispatchStatus
CasinoStore::PersistentPlayer::___withdraw(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int count;
    __is->read(count);
    __inS.endReadParams();
    try
    {
        withdraw(count, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Casino::OutOfChipsException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __CasinoStore__PersistentPlayer_all[] =
{
    "destroy",
    "getChips",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "win",
    "withdraw"
};

}

::Ice::DispatchStatus
CasinoStore::PersistentPlayer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__PersistentPlayer_all, __CasinoStore__PersistentPlayer_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __CasinoStore__PersistentPlayer_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___getChips(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___win(in, current);
        }
        case 7:
        {
            return ___withdraw(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

namespace
{
const int __CasinoStore__PersistentPlayer_operationAttributes[] = 
{
    5, // destroy
    0, // getChips
    0, // ice_id
    0, // ice_ids
    0, // ice_isA
    0, // ice_ping
    3, // win
    3 // withdraw
};

}

::Ice::Int
CasinoStore::PersistentPlayer::ice_operationAttributes(const ::std::string& opName) const
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__PersistentPlayer_all, __CasinoStore__PersistentPlayer_all + 8, opName);
    if(r.first == r.second)
    {
        return -1;
    }
    return __CasinoStore__PersistentPlayer_operationAttributes[r.first - __CasinoStore__PersistentPlayer_all];
}

void
CasinoStore::PersistentPlayer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(chips);
    __os->endWriteSlice();
}

void
CasinoStore::PersistentPlayer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(chips);
    __is->endReadSlice();
}

void 
CasinoStore::__patch(PersistentPlayerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::CasinoStore::PersistentPlayerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::CasinoStore::PersistentPlayer::ice_staticId(), v);
    }
}

::Ice::Object* CasinoStore::upCast(::CasinoStore::PersistentBet* p) { return p; }
::Ice::ObjectPtr
CasinoStore::PersistentBet::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __CasinoStore__PersistentBet_ids[3] =
{
    "::Casino::Bet",
    "::CasinoStore::PersistentBet",
    "::Ice::Object"
};

}

bool
CasinoStore::PersistentBet::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__CasinoStore__PersistentBet_ids, __CasinoStore__PersistentBet_ids + 3, _s);
}

::std::vector< ::std::string>
CasinoStore::PersistentBet::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__CasinoStore__PersistentBet_ids[0], &__CasinoStore__PersistentBet_ids[3]);
}

const ::std::string&
CasinoStore::PersistentBet::ice_id(const ::Ice::Current&) const
{
    return __CasinoStore__PersistentBet_ids[1];
}

const ::std::string&
CasinoStore::PersistentBet::ice_staticId()
{
    return __CasinoStore__PersistentBet_ids[1];
}

::Ice::DispatchStatus
CasinoStore::PersistentBet::___getChipsInPlay(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Int __ret = getChipsInPlay(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
CasinoStore::PersistentBet::___getCloseTime(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Long __ret = getCloseTime(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
CasinoStore::PersistentBet::___complete(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int random;
    __is->read(random);
    __inS.endReadParams();
    complete(random, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __CasinoStore__PersistentBet_all[] =
{
    "accept",
    "complete",
    "getAmount",
    "getChipsInPlay",
    "getCloseTime",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
CasinoStore::PersistentBet::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__PersistentBet_all, __CasinoStore__PersistentBet_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __CasinoStore__PersistentBet_all)
    {
        case 0:
        {
            return ___accept(in, current);
        }
        case 1:
        {
            return ___complete(in, current);
        }
        case 2:
        {
            return ___getAmount(in, current);
        }
        case 3:
        {
            return ___getChipsInPlay(in, current);
        }
        case 4:
        {
            return ___getCloseTime(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

namespace
{
const int __CasinoStore__PersistentBet_operationAttributes[] = 
{
    5, // accept
    5, // complete
    0, // getAmount
    0, // getChipsInPlay
    0, // getCloseTime
    0, // ice_id
    0, // ice_ids
    0, // ice_isA
    0 // ice_ping
};

}

::Ice::Int
CasinoStore::PersistentBet::ice_operationAttributes(const ::std::string& opName) const
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__PersistentBet_all, __CasinoStore__PersistentBet_all + 9, opName);
    if(r.first == r.second)
    {
        return -1;
    }
    return __CasinoStore__PersistentBet_operationAttributes[r.first - __CasinoStore__PersistentBet_all];
}

void
CasinoStore::PersistentBet::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(potentialWinners);
    __os->write(amount);
    __os->write(closeTime);
    __os->endWriteSlice();
}

void
CasinoStore::PersistentBet::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(potentialWinners);
    __is->read(amount);
    __is->read(closeTime);
    __is->endReadSlice();
}

void 
CasinoStore::__patch(PersistentBetPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::CasinoStore::PersistentBetPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::CasinoStore::PersistentBet::ice_staticId(), v);
    }
}

::Ice::Object* CasinoStore::upCast(::CasinoStore::PersistentBank* p) { return p; }
::Ice::ObjectPtr
CasinoStore::PersistentBank::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __CasinoStore__PersistentBank_ids[4] =
{
    "::Casino::Bank",
    "::CasinoStore::PersistentBank",
    "::CasinoStore::Winner",
    "::Ice::Object"
};

}

bool
CasinoStore::PersistentBank::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__CasinoStore__PersistentBank_ids, __CasinoStore__PersistentBank_ids + 4, _s);
}

::std::vector< ::std::string>
CasinoStore::PersistentBank::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__CasinoStore__PersistentBank_ids[0], &__CasinoStore__PersistentBank_ids[4]);
}

const ::std::string&
CasinoStore::PersistentBank::ice_id(const ::Ice::Current&) const
{
    return __CasinoStore__PersistentBank_ids[1];
}

const ::std::string&
CasinoStore::PersistentBank::ice_staticId()
{
    return __CasinoStore__PersistentBank_ids[1];
}

::Ice::DispatchStatus
CasinoStore::PersistentBank::___returnAllChips(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::CasinoStore::PersistentPlayerPrx p;
    __is->read(p);
    __inS.endReadParams();
    returnAllChips(p, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
CasinoStore::PersistentBank::___reloadBets(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    reloadBets(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __CasinoStore__PersistentBank_all[] =
{
    "buyChips",
    "checkAllChips",
    "createBet",
    "getEarnings",
    "getLiveBetCount",
    "getOutstandingChips",
    "getPlayers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "reloadBets",
    "returnAllChips",
    "win"
};

}

::Ice::DispatchStatus
CasinoStore::PersistentBank::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__PersistentBank_all, __CasinoStore__PersistentBank_all + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __CasinoStore__PersistentBank_all)
    {
        case 0:
        {
            return ___buyChips(in, current);
        }
        case 1:
        {
            return ___checkAllChips(in, current);
        }
        case 2:
        {
            return ___createBet(in, current);
        }
        case 3:
        {
            return ___getEarnings(in, current);
        }
        case 4:
        {
            return ___getLiveBetCount(in, current);
        }
        case 5:
        {
            return ___getOutstandingChips(in, current);
        }
        case 6:
        {
            return ___getPlayers(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
        case 11:
        {
            return ___reloadBets(in, current);
        }
        case 12:
        {
            return ___returnAllChips(in, current);
        }
        case 13:
        {
            return ___win(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

namespace
{
const int __CasinoStore__PersistentBank_operationAttributes[] = 
{
    5, // buyChips
    4, // checkAllChips
    5, // createBet
    0, // getEarnings
    0, // getLiveBetCount
    0, // getOutstandingChips
    0, // getPlayers
    0, // ice_id
    0, // ice_ids
    0, // ice_isA
    0, // ice_ping
    0, // reloadBets
    3, // returnAllChips
    3 // win
};

}

::Ice::Int
CasinoStore::PersistentBank::ice_operationAttributes(const ::std::string& opName) const
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CasinoStore__PersistentBank_all, __CasinoStore__PersistentBank_all + 14, opName);
    if(r.first == r.second)
    {
        return -1;
    }
    return __CasinoStore__PersistentBank_operationAttributes[r.first - __CasinoStore__PersistentBank_all];
}

void
CasinoStore::PersistentBank::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(chipsSold);
    __os->write(outstandingChips);
    __os->endWriteSlice();
}

void
CasinoStore::PersistentBank::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(chipsSold);
    __is->read(outstandingChips);
    __is->endReadSlice();
}

void 
CasinoStore::__patch(PersistentBankPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::CasinoStore::PersistentBankPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::CasinoStore::PersistentBank::ice_staticId(), v);
    }
}
