// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Contact.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Contact.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Demo__ContactDB__addContact_name = "addContact";

const ::std::string __Demo__ContactDB__updateContact_name = "updateContact";

const ::std::string __Demo__ContactDB__query_name = "query";

const ::std::string __Demo__ContactDB__queryNumber_name = "queryNumber";

const ::std::string __Demo__ContactDB__queryDialgroup_name = "queryDialgroup";

const ::std::string __Demo__ContactDB__shutdown_name = "shutdown";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Demo::upCast(::IceProxy::Demo::Contact* p) { return p; }

void
::IceProxy::Demo::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Contact>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Demo::Contact;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Demo::Contact::ice_staticId()
{
    return ::Demo::Contact::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Demo::Contact::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Demo::Contact);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Demo::Contact::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Demo::Contact);
}

::IceProxy::Ice::Object*
IceProxy::Demo::Contact::__newInstance() const
{
    return new Contact;
}
::IceProxy::Ice::Object* ::IceProxy::Demo::upCast(::IceProxy::Demo::ContactDB* p) { return p; }

void
::IceProxy::Demo::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Demo::ContactDB>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Demo::ContactDB;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Demo::ContactDB::addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Demo__ContactDB__addContact_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Demo::ContactDB* __del = dynamic_cast< ::IceDelegate::Demo::ContactDB*>(__delBase.get());
            __del->addContact(name, type, number, dialGroup, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Demo::ContactDB::begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Demo__ContactDB__addContact_name, __del, __cookie);
    try
    {
        __result->__prepare(__Demo__ContactDB__addContact_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __os->write(1, type);
        __os->write(2, number);
        __os->write(3, dialGroup);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Demo::ContactDB::end_addContact(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Demo__ContactDB__addContact_name);
}

void
IceProxy::Demo::ContactDB::updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Demo__ContactDB__updateContact_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Demo::ContactDB* __del = dynamic_cast< ::IceDelegate::Demo::ContactDB*>(__delBase.get());
            __del->updateContact(name, type, number, dialGroup, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Demo::ContactDB::begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Demo__ContactDB__updateContact_name, __del, __cookie);
    try
    {
        __result->__prepare(__Demo__ContactDB__updateContact_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __os->write(1, type);
        __os->write(2, number);
        __os->write(3, dialGroup);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Demo::ContactDB::end_updateContact(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Demo__ContactDB__updateContact_name);
}

::Demo::ContactPtr
IceProxy::Demo::ContactDB::query(const ::std::string& name, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Demo__ContactDB__query_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Demo__ContactDB__query_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Demo::ContactDB* __del = dynamic_cast< ::IceDelegate::Demo::ContactDB*>(__delBase.get());
            return __del->query(name, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Demo::ContactDB::begin_query(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Demo__ContactDB__query_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Demo__ContactDB__query_name, __del, __cookie);
    try
    {
        __result->__prepare(__Demo__ContactDB__query_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Demo::ContactPtr
IceProxy::Demo::ContactDB::end_query(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Demo__ContactDB__query_name);
    ::Demo::ContactPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::std::string>
IceProxy::Demo::ContactDB::queryNumber(const ::std::string& name, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Demo__ContactDB__queryNumber_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Demo__ContactDB__queryNumber_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Demo::ContactDB* __del = dynamic_cast< ::IceDelegate::Demo::ContactDB*>(__delBase.get());
            return __del->queryNumber(name, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Demo::ContactDB::begin_queryNumber(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Demo__ContactDB__queryNumber_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Demo__ContactDB__queryNumber_name, __del, __cookie);
    try
    {
        __result->__prepare(__Demo__ContactDB__queryNumber_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::std::string>
IceProxy::Demo::ContactDB::end_queryNumber(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Demo__ContactDB__queryNumber_name);
    IceUtil::Optional< ::std::string> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Demo::ContactDB::queryDialgroup(const ::std::string& name, IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Demo__ContactDB__queryDialgroup_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Demo__ContactDB__queryDialgroup_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Demo::ContactDB* __del = dynamic_cast< ::IceDelegate::Demo::ContactDB*>(__delBase.get());
            __del->queryDialgroup(name, dialGroup, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Demo::ContactDB::begin_queryDialgroup(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Demo__ContactDB__queryDialgroup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Demo__ContactDB__queryDialgroup_name, __del, __cookie);
    try
    {
        __result->__prepare(__Demo__ContactDB__queryDialgroup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Demo::ContactDB::end_queryDialgroup(IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Demo__ContactDB__queryDialgroup_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, dialGroup);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Demo::ContactDB::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Demo__ContactDB__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Demo::ContactDB* __del = dynamic_cast< ::IceDelegate::Demo::ContactDB*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Demo::ContactDB::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Demo__ContactDB__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__Demo__ContactDB__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Demo::ContactDB::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Demo__ContactDB__shutdown_name);
}

const ::std::string&
IceProxy::Demo::ContactDB::ice_staticId()
{
    return ::Demo::ContactDB::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Demo::ContactDB::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Demo::ContactDB);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Demo::ContactDB::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Demo::ContactDB);
}

::IceProxy::Ice::Object*
IceProxy::Demo::ContactDB::__newInstance() const
{
    return new ContactDB;
}

void
IceDelegateM::Demo::ContactDB::addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Demo__ContactDB__addContact_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __os->write(1, type);
        __os->write(2, number);
        __os->write(3, dialGroup);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Demo::ContactDB::updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Demo__ContactDB__updateContact_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __os->write(1, type);
        __os->write(2, number);
        __os->write(3, dialGroup);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Demo::ContactPtr
IceDelegateM::Demo::ContactDB::query(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Demo__ContactDB__query_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Demo::ContactPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::std::string>
IceDelegateM::Demo::ContactDB::queryNumber(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Demo__ContactDB__queryNumber_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::std::string> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Demo::ContactDB::queryDialgroup(const ::std::string& name, IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Demo__ContactDB__queryDialgroup_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, dialGroup);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Demo::ContactDB::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Demo__ContactDB__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::Demo::ContactDB::addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_name, const IceUtil::Optional< ::Demo::NumberType>& __p_type, const IceUtil::Optional< ::std::string>& __p_number, const IceUtil::Optional< ::Ice::Int>& __p_dialGroup, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_name(__p_name),
            _m_type(__p_type),
            _m_number(__p_number),
            _m_dialGroup(__p_dialGroup)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Demo::ContactDB* servant = dynamic_cast< ::Demo::ContactDB*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addContact(_m_name, _m_type, _m_number, _m_dialGroup, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_name;
        const IceUtil::Optional< ::Demo::NumberType>& _m_type;
        const IceUtil::Optional< ::std::string>& _m_number;
        const IceUtil::Optional< ::Ice::Int>& _m_dialGroup;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Demo__ContactDB__addContact_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(name, type, number, dialGroup, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Demo::ContactDB::updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_name, const IceUtil::Optional< ::Demo::NumberType>& __p_type, const IceUtil::Optional< ::std::string>& __p_number, const IceUtil::Optional< ::Ice::Int>& __p_dialGroup, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_name(__p_name),
            _m_type(__p_type),
            _m_number(__p_number),
            _m_dialGroup(__p_dialGroup)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Demo::ContactDB* servant = dynamic_cast< ::Demo::ContactDB*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->updateContact(_m_name, _m_type, _m_number, _m_dialGroup, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_name;
        const IceUtil::Optional< ::Demo::NumberType>& _m_type;
        const IceUtil::Optional< ::std::string>& _m_number;
        const IceUtil::Optional< ::Ice::Int>& _m_dialGroup;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Demo__ContactDB__updateContact_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(name, type, number, dialGroup, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Demo::ContactPtr
IceDelegateD::Demo::ContactDB::query(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Demo::ContactPtr& __result, const ::std::string& __p_name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(__p_name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Demo::ContactDB* servant = dynamic_cast< ::Demo::ContactDB*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->query(_m_name, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Demo::ContactPtr& _result;
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Demo__ContactDB__query_name, ::Ice::Normal, __context);
    ::Demo::ContactPtr __result;
    try
    {
        _DirectI __direct(__result, name, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::std::string>
IceDelegateD::Demo::ContactDB::queryNumber(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::std::string>& __result, const ::std::string& __p_name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(__p_name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Demo::ContactDB* servant = dynamic_cast< ::Demo::ContactDB*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->queryNumber(_m_name, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::std::string>& _result;
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Demo__ContactDB__queryNumber_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::std::string> __result;
    try
    {
        _DirectI __direct(__result, name, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Demo::ContactDB::queryDialgroup(const ::std::string& name, IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_name, IceUtil::Optional< ::Ice::Int>& __p_dialGroup, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_name(__p_name),
            _m_dialGroup(__p_dialGroup)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Demo::ContactDB* servant = dynamic_cast< ::Demo::ContactDB*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->queryDialgroup(_m_name, _m_dialGroup, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_name;
        IceUtil::Optional< ::Ice::Int>& _m_dialGroup;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Demo__ContactDB__queryDialgroup_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(name, dialGroup, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Demo::ContactDB::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Demo::ContactDB* servant = dynamic_cast< ::Demo::ContactDB*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->shutdown(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Demo__ContactDB__shutdown_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* Demo::upCast(::Demo::Contact* p) { return p; }
::Ice::ObjectPtr
Demo::Contact::ice_clone() const
{
    ::Ice::Object* __p = new Contact(*this);
    return __p;
}

namespace
{
const ::std::string __Demo__Contact_ids[2] =
{
    "::Demo::Contact",
    "::Ice::Object"
};

}

bool
Demo::Contact::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Demo__Contact_ids, __Demo__Contact_ids + 2, _s);
}

::std::vector< ::std::string>
Demo::Contact::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Demo__Contact_ids[0], &__Demo__Contact_ids[2]);
}

const ::std::string&
Demo::Contact::ice_id(const ::Ice::Current&) const
{
    return __Demo__Contact_ids[0];
}

const ::std::string&
Demo::Contact::ice_staticId()
{
    return __Demo__Contact_ids[0];
}

void
Demo::Contact::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(name);
    __os->write(1, type);
    __os->write(2, number);
    __os->write(3, dialGroup);
    __os->endWriteSlice();
}

void
Demo::Contact::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->read(1, type);
    __is->read(2, number);
    __is->read(3, dialGroup);
    __is->endReadSlice();
}

namespace
{

class __F__Demo__Contact : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Demo::Contact::ice_staticId());
        return new ::Demo::Contact;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Demo__Contact_Ptr = new __F__Demo__Contact;

class __F__Demo__Contact__Init
{
public:

    __F__Demo__Contact__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Demo::Contact::ice_staticId(), __F__Demo__Contact_Ptr);
    }

    ~__F__Demo__Contact__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Demo::Contact::ice_staticId());
    }
};

const __F__Demo__Contact__Init __F__Demo__Contact__i;

}

const ::Ice::ObjectFactoryPtr&
Demo::Contact::ice_factory()
{
    return __F__Demo__Contact_Ptr;
}

void 
Demo::__patch(ContactPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Demo::ContactPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Demo::Contact::ice_staticId(), v);
    }
}

::Ice::Object* Demo::upCast(::Demo::ContactDB* p) { return p; }

namespace
{
const ::std::string __Demo__ContactDB_ids[2] =
{
    "::Demo::ContactDB",
    "::Ice::Object"
};

}

bool
Demo::ContactDB::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Demo__ContactDB_ids, __Demo__ContactDB_ids + 2, _s);
}

::std::vector< ::std::string>
Demo::ContactDB::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Demo__ContactDB_ids[0], &__Demo__ContactDB_ids[2]);
}

const ::std::string&
Demo::ContactDB::ice_id(const ::Ice::Current&) const
{
    return __Demo__ContactDB_ids[0];
}

const ::std::string&
Demo::ContactDB::ice_staticId()
{
    return __Demo__ContactDB_ids[0];
}

::Ice::DispatchStatus
Demo::ContactDB::___addContact(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    IceUtil::Optional< ::Demo::NumberType> type;
    IceUtil::Optional< ::std::string> number;
    IceUtil::Optional< ::Ice::Int> dialGroup;
    __is->read(name);
    __is->read(1, type);
    __is->read(2, number);
    __is->read(3, dialGroup);
    __inS.endReadParams();
    addContact(name, type, number, dialGroup, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Demo::ContactDB::___updateContact(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    IceUtil::Optional< ::Demo::NumberType> type;
    IceUtil::Optional< ::std::string> number;
    IceUtil::Optional< ::Ice::Int> dialGroup;
    __is->read(name);
    __is->read(1, type);
    __is->read(2, number);
    __is->read(3, dialGroup);
    __inS.endReadParams();
    updateContact(name, type, number, dialGroup, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Demo::ContactDB::___query(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    __is->read(name);
    __inS.endReadParams();
    ::Demo::ContactPtr __ret = query(name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Demo::ContactDB::___queryNumber(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    __is->read(name);
    __inS.endReadParams();
    IceUtil::Optional< ::std::string> __ret = queryNumber(name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Demo::ContactDB::___queryDialgroup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    __is->read(name);
    __inS.endReadParams();
    IceUtil::Optional< ::Ice::Int> dialGroup;
    queryDialgroup(name, dialGroup, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, dialGroup);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Demo::ContactDB::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Demo__ContactDB_all[] =
{
    "addContact",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "query",
    "queryDialgroup",
    "queryNumber",
    "shutdown",
    "updateContact"
};

}

::Ice::DispatchStatus
Demo::ContactDB::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Demo__ContactDB_all, __Demo__ContactDB_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Demo__ContactDB_all)
    {
        case 0:
        {
            return ___addContact(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___query(in, current);
        }
        case 6:
        {
            return ___queryDialgroup(in, current);
        }
        case 7:
        {
            return ___queryNumber(in, current);
        }
        case 8:
        {
            return ___shutdown(in, current);
        }
        case 9:
        {
            return ___updateContact(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Demo::ContactDB::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Demo::ContactDB::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Demo::__patch(ContactDBPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Demo::ContactDBPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Demo::ContactDB::ice_staticId(), v);
    }
}
