// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Contact.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Contact_h__
#define __Contact_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class Contact;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Contact>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Contact*);

class ContactDB;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::ContactDB>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::ContactDB*);

}

}

namespace Demo
{

class Contact;
bool operator==(const Contact&, const Contact&);
bool operator<(const Contact&, const Contact&);
::Ice::Object* upCast(::Demo::Contact*);
typedef ::IceInternal::Handle< ::Demo::Contact> ContactPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Contact> ContactPrx;
void __patch(ContactPtr&, const ::Ice::ObjectPtr&);

class ContactDB;
bool operator==(const ContactDB&, const ContactDB&);
bool operator<(const ContactDB&, const ContactDB&);
::Ice::Object* upCast(::Demo::ContactDB*);
typedef ::IceInternal::Handle< ::Demo::ContactDB> ContactDBPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::ContactDB> ContactDBPrx;
void __patch(ContactDBPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

enum NumberType
{
    HOME,
    OFFICE,
    CELL
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::NumberType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace Demo
{

class Callback_ContactDB_addContact_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContactDB_addContact_Base> Callback_ContactDB_addContactPtr;

class Callback_ContactDB_updateContact_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContactDB_updateContact_Base> Callback_ContactDB_updateContactPtr;

class Callback_ContactDB_query_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContactDB_query_Base> Callback_ContactDB_queryPtr;

class Callback_ContactDB_queryNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContactDB_queryNumber_Base> Callback_ContactDB_queryNumberPtr;

class Callback_ContactDB_queryDialgroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContactDB_queryDialgroup_Base> Callback_ContactDB_queryDialgroupPtr;

class Callback_ContactDB_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ContactDB_shutdown_Base> Callback_ContactDB_shutdownPtr;

}

namespace IceProxy
{

namespace Demo
{

class Contact : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Contact> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_secure(bool __secure) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_twoway() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_oneway() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_batchOneway() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_datagram() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_batchDatagram() const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_compress(bool __compress) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Contact> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Contact*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ContactDB : virtual public ::IceProxy::Ice::Object
{
public:

    void addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup)
    {
        addContact(name, type, number, dialGroup, 0);
    }
    void addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx)
    {
        addContact(name, type, number, dialGroup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addContact(name, type, number, dialGroup, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addContact(name, type, number, dialGroup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addContact(name, type, number, dialGroup, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addContact(name, type, number, dialGroup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup)
    {
        return begin_addContact(name, type, number, dialGroup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx)
    {
        return begin_addContact(name, type, number, dialGroup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addContact(name, type, number, dialGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addContact(name, type, number, dialGroup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Demo::Callback_ContactDB_addContactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addContact(name, type, number, dialGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::Demo::Callback_ContactDB_addContactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addContact(name, type, number, dialGroup, &__ctx, __del, __cookie);
    }

    void end_addContact(const ::Ice::AsyncResultPtr&);
    
private:

    void addContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup)
    {
        updateContact(name, type, number, dialGroup, 0);
    }
    void updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx)
    {
        updateContact(name, type, number, dialGroup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateContact(name, type, number, dialGroup, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateContact(name, type, number, dialGroup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateContact(name, type, number, dialGroup, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateContact(name, type, number, dialGroup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup)
    {
        return begin_updateContact(name, type, number, dialGroup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx)
    {
        return begin_updateContact(name, type, number, dialGroup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContact(name, type, number, dialGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContact(name, type, number, dialGroup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Demo::Callback_ContactDB_updateContactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContact(name, type, number, dialGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateContact(const ::std::string& name, const IceUtil::Optional< ::Demo::NumberType>& type, const IceUtil::Optional< ::std::string>& number, const IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx, const ::Demo::Callback_ContactDB_updateContactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateContact(name, type, number, dialGroup, &__ctx, __del, __cookie);
    }

    void end_updateContact(const ::Ice::AsyncResultPtr&);
    
private:

    void updateContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::ContactPtr query(const ::std::string& name)
    {
        return query(name, 0);
    }
    ::Demo::ContactPtr query(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return query(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_query(const ::std::string& name, const ::IceInternal::Function<void (const ::Demo::ContactPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_query(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_query(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_query(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_query(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::ContactPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_query(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_query(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_query(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_query(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::ContactPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::ContactPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
                ::Demo::ContactPtr __ret;
                try
                {
                    __ret = __proxy->end_query(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::ContactPtr&)> _response;
        };
        return begin_query(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_query(const ::std::string& name)
    {
        return begin_query(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_query(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_query(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_query(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_query(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_query(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_query(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_query(const ::std::string& name, const ::Demo::Callback_ContactDB_queryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_query(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_query(const ::std::string& name, const ::Ice::Context& __ctx, const ::Demo::Callback_ContactDB_queryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_query(name, &__ctx, __del, __cookie);
    }

    ::Demo::ContactPtr end_query(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::ContactPtr query(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_query(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    IceUtil::Optional< ::std::string> queryNumber(const ::std::string& name)
    {
        return queryNumber(name, 0);
    }
    IceUtil::Optional< ::std::string> queryNumber(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return queryNumber(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryNumber(const ::std::string& name, const ::IceInternal::Function<void (const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryNumber(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryNumber(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryNumber(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryNumber(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryNumber(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryNumber(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryNumber(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryNumber(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const IceUtil::Optional< ::std::string>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
                IceUtil::Optional< ::std::string> __ret;
                try
                {
                    __ret = __proxy->end_queryNumber(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const IceUtil::Optional< ::std::string>&)> _response;
        };
        return begin_queryNumber(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryNumber(const ::std::string& name)
    {
        return begin_queryNumber(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryNumber(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_queryNumber(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryNumber(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryNumber(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryNumber(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryNumber(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryNumber(const ::std::string& name, const ::Demo::Callback_ContactDB_queryNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryNumber(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryNumber(const ::std::string& name, const ::Ice::Context& __ctx, const ::Demo::Callback_ContactDB_queryNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryNumber(name, &__ctx, __del, __cookie);
    }

    IceUtil::Optional< ::std::string> end_queryNumber(const ::Ice::AsyncResultPtr&);
    
private:

    IceUtil::Optional< ::std::string> queryNumber(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryNumber(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void queryDialgroup(const ::std::string& name, IceUtil::Optional< ::Ice::Int>& dialGroup)
    {
        queryDialgroup(name, dialGroup, 0);
    }
    void queryDialgroup(const ::std::string& name, IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::Context& __ctx)
    {
        queryDialgroup(name, dialGroup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryDialgroup(const ::std::string& name, const ::IceInternal::Function<void (const IceUtil::Optional< ::Ice::Int>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryDialgroup(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryDialgroup(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryDialgroup(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryDialgroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const IceUtil::Optional< ::Ice::Int>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryDialgroup(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryDialgroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryDialgroup(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryDialgroup(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const IceUtil::Optional< ::Ice::Int>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const IceUtil::Optional< ::Ice::Int>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
                IceUtil::Optional< ::Ice::Int> dialGroup;
                try
                {
                    __proxy->end_queryDialgroup(dialGroup, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(dialGroup);
                }
            }
        
        private:
            
            ::std::function<void (const IceUtil::Optional< ::Ice::Int>&)> _response;
        };
        return begin_queryDialgroup(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryDialgroup(const ::std::string& name)
    {
        return begin_queryDialgroup(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryDialgroup(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_queryDialgroup(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryDialgroup(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDialgroup(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryDialgroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDialgroup(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryDialgroup(const ::std::string& name, const ::Demo::Callback_ContactDB_queryDialgroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDialgroup(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryDialgroup(const ::std::string& name, const ::Ice::Context& __ctx, const ::Demo::Callback_ContactDB_queryDialgroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDialgroup(name, &__ctx, __del, __cookie);
    }

    void end_queryDialgroup(IceUtil::Optional< ::Ice::Int>& dialGroup, const ::Ice::AsyncResultPtr&);
    
private:

    void queryDialgroup(const ::std::string&, IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryDialgroup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_ContactDB_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_ContactDB_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ContactDB> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_secure(bool __secure) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_twoway() const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_oneway() const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_batchOneway() const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_datagram() const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_batchDatagram() const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_compress(bool __compress) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ContactDB> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ContactDB*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class Contact : virtual public ::IceDelegate::Ice::Object
{
public:
};

class ContactDB : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void addContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::ContactPtr query(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual IceUtil::Optional< ::std::string> queryNumber(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void queryDialgroup(const ::std::string&, IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class Contact : virtual public ::IceDelegate::Demo::Contact,
                virtual public ::IceDelegateM::Ice::Object
{
public:
};

class ContactDB : virtual public ::IceDelegate::Demo::ContactDB,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void addContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::ContactPtr query(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual IceUtil::Optional< ::std::string> queryNumber(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void queryDialgroup(const ::std::string&, IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class Contact : virtual public ::IceDelegate::Demo::Contact,
                virtual public ::IceDelegateD::Ice::Object
{
public:
};

class ContactDB : virtual public ::IceDelegate::Demo::ContactDB,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void addContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::ContactPtr query(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual IceUtil::Optional< ::std::string> queryNumber(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void queryDialgroup(const ::std::string&, IceUtil::Optional< ::Ice::Int>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class Contact : virtual public ::Ice::Object
{
public:

    typedef ContactPrx ProxyType;
    typedef ContactPtr PointerType;

    Contact() :
        type(HOME)
    {
    }

    Contact(const ::std::string& __ice_name, const IceUtil::Optional< ::Demo::NumberType>& __ice_type, const IceUtil::Optional< ::std::string>& __ice_number, const IceUtil::Optional< ::Ice::Int>& __ice_dialGroup) :
        name(__ice_name),
        type(__ice_type),
        number(__ice_number),
        dialGroup(__ice_dialGroup)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string name;

    IceUtil::Optional< ::Demo::NumberType> type;

    IceUtil::Optional< ::std::string> number;

    IceUtil::Optional< ::Ice::Int> dialGroup;

protected:

    virtual ~Contact() {}

    friend class Contact__staticInit;
};

class Contact__staticInit
{
public:

    ::Demo::Contact _init;
};

static Contact__staticInit _Contact_init;

inline bool operator==(const Contact& l, const Contact& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Contact& l, const Contact& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ContactDB : virtual public ::Ice::Object
{
public:

    typedef ContactDBPrx ProxyType;
    typedef ContactDBPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void addContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addContact(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateContact(const ::std::string&, const IceUtil::Optional< ::Demo::NumberType>&, const IceUtil::Optional< ::std::string>&, const IceUtil::Optional< ::Ice::Int>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateContact(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::ContactPtr query(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___query(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual IceUtil::Optional< ::std::string> queryNumber(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void queryDialgroup(const ::std::string&, IceUtil::Optional< ::Ice::Int>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryDialgroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ContactDB& l, const ContactDB& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ContactDB& l, const ContactDB& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_ContactDB_addContact : public Callback_ContactDB_addContact_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ContactDB_addContact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_addContact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_addContact<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_addContact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_addContact<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContactDB_addContact : public Callback_ContactDB_addContact_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ContactDB_addContact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_addContact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_addContact<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_addContact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_addContactPtr
newCallback_ContactDB_addContact(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_addContact<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ContactDB_updateContact : public Callback_ContactDB_updateContact_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ContactDB_updateContact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_updateContact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_updateContact<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_updateContact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_updateContact<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContactDB_updateContact : public Callback_ContactDB_updateContact_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ContactDB_updateContact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_updateContact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_updateContact<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_updateContact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_updateContactPtr
newCallback_ContactDB_updateContact(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_updateContact<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ContactDB_query : public Callback_ContactDB_query_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::ContactPtr&);

    CallbackNC_ContactDB_query(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
        ::Demo::ContactPtr __ret;
        try
        {
            __ret = __proxy->end_query(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ContactDB_queryPtr
newCallback_ContactDB_query(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::ContactPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_query<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_queryPtr
newCallback_ContactDB_query(T* instance, void (T::*cb)(const ::Demo::ContactPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_query<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContactDB_query : public Callback_ContactDB_query_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::ContactPtr&, const CT&);

    Callback_ContactDB_query(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
        ::Demo::ContactPtr __ret;
        try
        {
            __ret = __proxy->end_query(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ContactDB_queryPtr
newCallback_ContactDB_query(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::ContactPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_query<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_queryPtr
newCallback_ContactDB_query(T* instance, void (T::*cb)(const ::Demo::ContactPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_query<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContactDB_queryNumber : public Callback_ContactDB_queryNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const IceUtil::Optional< ::std::string>&);

    CallbackNC_ContactDB_queryNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
        IceUtil::Optional< ::std::string> __ret;
        try
        {
            __ret = __proxy->end_queryNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ContactDB_queryNumberPtr
newCallback_ContactDB_queryNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_queryNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_queryNumberPtr
newCallback_ContactDB_queryNumber(T* instance, void (T::*cb)(const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_queryNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContactDB_queryNumber : public Callback_ContactDB_queryNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const IceUtil::Optional< ::std::string>&, const CT&);

    Callback_ContactDB_queryNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
        IceUtil::Optional< ::std::string> __ret;
        try
        {
            __ret = __proxy->end_queryNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ContactDB_queryNumberPtr
newCallback_ContactDB_queryNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_queryNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_queryNumberPtr
newCallback_ContactDB_queryNumber(T* instance, void (T::*cb)(const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_queryNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContactDB_queryDialgroup : public Callback_ContactDB_queryDialgroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const IceUtil::Optional< ::Ice::Int>&);

    CallbackNC_ContactDB_queryDialgroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
        IceUtil::Optional< ::Ice::Int> dialGroup;
        try
        {
            __proxy->end_queryDialgroup(dialGroup, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(dialGroup);
        }
    }

    Response response;
};

template<class T> Callback_ContactDB_queryDialgroupPtr
newCallback_ContactDB_queryDialgroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const IceUtil::Optional< ::Ice::Int>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_queryDialgroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_queryDialgroupPtr
newCallback_ContactDB_queryDialgroup(T* instance, void (T::*cb)(const IceUtil::Optional< ::Ice::Int>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_queryDialgroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContactDB_queryDialgroup : public Callback_ContactDB_queryDialgroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const IceUtil::Optional< ::Ice::Int>&, const CT&);

    Callback_ContactDB_queryDialgroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ContactDBPrx __proxy = ::Demo::ContactDBPrx::uncheckedCast(__result->getProxy());
        IceUtil::Optional< ::Ice::Int> dialGroup;
        try
        {
            __proxy->end_queryDialgroup(dialGroup, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(dialGroup, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ContactDB_queryDialgroupPtr
newCallback_ContactDB_queryDialgroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const IceUtil::Optional< ::Ice::Int>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_queryDialgroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_queryDialgroupPtr
newCallback_ContactDB_queryDialgroup(T* instance, void (T::*cb)(const IceUtil::Optional< ::Ice::Int>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_queryDialgroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ContactDB_shutdown : public Callback_ContactDB_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ContactDB_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ContactDB_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ContactDB_shutdown : public Callback_ContactDB_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ContactDB_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ContactDB_shutdownPtr
newCallback_ContactDB_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ContactDB_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
