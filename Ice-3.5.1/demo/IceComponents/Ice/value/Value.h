// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Value.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Value_h__
#define __Value_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class Simple;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Simple>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Simple*);

class Printer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Printer*);

class DerivedPrinter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::DerivedPrinter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::DerivedPrinter*);

class ClientPrinter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::ClientPrinter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::ClientPrinter*);

class Initial;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Initial>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Initial*);

}

}

namespace Demo
{

class Simple;
bool operator==(const Simple&, const Simple&);
bool operator<(const Simple&, const Simple&);
::Ice::Object* upCast(::Demo::Simple*);
typedef ::IceInternal::Handle< ::Demo::Simple> SimplePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Simple> SimplePrx;
void __patch(SimplePtr&, const ::Ice::ObjectPtr&);

class Printer;
bool operator==(const Printer&, const Printer&);
bool operator<(const Printer&, const Printer&);
::Ice::Object* upCast(::Demo::Printer*);
typedef ::IceInternal::Handle< ::Demo::Printer> PrinterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer> PrinterPrx;
void __patch(PrinterPtr&, const ::Ice::ObjectPtr&);

class DerivedPrinter;
bool operator==(const DerivedPrinter&, const DerivedPrinter&);
bool operator<(const DerivedPrinter&, const DerivedPrinter&);
::Ice::Object* upCast(::Demo::DerivedPrinter*);
typedef ::IceInternal::Handle< ::Demo::DerivedPrinter> DerivedPrinterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::DerivedPrinter> DerivedPrinterPrx;
void __patch(DerivedPrinterPtr&, const ::Ice::ObjectPtr&);

class ClientPrinter;
bool operator==(const ClientPrinter&, const ClientPrinter&);
bool operator<(const ClientPrinter&, const ClientPrinter&);
::Ice::Object* upCast(::Demo::ClientPrinter*);
typedef ::IceInternal::Handle< ::Demo::ClientPrinter> ClientPrinterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::ClientPrinter> ClientPrinterPrx;
void __patch(ClientPrinterPtr&, const ::Ice::ObjectPtr&);

class Initial;
bool operator==(const Initial&, const Initial&);
bool operator<(const Initial&, const Initial&);
::Ice::Object* upCast(::Demo::Initial*);
typedef ::IceInternal::Handle< ::Demo::Initial> InitialPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Initial> InitialPrx;
void __patch(InitialPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

class DerivedPrinterException : public ::Ice::UserException
{
public:

    DerivedPrinterException() {}
    explicit DerivedPrinterException(const ::Demo::DerivedPrinterPtr&);
    virtual ~DerivedPrinterException() throw();

    virtual ::std::string ice_name() const;
    virtual DerivedPrinterException* ice_clone() const;
    virtual void ice_throw() const;

    virtual bool __usesClasses() const;

    ::Demo::DerivedPrinterPtr derived;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static DerivedPrinterException __DerivedPrinterException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::DerivedPrinterException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Demo
{

class Callback_Printer_printBackwards_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printBackwards_Base> Callback_Printer_printBackwardsPtr;

class Callback_DerivedPrinter_printUppercase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DerivedPrinter_printUppercase_Base> Callback_DerivedPrinter_printUppercasePtr;

class Callback_Initial_getSimple_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getSimple_Base> Callback_Initial_getSimplePtr;

class Callback_Initial_getPrinter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getPrinter_Base> Callback_Initial_getPrinterPtr;

class Callback_Initial_getDerivedPrinter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getDerivedPrinter_Base> Callback_Initial_getDerivedPrinterPtr;

class Callback_Initial_updatePrinterMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_updatePrinterMessage_Base> Callback_Initial_updatePrinterMessagePtr;

class Callback_Initial_throwDerivedPrinter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_throwDerivedPrinter_Base> Callback_Initial_throwDerivedPrinterPtr;

class Callback_Initial_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_shutdown_Base> Callback_Initial_shutdownPtr;

}

namespace IceProxy
{

namespace Demo
{

class Simple : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Simple> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_secure(bool __secure) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_twoway() const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_oneway() const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_batchOneway() const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_datagram() const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_batchDatagram() const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_compress(bool __compress) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Simple> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Simple*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Printer : virtual public ::IceProxy::Ice::Object
{
public:

    void printBackwards()
    {
        printBackwards(0);
    }
    void printBackwards(const ::Ice::Context& __ctx)
    {
        printBackwards(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printBackwards(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printBackwards(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printBackwards(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printBackwards(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printBackwards(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printBackwards(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printBackwards(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printBackwards(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printBackwards()
    {
        return begin_printBackwards(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printBackwards(const ::Ice::Context& __ctx)
    {
        return begin_printBackwards(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printBackwards(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printBackwards(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printBackwards(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printBackwards(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printBackwards(const ::Demo::Callback_Printer_printBackwardsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printBackwards(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printBackwards(const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printBackwardsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printBackwards(&__ctx, __del, __cookie);
    }

    void end_printBackwards(const ::Ice::AsyncResultPtr&);
    
private:

    void printBackwards(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printBackwards(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Printer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_secure(bool __secure) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_twoway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_oneway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_batchOneway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_datagram() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_batchDatagram() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_compress(bool __compress) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DerivedPrinter : virtual public ::IceProxy::Demo::Printer
{
public:

    void printUppercase()
    {
        printUppercase(0);
    }
    void printUppercase(const ::Ice::Context& __ctx)
    {
        printUppercase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printUppercase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printUppercase(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printUppercase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printUppercase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printUppercase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printUppercase(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printUppercase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printUppercase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printUppercase()
    {
        return begin_printUppercase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printUppercase(const ::Ice::Context& __ctx)
    {
        return begin_printUppercase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printUppercase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printUppercase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printUppercase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printUppercase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printUppercase(const ::Demo::Callback_DerivedPrinter_printUppercasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printUppercase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printUppercase(const ::Ice::Context& __ctx, const ::Demo::Callback_DerivedPrinter_printUppercasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printUppercase(&__ctx, __del, __cookie);
    }

    void end_printUppercase(const ::Ice::AsyncResultPtr&);
    
private:

    void printUppercase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printUppercase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_secure(bool __secure) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_twoway() const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_oneway() const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_batchOneway() const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_datagram() const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_batchDatagram() const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_compress(bool __compress) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DerivedPrinter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DerivedPrinter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ClientPrinter : virtual public ::IceProxy::Demo::Printer
{
public:
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_secure(bool __secure) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_twoway() const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_oneway() const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_batchOneway() const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_datagram() const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_batchDatagram() const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_compress(bool __compress) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientPrinter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ClientPrinter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Initial : virtual public ::IceProxy::Ice::Object
{
public:

    ::Demo::SimplePtr getSimple()
    {
        return getSimple(0);
    }
    ::Demo::SimplePtr getSimple(const ::Ice::Context& __ctx)
    {
        return getSimple(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSimple(const ::IceInternal::Function<void (const ::Demo::SimplePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSimple(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSimple(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSimple(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSimple(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::SimplePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSimple(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSimple(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSimple(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSimple(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::SimplePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::SimplePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
                ::Demo::SimplePtr __ret;
                try
                {
                    __ret = __proxy->end_getSimple(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::SimplePtr&)> _response;
        };
        return begin_getSimple(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSimple()
    {
        return begin_getSimple(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSimple(const ::Ice::Context& __ctx)
    {
        return begin_getSimple(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSimple(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimple(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimple(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimple(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimple(const ::Demo::Callback_Initial_getSimplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimple(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimple(const ::Ice::Context& __ctx, const ::Demo::Callback_Initial_getSimplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSimple(&__ctx, __del, __cookie);
    }

    ::Demo::SimplePtr end_getSimple(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::SimplePtr getSimple(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSimple(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getPrinter(::Demo::PrinterPtr& impl, ::Demo::PrinterPrx& proxy)
    {
        getPrinter(impl, proxy, 0);
    }
    void getPrinter(::Demo::PrinterPtr& impl, ::Demo::PrinterPrx& proxy, const ::Ice::Context& __ctx)
    {
        getPrinter(impl, proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPrinter(const ::IceInternal::Function<void (const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrinter(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrinter(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrinter(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPrinter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrinter(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrinter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrinter(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPrinter(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
                ::Demo::PrinterPtr impl;
                ::Demo::PrinterPrx proxy;
                try
                {
                    __proxy->end_getPrinter(impl, proxy, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(impl, proxy);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&)> _response;
        };
        return begin_getPrinter(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPrinter()
    {
        return begin_getPrinter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrinter(const ::Ice::Context& __ctx)
    {
        return begin_getPrinter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrinter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrinter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrinter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrinter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrinter(const ::Demo::Callback_Initial_getPrinterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrinter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrinter(const ::Ice::Context& __ctx, const ::Demo::Callback_Initial_getPrinterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrinter(&__ctx, __del, __cookie);
    }

    void end_getPrinter(::Demo::PrinterPtr& impl, ::Demo::PrinterPrx& proxy, const ::Ice::AsyncResultPtr&);
    
private:

    void getPrinter(::Demo::PrinterPtr&, ::Demo::PrinterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPrinter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::PrinterPtr getDerivedPrinter()
    {
        return getDerivedPrinter(0);
    }
    ::Demo::PrinterPtr getDerivedPrinter(const ::Ice::Context& __ctx)
    {
        return getDerivedPrinter(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDerivedPrinter(const ::IceInternal::Function<void (const ::Demo::PrinterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDerivedPrinter(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDerivedPrinter(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDerivedPrinter(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDerivedPrinter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::PrinterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDerivedPrinter(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDerivedPrinter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDerivedPrinter(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDerivedPrinter(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::PrinterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::PrinterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
                ::Demo::PrinterPtr __ret;
                try
                {
                    __ret = __proxy->end_getDerivedPrinter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::PrinterPtr&)> _response;
        };
        return begin_getDerivedPrinter(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDerivedPrinter()
    {
        return begin_getDerivedPrinter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDerivedPrinter(const ::Ice::Context& __ctx)
    {
        return begin_getDerivedPrinter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDerivedPrinter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDerivedPrinter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDerivedPrinter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDerivedPrinter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDerivedPrinter(const ::Demo::Callback_Initial_getDerivedPrinterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDerivedPrinter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDerivedPrinter(const ::Ice::Context& __ctx, const ::Demo::Callback_Initial_getDerivedPrinterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDerivedPrinter(&__ctx, __del, __cookie);
    }

    ::Demo::PrinterPtr end_getDerivedPrinter(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::PrinterPtr getDerivedPrinter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDerivedPrinter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::PrinterPtr updatePrinterMessage(const ::Demo::PrinterPtr& impl)
    {
        return updatePrinterMessage(impl, 0);
    }
    ::Demo::PrinterPtr updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::Context& __ctx)
    {
        return updatePrinterMessage(impl, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::IceInternal::Function<void (const ::Demo::PrinterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updatePrinterMessage(impl, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updatePrinterMessage(impl, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::PrinterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updatePrinterMessage(impl, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updatePrinterMessage(impl, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::PrinterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::PrinterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
                ::Demo::PrinterPtr __ret;
                try
                {
                    __ret = __proxy->end_updatePrinterMessage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::PrinterPtr&)> _response;
        };
        return begin_updatePrinterMessage(impl, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl)
    {
        return begin_updatePrinterMessage(impl, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::Context& __ctx)
    {
        return begin_updatePrinterMessage(impl, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePrinterMessage(impl, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePrinterMessage(impl, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Demo::Callback_Initial_updatePrinterMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePrinterMessage(impl, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePrinterMessage(const ::Demo::PrinterPtr& impl, const ::Ice::Context& __ctx, const ::Demo::Callback_Initial_updatePrinterMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePrinterMessage(impl, &__ctx, __del, __cookie);
    }

    ::Demo::PrinterPtr end_updatePrinterMessage(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::PrinterPtr updatePrinterMessage(const ::Demo::PrinterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updatePrinterMessage(const ::Demo::PrinterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void throwDerivedPrinter()
    {
        throwDerivedPrinter(0);
    }
    void throwDerivedPrinter(const ::Ice::Context& __ctx)
    {
        throwDerivedPrinter(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwDerivedPrinter(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwDerivedPrinter(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwDerivedPrinter(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwDerivedPrinter(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwDerivedPrinter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwDerivedPrinter(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwDerivedPrinter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwDerivedPrinter(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwDerivedPrinter(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwDerivedPrinter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwDerivedPrinter(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwDerivedPrinter()
    {
        return begin_throwDerivedPrinter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwDerivedPrinter(const ::Ice::Context& __ctx)
    {
        return begin_throwDerivedPrinter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwDerivedPrinter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwDerivedPrinter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwDerivedPrinter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwDerivedPrinter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwDerivedPrinter(const ::Demo::Callback_Initial_throwDerivedPrinterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwDerivedPrinter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwDerivedPrinter(const ::Ice::Context& __ctx, const ::Demo::Callback_Initial_throwDerivedPrinterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwDerivedPrinter(&__ctx, __del, __cookie);
    }

    void end_throwDerivedPrinter(const ::Ice::AsyncResultPtr&);
    
private:

    void throwDerivedPrinter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwDerivedPrinter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_Initial_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_Initial_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Initial> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_secure(bool __secure) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_twoway() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_oneway() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_batchOneway() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_datagram() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_batchDatagram() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_compress(bool __compress) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class Simple : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Printer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void printBackwards(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class DerivedPrinter : virtual public ::IceDelegate::Demo::Printer
{
public:

    virtual void printUppercase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ClientPrinter : virtual public ::IceDelegate::Demo::Printer
{
public:
};

class Initial : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Demo::SimplePtr getSimple(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getPrinter(::Demo::PrinterPtr&, ::Demo::PrinterPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::PrinterPtr getDerivedPrinter(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::PrinterPtr updatePrinterMessage(const ::Demo::PrinterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwDerivedPrinter(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class Simple : virtual public ::IceDelegate::Demo::Simple,
               virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Printer : virtual public ::IceDelegate::Demo::Printer,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void printBackwards(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DerivedPrinter : virtual public ::IceDelegate::Demo::DerivedPrinter,
                       virtual public ::IceDelegateM::Demo::Printer
{
public:

    virtual void printUppercase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ClientPrinter : virtual public ::IceDelegate::Demo::ClientPrinter,
                      virtual public ::IceDelegateM::Demo::Printer
{
public:
};

class Initial : virtual public ::IceDelegate::Demo::Initial,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Demo::SimplePtr getSimple(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getPrinter(::Demo::PrinterPtr&, ::Demo::PrinterPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::PrinterPtr getDerivedPrinter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::PrinterPtr updatePrinterMessage(const ::Demo::PrinterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwDerivedPrinter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class Simple : virtual public ::IceDelegate::Demo::Simple,
               virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Printer : virtual public ::IceDelegate::Demo::Printer,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void printBackwards(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DerivedPrinter : virtual public ::IceDelegate::Demo::DerivedPrinter,
                       virtual public ::IceDelegateD::Demo::Printer
{
public:

    virtual void printUppercase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ClientPrinter : virtual public ::IceDelegate::Demo::ClientPrinter,
                      virtual public ::IceDelegateD::Demo::Printer
{
public:
};

class Initial : virtual public ::IceDelegate::Demo::Initial,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Demo::SimplePtr getSimple(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getPrinter(::Demo::PrinterPtr&, ::Demo::PrinterPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::PrinterPtr getDerivedPrinter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::PrinterPtr updatePrinterMessage(const ::Demo::PrinterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwDerivedPrinter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class Simple : virtual public ::Ice::Object
{
public:

    typedef SimplePrx ProxyType;
    typedef SimplePtr PointerType;

    Simple()
    {
    }

    explicit Simple(const ::std::string& __ice_message) :
        message(__ice_message)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string message;

protected:

    virtual ~Simple() {}

    friend class Simple__staticInit;
};

class Simple__staticInit
{
public:

    ::Demo::Simple _init;
};

static Simple__staticInit _Simple_init;

inline bool operator==(const Simple& l, const Simple& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Simple& l, const Simple& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Printer : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef PrinterPrx ProxyType;
    typedef PrinterPtr PointerType;

    Printer()
    {
    }

    explicit Printer(const ::std::string& __ice_message) :
        message(__ice_message)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual void printBackwards(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printBackwards(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__write;
    using ::Ice::Object::__read;
    #endif

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string message;

protected:

    ::Ice::SlicedDataPtr __slicedData;
};

inline bool operator==(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DerivedPrinter : virtual public ::Demo::Printer
{
public:

    typedef DerivedPrinterPrx ProxyType;
    typedef DerivedPrinterPtr PointerType;

    DerivedPrinter()
    {
    }

    DerivedPrinter(const ::std::string& __ice_message, const ::std::string& __ice_derivedMessage) :
        ::Demo::Printer(__ice_message)
        ,
        derivedMessage(__ice_derivedMessage)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void printUppercase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printUppercase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Demo::Printer::__writeImpl;
    using ::Demo::Printer::__readImpl;
    #endif

public:

    ::std::string derivedMessage;
};

inline bool operator==(const DerivedPrinter& l, const DerivedPrinter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DerivedPrinter& l, const DerivedPrinter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ClientPrinter : virtual public ::Demo::Printer
{
public:

    typedef ClientPrinterPrx ProxyType;
    typedef ClientPrinterPtr PointerType;

    ClientPrinter()
    {
    }

    explicit ClientPrinter(const ::std::string& __ice_message) :
        ::Demo::Printer(__ice_message)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Demo::Printer::__writeImpl;
    using ::Demo::Printer::__readImpl;
    #endif
};

inline bool operator==(const ClientPrinter& l, const ClientPrinter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ClientPrinter& l, const ClientPrinter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Initial : virtual public ::Ice::Object
{
public:

    typedef InitialPrx ProxyType;
    typedef InitialPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Demo::SimplePtr getSimple(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSimple(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getPrinter(::Demo::PrinterPtr&, ::Demo::PrinterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPrinter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::PrinterPtr getDerivedPrinter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDerivedPrinter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::PrinterPtr updatePrinterMessage(const ::Demo::PrinterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updatePrinterMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwDerivedPrinter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwDerivedPrinter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Initial& l, const Initial& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Initial& l, const Initial& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_Printer_printBackwards : public Callback_Printer_printBackwards_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printBackwards(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printBackwards<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printBackwards<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printBackwards<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printBackwards<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printBackwards : public Callback_Printer_printBackwards_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printBackwards(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printBackwards<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printBackwards<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printBackwards<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printBackwardsPtr
newCallback_Printer_printBackwards(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printBackwards<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DerivedPrinter_printUppercase : public Callback_DerivedPrinter_printUppercase_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DerivedPrinter_printUppercase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DerivedPrinter_printUppercase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DerivedPrinter_printUppercase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DerivedPrinter_printUppercase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DerivedPrinter_printUppercase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DerivedPrinter_printUppercase : public Callback_DerivedPrinter_printUppercase_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DerivedPrinter_printUppercase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DerivedPrinter_printUppercase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DerivedPrinter_printUppercase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DerivedPrinter_printUppercase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DerivedPrinter_printUppercasePtr
newCallback_DerivedPrinter_printUppercase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DerivedPrinter_printUppercase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getSimple : public Callback_Initial_getSimple_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::SimplePtr&);

    CallbackNC_Initial_getSimple(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::SimplePtr __ret;
        try
        {
            __ret = __proxy->end_getSimple(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getSimplePtr
newCallback_Initial_getSimple(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::SimplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getSimple<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getSimplePtr
newCallback_Initial_getSimple(T* instance, void (T::*cb)(const ::Demo::SimplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getSimple<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getSimple : public Callback_Initial_getSimple_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::SimplePtr&, const CT&);

    Callback_Initial_getSimple(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::SimplePtr __ret;
        try
        {
            __ret = __proxy->end_getSimple(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getSimplePtr
newCallback_Initial_getSimple(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::SimplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getSimple<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getSimplePtr
newCallback_Initial_getSimple(T* instance, void (T::*cb)(const ::Demo::SimplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getSimple<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getPrinter : public Callback_Initial_getPrinter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&);

    CallbackNC_Initial_getPrinter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::PrinterPtr impl;
        ::Demo::PrinterPrx proxy;
        try
        {
            __proxy->end_getPrinter(impl, proxy, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(impl, proxy);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getPrinterPtr
newCallback_Initial_getPrinter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getPrinter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getPrinterPtr
newCallback_Initial_getPrinter(T* instance, void (T::*cb)(const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getPrinter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getPrinter : public Callback_Initial_getPrinter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&, const CT&);

    Callback_Initial_getPrinter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::PrinterPtr impl;
        ::Demo::PrinterPrx proxy;
        try
        {
            __proxy->end_getPrinter(impl, proxy, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(impl, proxy, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getPrinterPtr
newCallback_Initial_getPrinter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getPrinter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getPrinterPtr
newCallback_Initial_getPrinter(T* instance, void (T::*cb)(const ::Demo::PrinterPtr&, const ::Demo::PrinterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getPrinter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getDerivedPrinter : public Callback_Initial_getDerivedPrinter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::PrinterPtr&);

    CallbackNC_Initial_getDerivedPrinter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::PrinterPtr __ret;
        try
        {
            __ret = __proxy->end_getDerivedPrinter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getDerivedPrinterPtr
newCallback_Initial_getDerivedPrinter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::PrinterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getDerivedPrinter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getDerivedPrinterPtr
newCallback_Initial_getDerivedPrinter(T* instance, void (T::*cb)(const ::Demo::PrinterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getDerivedPrinter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getDerivedPrinter : public Callback_Initial_getDerivedPrinter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::PrinterPtr&, const CT&);

    Callback_Initial_getDerivedPrinter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::PrinterPtr __ret;
        try
        {
            __ret = __proxy->end_getDerivedPrinter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getDerivedPrinterPtr
newCallback_Initial_getDerivedPrinter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::PrinterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getDerivedPrinter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getDerivedPrinterPtr
newCallback_Initial_getDerivedPrinter(T* instance, void (T::*cb)(const ::Demo::PrinterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getDerivedPrinter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_updatePrinterMessage : public Callback_Initial_updatePrinterMessage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::PrinterPtr&);

    CallbackNC_Initial_updatePrinterMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::PrinterPtr __ret;
        try
        {
            __ret = __proxy->end_updatePrinterMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_updatePrinterMessagePtr
newCallback_Initial_updatePrinterMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::PrinterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_updatePrinterMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_updatePrinterMessagePtr
newCallback_Initial_updatePrinterMessage(T* instance, void (T::*cb)(const ::Demo::PrinterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_updatePrinterMessage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_updatePrinterMessage : public Callback_Initial_updatePrinterMessage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::PrinterPtr&, const CT&);

    Callback_Initial_updatePrinterMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        ::Demo::PrinterPtr __ret;
        try
        {
            __ret = __proxy->end_updatePrinterMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_updatePrinterMessagePtr
newCallback_Initial_updatePrinterMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::PrinterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_updatePrinterMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_updatePrinterMessagePtr
newCallback_Initial_updatePrinterMessage(T* instance, void (T::*cb)(const ::Demo::PrinterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_updatePrinterMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_throwDerivedPrinter : public Callback_Initial_throwDerivedPrinter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_throwDerivedPrinter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwDerivedPrinter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwDerivedPrinter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwDerivedPrinter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwDerivedPrinter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwDerivedPrinter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_throwDerivedPrinter : public Callback_Initial_throwDerivedPrinter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_throwDerivedPrinter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::InitialPrx __proxy = ::Demo::InitialPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwDerivedPrinter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwDerivedPrinter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwDerivedPrinter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwDerivedPrinter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_throwDerivedPrinterPtr
newCallback_Initial_throwDerivedPrinter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwDerivedPrinter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
