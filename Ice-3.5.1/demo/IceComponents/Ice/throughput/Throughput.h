// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Throughput.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Throughput_h__
#define __Throughput_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class Throughput;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Throughput>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Throughput*);

}

}

namespace Demo
{

class Throughput;
bool operator==(const Throughput&, const Throughput&);
bool operator<(const Throughput&, const Throughput&);
::Ice::Object* upCast(::Demo::Throughput*);
typedef ::IceInternal::Handle< ::Demo::Throughput> ThroughputPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Throughput> ThroughputPrx;
void __patch(ThroughputPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

const ::Ice::Int ByteSeqSize = 500000;

typedef ::std::vector< ::std::string> StringSeq;

const ::Ice::Int StringSeqSize = 50000;

struct StringDouble
{
    ::std::string s;
    ::Ice::Double d;
};

typedef ::std::vector< ::Demo::StringDouble> StringDoubleSeq;

const ::Ice::Int StringDoubleSeqSize = 50000;

struct Fixed
{
    ::Ice::Int i;
    ::Ice::Int j;
    ::Ice::Double d;
};

typedef ::std::vector< ::Demo::Fixed> FixedSeq;

const ::Ice::Int FixedSeqSize = 50000;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::StringDouble>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Demo::StringDouble, S>
{
    static void write(S* __os, const ::Demo::StringDouble& v)
    {
        __os->write(v.s);
        __os->write(v.d);
    }
};

template<class S>
struct StreamReader< ::Demo::StringDouble, S>
{
    static void read(S* __is, ::Demo::StringDouble& v)
    {
        __is->read(v.s);
        __is->read(v.d);
    }
};

template<>
struct StreamableTraits< ::Demo::Fixed>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Demo::Fixed, S>
{
    static void write(S* __os, const ::Demo::Fixed& v)
    {
        __os->write(v.i);
        __os->write(v.j);
        __os->write(v.d);
    }
};

template<class S>
struct StreamReader< ::Demo::Fixed, S>
{
    static void read(S* __is, ::Demo::Fixed& v)
    {
        __is->read(v.i);
        __is->read(v.j);
        __is->read(v.d);
    }
};

}

namespace Demo
{

class AMD_Throughput_recvByteSeq : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&) = 0;
};

typedef ::IceUtil::Handle< ::Demo::AMD_Throughput_recvByteSeq> AMD_Throughput_recvByteSeqPtr;

class AMD_Throughput_echoByteSeq : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&) = 0;
};

typedef ::IceUtil::Handle< ::Demo::AMD_Throughput_echoByteSeq> AMD_Throughput_echoByteSeqPtr;

}

namespace IceAsync
{

namespace Demo
{

class AMD_Throughput_recvByteSeq : public ::Demo::AMD_Throughput_recvByteSeq, public ::IceInternal::IncomingAsync
{
public:

    AMD_Throughput_recvByteSeq(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);
};

class AMD_Throughput_echoByteSeq : public ::Demo::AMD_Throughput_echoByteSeq, public ::IceInternal::IncomingAsync
{
public:

    AMD_Throughput_echoByteSeq(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);
};

}

}

namespace Demo
{

class Callback_Throughput_needsWarmup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_needsWarmup_Base> Callback_Throughput_needsWarmupPtr;

class Callback_Throughput_startWarmup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_startWarmup_Base> Callback_Throughput_startWarmupPtr;

class Callback_Throughput_endWarmup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_endWarmup_Base> Callback_Throughput_endWarmupPtr;

class Callback_Throughput_sendByteSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_sendByteSeq_Base> Callback_Throughput_sendByteSeqPtr;

class Callback_Throughput_recvByteSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_recvByteSeq_Base> Callback_Throughput_recvByteSeqPtr;

class Callback_Throughput_echoByteSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_echoByteSeq_Base> Callback_Throughput_echoByteSeqPtr;

class Callback_Throughput_sendStringSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_sendStringSeq_Base> Callback_Throughput_sendStringSeqPtr;

class Callback_Throughput_recvStringSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_recvStringSeq_Base> Callback_Throughput_recvStringSeqPtr;

class Callback_Throughput_echoStringSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_echoStringSeq_Base> Callback_Throughput_echoStringSeqPtr;

class Callback_Throughput_sendStructSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_sendStructSeq_Base> Callback_Throughput_sendStructSeqPtr;

class Callback_Throughput_recvStructSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_recvStructSeq_Base> Callback_Throughput_recvStructSeqPtr;

class Callback_Throughput_echoStructSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_echoStructSeq_Base> Callback_Throughput_echoStructSeqPtr;

class Callback_Throughput_sendFixedSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_sendFixedSeq_Base> Callback_Throughput_sendFixedSeqPtr;

class Callback_Throughput_recvFixedSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_recvFixedSeq_Base> Callback_Throughput_recvFixedSeqPtr;

class Callback_Throughput_echoFixedSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_echoFixedSeq_Base> Callback_Throughput_echoFixedSeqPtr;

class Callback_Throughput_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Throughput_shutdown_Base> Callback_Throughput_shutdownPtr;

}

namespace IceProxy
{

namespace Demo
{

class Throughput : virtual public ::IceProxy::Ice::Object
{
public:

    bool needsWarmup()
    {
        return needsWarmup(0);
    }
    bool needsWarmup(const ::Ice::Context& __ctx)
    {
        return needsWarmup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_needsWarmup(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_needsWarmup(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_needsWarmup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_needsWarmup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_needsWarmup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_needsWarmup(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_needsWarmup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_needsWarmup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_needsWarmup(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_needsWarmup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_needsWarmup(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_needsWarmup()
    {
        return begin_needsWarmup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_needsWarmup(const ::Ice::Context& __ctx)
    {
        return begin_needsWarmup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_needsWarmup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_needsWarmup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_needsWarmup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_needsWarmup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_needsWarmup(const ::Demo::Callback_Throughput_needsWarmupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_needsWarmup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_needsWarmup(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_needsWarmupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_needsWarmup(&__ctx, __del, __cookie);
    }

    bool end_needsWarmup(const ::Ice::AsyncResultPtr&);
    
private:

    bool needsWarmup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_needsWarmup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void startWarmup()
    {
        startWarmup(0);
    }
    void startWarmup(const ::Ice::Context& __ctx)
    {
        startWarmup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_startWarmup(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_startWarmup(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_startWarmup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startWarmup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_startWarmup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_startWarmup(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_startWarmup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startWarmup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_startWarmup()
    {
        return begin_startWarmup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startWarmup(const ::Ice::Context& __ctx)
    {
        return begin_startWarmup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startWarmup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startWarmup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startWarmup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startWarmup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startWarmup(const ::Demo::Callback_Throughput_startWarmupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startWarmup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startWarmup(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_startWarmupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startWarmup(&__ctx, __del, __cookie);
    }

    void end_startWarmup(const ::Ice::AsyncResultPtr&);
    
private:

    void startWarmup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_startWarmup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void endWarmup()
    {
        endWarmup(0);
    }
    void endWarmup(const ::Ice::Context& __ctx)
    {
        endWarmup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_endWarmup(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_endWarmup(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_endWarmup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_endWarmup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_endWarmup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_endWarmup(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_endWarmup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_endWarmup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_endWarmup()
    {
        return begin_endWarmup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_endWarmup(const ::Ice::Context& __ctx)
    {
        return begin_endWarmup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_endWarmup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_endWarmup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_endWarmup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_endWarmup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_endWarmup(const ::Demo::Callback_Throughput_endWarmupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_endWarmup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_endWarmup(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_endWarmupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_endWarmup(&__ctx, __del, __cookie);
    }

    void end_endWarmup(const ::Ice::AsyncResultPtr&);
    
private:

    void endWarmup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_endWarmup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq)
    {
        sendByteSeq(seq, 0);
    }
    void sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx)
    {
        sendByteSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendByteSeq(seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendByteSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendByteSeq(seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendByteSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq)
    {
        return begin_sendByteSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx)
    {
        return begin_sendByteSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Demo::Callback_Throughput_sendByteSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_sendByteSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendByteSeq(seq, &__ctx, __del, __cookie);
    }

    void end_sendByteSeq(const ::Ice::AsyncResultPtr&);
    
private:

    void sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::ByteSeq recvByteSeq()
    {
        return recvByteSeq(0);
    }
    ::Demo::ByteSeq recvByteSeq(const ::Ice::Context& __ctx)
    {
        return recvByteSeq(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_recvByteSeq(const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvByteSeq(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvByteSeq(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvByteSeq(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_recvByteSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvByteSeq(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvByteSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvByteSeq(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_recvByteSeq(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
                try
                {
                    __proxy->___end_recvByteSeq(__ret, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)> _response;
        };
        return begin_recvByteSeq(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_recvByteSeq()
    {
        return begin_recvByteSeq(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvByteSeq(const ::Ice::Context& __ctx)
    {
        return begin_recvByteSeq(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvByteSeq(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvByteSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvByteSeq(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvByteSeq(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvByteSeq(const ::Demo::Callback_Throughput_recvByteSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvByteSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvByteSeq(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_recvByteSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvByteSeq(&__ctx, __del, __cookie);
    }

    ::Demo::ByteSeq end_recvByteSeq(const ::Ice::AsyncResultPtr&);

     void ___end_recvByteSeq(::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::ByteSeq recvByteSeq(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_recvByteSeq(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::ByteSeq echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq)
    {
        return echoByteSeq(seq, 0);
    }
    ::Demo::ByteSeq echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx)
    {
        return echoByteSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoByteSeq(seq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoByteSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoByteSeq(seq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoByteSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
                try
                {
                    __proxy->___end_echoByteSeq(__ret, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)> _response;
        };
        return begin_echoByteSeq(seq, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq)
    {
        return begin_echoByteSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx)
    {
        return begin_echoByteSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoByteSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoByteSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Demo::Callback_Throughput_echoByteSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoByteSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_echoByteSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoByteSeq(seq, &__ctx, __del, __cookie);
    }

    ::Demo::ByteSeq end_echoByteSeq(const ::Ice::AsyncResultPtr&);

     void ___end_echoByteSeq(::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::ByteSeq echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendStringSeq(const ::Demo::StringSeq& seq)
    {
        sendStringSeq(seq, 0);
    }
    void sendStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx)
    {
        sendStringSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendStringSeq(seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendStringSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendStringSeq(seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendStringSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendStringSeq(const ::Demo::StringSeq& seq)
    {
        return begin_sendStringSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_sendStringSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStringSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStringSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::Demo::Callback_Throughput_sendStringSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStringSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_sendStringSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStringSeq(seq, &__ctx, __del, __cookie);
    }

    void end_sendStringSeq(const ::Ice::AsyncResultPtr&);
    
private:

    void sendStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::StringSeq recvStringSeq()
    {
        return recvStringSeq(0);
    }
    ::Demo::StringSeq recvStringSeq(const ::Ice::Context& __ctx)
    {
        return recvStringSeq(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_recvStringSeq(const ::IceInternal::Function<void (const ::Demo::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvStringSeq(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvStringSeq(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvStringSeq(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_recvStringSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvStringSeq(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvStringSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvStringSeq(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_recvStringSeq(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::Demo::StringSeq __ret;
                try
                {
                    __ret = __proxy->end_recvStringSeq(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::StringSeq&)> _response;
        };
        return begin_recvStringSeq(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_recvStringSeq()
    {
        return begin_recvStringSeq(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvStringSeq(const ::Ice::Context& __ctx)
    {
        return begin_recvStringSeq(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvStringSeq(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStringSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvStringSeq(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStringSeq(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvStringSeq(const ::Demo::Callback_Throughput_recvStringSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStringSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvStringSeq(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_recvStringSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStringSeq(&__ctx, __del, __cookie);
    }

    ::Demo::StringSeq end_recvStringSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::StringSeq recvStringSeq(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_recvStringSeq(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::StringSeq echoStringSeq(const ::Demo::StringSeq& seq)
    {
        return echoStringSeq(seq, 0);
    }
    ::Demo::StringSeq echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx)
    {
        return echoStringSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::IceInternal::Function<void (const ::Demo::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoStringSeq(seq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoStringSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoStringSeq(seq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoStringSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::Demo::StringSeq __ret;
                try
                {
                    __ret = __proxy->end_echoStringSeq(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::StringSeq&)> _response;
        };
        return begin_echoStringSeq(seq, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_echoStringSeq(const ::Demo::StringSeq& seq)
    {
        return begin_echoStringSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_echoStringSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStringSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStringSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Demo::Callback_Throughput_echoStringSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStringSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoStringSeq(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_echoStringSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStringSeq(seq, &__ctx, __del, __cookie);
    }

    ::Demo::StringSeq end_echoStringSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::StringSeq echoStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_echoStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendStructSeq(const ::Demo::StringDoubleSeq& seq)
    {
        sendStructSeq(seq, 0);
    }
    void sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx)
    {
        sendStructSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendStructSeq(seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendStructSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendStructSeq(seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendStructSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq)
    {
        return begin_sendStructSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_sendStructSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStructSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStructSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Demo::Callback_Throughput_sendStructSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStructSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_sendStructSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStructSeq(seq, &__ctx, __del, __cookie);
    }

    void end_sendStructSeq(const ::Ice::AsyncResultPtr&);
    
private:

    void sendStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::StringDoubleSeq recvStructSeq()
    {
        return recvStructSeq(0);
    }
    ::Demo::StringDoubleSeq recvStructSeq(const ::Ice::Context& __ctx)
    {
        return recvStructSeq(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_recvStructSeq(const ::IceInternal::Function<void (const ::Demo::StringDoubleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvStructSeq(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvStructSeq(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvStructSeq(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_recvStructSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::StringDoubleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvStructSeq(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvStructSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvStructSeq(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_recvStructSeq(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::StringDoubleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::StringDoubleSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::Demo::StringDoubleSeq __ret;
                try
                {
                    __ret = __proxy->end_recvStructSeq(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::StringDoubleSeq&)> _response;
        };
        return begin_recvStructSeq(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_recvStructSeq()
    {
        return begin_recvStructSeq(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvStructSeq(const ::Ice::Context& __ctx)
    {
        return begin_recvStructSeq(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvStructSeq(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStructSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvStructSeq(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStructSeq(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvStructSeq(const ::Demo::Callback_Throughput_recvStructSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStructSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvStructSeq(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_recvStructSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvStructSeq(&__ctx, __del, __cookie);
    }

    ::Demo::StringDoubleSeq end_recvStructSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::StringDoubleSeq recvStructSeq(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_recvStructSeq(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::StringDoubleSeq echoStructSeq(const ::Demo::StringDoubleSeq& seq)
    {
        return echoStructSeq(seq, 0);
    }
    ::Demo::StringDoubleSeq echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx)
    {
        return echoStructSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::IceInternal::Function<void (const ::Demo::StringDoubleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoStructSeq(seq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoStructSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::StringDoubleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoStructSeq(seq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoStructSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::StringDoubleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::StringDoubleSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::Demo::StringDoubleSeq __ret;
                try
                {
                    __ret = __proxy->end_echoStructSeq(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::StringDoubleSeq&)> _response;
        };
        return begin_echoStructSeq(seq, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq)
    {
        return begin_echoStructSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_echoStructSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStructSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStructSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Demo::Callback_Throughput_echoStructSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStructSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoStructSeq(const ::Demo::StringDoubleSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_echoStructSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoStructSeq(seq, &__ctx, __del, __cookie);
    }

    ::Demo::StringDoubleSeq end_echoStructSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::StringDoubleSeq echoStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_echoStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendFixedSeq(const ::Demo::FixedSeq& seq)
    {
        sendFixedSeq(seq, 0);
    }
    void sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx)
    {
        sendFixedSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendFixedSeq(seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFixedSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendFixedSeq(seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFixedSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendFixedSeq(const ::Demo::FixedSeq& seq)
    {
        return begin_sendFixedSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_sendFixedSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFixedSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFixedSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Demo::Callback_Throughput_sendFixedSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFixedSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_sendFixedSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFixedSeq(seq, &__ctx, __del, __cookie);
    }

    void end_sendFixedSeq(const ::Ice::AsyncResultPtr&);
    
private:

    void sendFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::FixedSeq recvFixedSeq()
    {
        return recvFixedSeq(0);
    }
    ::Demo::FixedSeq recvFixedSeq(const ::Ice::Context& __ctx)
    {
        return recvFixedSeq(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_recvFixedSeq(const ::IceInternal::Function<void (const ::Demo::FixedSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvFixedSeq(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvFixedSeq(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvFixedSeq(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_recvFixedSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::FixedSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_recvFixedSeq(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_recvFixedSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recvFixedSeq(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_recvFixedSeq(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::FixedSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::FixedSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::Demo::FixedSeq __ret;
                try
                {
                    __ret = __proxy->end_recvFixedSeq(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::FixedSeq&)> _response;
        };
        return begin_recvFixedSeq(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_recvFixedSeq()
    {
        return begin_recvFixedSeq(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvFixedSeq(const ::Ice::Context& __ctx)
    {
        return begin_recvFixedSeq(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recvFixedSeq(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvFixedSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvFixedSeq(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvFixedSeq(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvFixedSeq(const ::Demo::Callback_Throughput_recvFixedSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvFixedSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recvFixedSeq(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_recvFixedSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recvFixedSeq(&__ctx, __del, __cookie);
    }

    ::Demo::FixedSeq end_recvFixedSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::FixedSeq recvFixedSeq(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_recvFixedSeq(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::FixedSeq echoFixedSeq(const ::Demo::FixedSeq& seq)
    {
        return echoFixedSeq(seq, 0);
    }
    ::Demo::FixedSeq echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx)
    {
        return echoFixedSeq(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::IceInternal::Function<void (const ::Demo::FixedSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoFixedSeq(seq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoFixedSeq(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::FixedSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_echoFixedSeq(seq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_echoFixedSeq(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::FixedSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::FixedSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
                ::Demo::FixedSeq __ret;
                try
                {
                    __ret = __proxy->end_echoFixedSeq(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::FixedSeq&)> _response;
        };
        return begin_echoFixedSeq(seq, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_echoFixedSeq(const ::Demo::FixedSeq& seq)
    {
        return begin_echoFixedSeq(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_echoFixedSeq(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoFixedSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoFixedSeq(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Demo::Callback_Throughput_echoFixedSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoFixedSeq(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_echoFixedSeq(const ::Demo::FixedSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_echoFixedSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_echoFixedSeq(seq, &__ctx, __del, __cookie);
    }

    ::Demo::FixedSeq end_echoFixedSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::FixedSeq echoFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_echoFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_Throughput_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_Throughput_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Throughput> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_secure(bool __secure) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_twoway() const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_oneway() const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_batchOneway() const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_datagram() const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_batchDatagram() const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_compress(bool __compress) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Throughput> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Throughput*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class Throughput : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool needsWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void startWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void endWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::ByteSeq recvByteSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::ByteSeq echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void sendStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::StringSeq recvStringSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::StringSeq echoStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void sendStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::StringDoubleSeq recvStructSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::StringDoubleSeq echoStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void sendFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::FixedSeq recvFixedSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::FixedSeq echoFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class Throughput : virtual public ::IceDelegate::Demo::Throughput,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool needsWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void startWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void endWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::ByteSeq recvByteSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::ByteSeq echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringSeq recvStringSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringSeq echoStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringDoubleSeq recvStructSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringDoubleSeq echoStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::FixedSeq recvFixedSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::FixedSeq echoFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class Throughput : virtual public ::IceDelegate::Demo::Throughput,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool needsWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void startWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void endWarmup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::ByteSeq recvByteSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::ByteSeq echoByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringSeq recvStringSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringSeq echoStringSeq(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringDoubleSeq recvStructSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::StringDoubleSeq echoStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::FixedSeq recvFixedSeq(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::FixedSeq echoFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class Throughput : virtual public ::Ice::Object
{
public:

    typedef ThroughputPrx ProxyType;
    typedef ThroughputPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool needsWarmup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___needsWarmup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void startWarmup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___startWarmup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void endWarmup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___endWarmup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendByteSeq(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendByteSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void recvByteSeq_async(const ::Demo::AMD_Throughput_recvByteSeqPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___recvByteSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void echoByteSeq_async(const ::Demo::AMD_Throughput_echoByteSeqPtr&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___echoByteSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendStringSeq(const ::Demo::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendStringSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::StringSeq recvStringSeq(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___recvStringSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::StringSeq echoStringSeq(const ::Demo::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___echoStringSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::StringDoubleSeq recvStructSeq(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___recvStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::StringDoubleSeq echoStructSeq(const ::Demo::StringDoubleSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___echoStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendFixedSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::FixedSeq recvFixedSeq(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___recvFixedSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::FixedSeq echoFixedSeq(const ::Demo::FixedSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___echoFixedSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Throughput& l, const Throughput& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Throughput& l, const Throughput& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_Throughput_needsWarmup : public Callback_Throughput_needsWarmup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Throughput_needsWarmup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_needsWarmup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_needsWarmupPtr
newCallback_Throughput_needsWarmup(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_needsWarmup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_needsWarmupPtr
newCallback_Throughput_needsWarmup(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_needsWarmup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_needsWarmup : public Callback_Throughput_needsWarmup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Throughput_needsWarmup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_needsWarmup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_needsWarmupPtr
newCallback_Throughput_needsWarmup(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_needsWarmup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_needsWarmupPtr
newCallback_Throughput_needsWarmup(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_needsWarmup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_startWarmup : public Callback_Throughput_startWarmup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Throughput_startWarmup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_startWarmup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_startWarmup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_startWarmup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_startWarmup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_startWarmup : public Callback_Throughput_startWarmup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Throughput_startWarmup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_startWarmup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_startWarmup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_startWarmup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_startWarmupPtr
newCallback_Throughput_startWarmup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_startWarmup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_endWarmup : public Callback_Throughput_endWarmup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Throughput_endWarmup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_endWarmup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_endWarmup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_endWarmup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_endWarmup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_endWarmup : public Callback_Throughput_endWarmup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Throughput_endWarmup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_endWarmup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_endWarmup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_endWarmup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_endWarmupPtr
newCallback_Throughput_endWarmup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_endWarmup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_sendByteSeq : public Callback_Throughput_sendByteSeq_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Throughput_sendByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendByteSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendByteSeq<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendByteSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendByteSeq<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_sendByteSeq : public Callback_Throughput_sendByteSeq_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Throughput_sendByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendByteSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendByteSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendByteSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendByteSeqPtr
newCallback_Throughput_sendByteSeq(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendByteSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_recvByteSeq : public Callback_Throughput_recvByteSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);

    CallbackNC_Throughput_recvByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_recvByteSeq(__ret, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_recvByteSeqPtr
newCallback_Throughput_recvByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvByteSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_recvByteSeqPtr
newCallback_Throughput_recvByteSeq(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvByteSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_recvByteSeq : public Callback_Throughput_recvByteSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&);

    Callback_Throughput_recvByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_recvByteSeq(__ret, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_recvByteSeqPtr
newCallback_Throughput_recvByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvByteSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_recvByteSeqPtr
newCallback_Throughput_recvByteSeq(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvByteSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_echoByteSeq : public Callback_Throughput_echoByteSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);

    CallbackNC_Throughput_echoByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_echoByteSeq(__ret, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_echoByteSeqPtr
newCallback_Throughput_echoByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoByteSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_echoByteSeqPtr
newCallback_Throughput_echoByteSeq(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoByteSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_echoByteSeq : public Callback_Throughput_echoByteSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&);

    Callback_Throughput_echoByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_echoByteSeq(__ret, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_echoByteSeqPtr
newCallback_Throughput_echoByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoByteSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_echoByteSeqPtr
newCallback_Throughput_echoByteSeq(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoByteSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_sendStringSeq : public Callback_Throughput_sendStringSeq_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Throughput_sendStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStringSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStringSeq<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStringSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStringSeq<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_sendStringSeq : public Callback_Throughput_sendStringSeq_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Throughput_sendStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStringSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStringSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStringSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendStringSeqPtr
newCallback_Throughput_sendStringSeq(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStringSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_recvStringSeq : public Callback_Throughput_recvStringSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::StringSeq&);

    CallbackNC_Throughput_recvStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringSeq __ret;
        try
        {
            __ret = __proxy->end_recvStringSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_recvStringSeqPtr
newCallback_Throughput_recvStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvStringSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_recvStringSeqPtr
newCallback_Throughput_recvStringSeq(T* instance, void (T::*cb)(const ::Demo::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvStringSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_recvStringSeq : public Callback_Throughput_recvStringSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::StringSeq&, const CT&);

    Callback_Throughput_recvStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringSeq __ret;
        try
        {
            __ret = __proxy->end_recvStringSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_recvStringSeqPtr
newCallback_Throughput_recvStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvStringSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_recvStringSeqPtr
newCallback_Throughput_recvStringSeq(T* instance, void (T::*cb)(const ::Demo::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvStringSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_echoStringSeq : public Callback_Throughput_echoStringSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::StringSeq&);

    CallbackNC_Throughput_echoStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringSeq __ret;
        try
        {
            __ret = __proxy->end_echoStringSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_echoStringSeqPtr
newCallback_Throughput_echoStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoStringSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_echoStringSeqPtr
newCallback_Throughput_echoStringSeq(T* instance, void (T::*cb)(const ::Demo::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoStringSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_echoStringSeq : public Callback_Throughput_echoStringSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::StringSeq&, const CT&);

    Callback_Throughput_echoStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringSeq __ret;
        try
        {
            __ret = __proxy->end_echoStringSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_echoStringSeqPtr
newCallback_Throughput_echoStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoStringSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_echoStringSeqPtr
newCallback_Throughput_echoStringSeq(T* instance, void (T::*cb)(const ::Demo::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoStringSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_sendStructSeq : public Callback_Throughput_sendStructSeq_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Throughput_sendStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStructSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStructSeq<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStructSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendStructSeq<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_sendStructSeq : public Callback_Throughput_sendStructSeq_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Throughput_sendStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStructSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStructSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStructSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendStructSeqPtr
newCallback_Throughput_sendStructSeq(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendStructSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_recvStructSeq : public Callback_Throughput_recvStructSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::StringDoubleSeq&);

    CallbackNC_Throughput_recvStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringDoubleSeq __ret;
        try
        {
            __ret = __proxy->end_recvStructSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_recvStructSeqPtr
newCallback_Throughput_recvStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringDoubleSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvStructSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_recvStructSeqPtr
newCallback_Throughput_recvStructSeq(T* instance, void (T::*cb)(const ::Demo::StringDoubleSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvStructSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_recvStructSeq : public Callback_Throughput_recvStructSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::StringDoubleSeq&, const CT&);

    Callback_Throughput_recvStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringDoubleSeq __ret;
        try
        {
            __ret = __proxy->end_recvStructSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_recvStructSeqPtr
newCallback_Throughput_recvStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringDoubleSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvStructSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_recvStructSeqPtr
newCallback_Throughput_recvStructSeq(T* instance, void (T::*cb)(const ::Demo::StringDoubleSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvStructSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_echoStructSeq : public Callback_Throughput_echoStructSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::StringDoubleSeq&);

    CallbackNC_Throughput_echoStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringDoubleSeq __ret;
        try
        {
            __ret = __proxy->end_echoStructSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_echoStructSeqPtr
newCallback_Throughput_echoStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringDoubleSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoStructSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_echoStructSeqPtr
newCallback_Throughput_echoStructSeq(T* instance, void (T::*cb)(const ::Demo::StringDoubleSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoStructSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_echoStructSeq : public Callback_Throughput_echoStructSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::StringDoubleSeq&, const CT&);

    Callback_Throughput_echoStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::StringDoubleSeq __ret;
        try
        {
            __ret = __proxy->end_echoStructSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_echoStructSeqPtr
newCallback_Throughput_echoStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::StringDoubleSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoStructSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_echoStructSeqPtr
newCallback_Throughput_echoStructSeq(T* instance, void (T::*cb)(const ::Demo::StringDoubleSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoStructSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_sendFixedSeq : public Callback_Throughput_sendFixedSeq_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Throughput_sendFixedSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendFixedSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendFixedSeq<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendFixedSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_sendFixedSeq<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_sendFixedSeq : public Callback_Throughput_sendFixedSeq_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Throughput_sendFixedSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendFixedSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendFixedSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendFixedSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_sendFixedSeqPtr
newCallback_Throughput_sendFixedSeq(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_sendFixedSeq<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_recvFixedSeq : public Callback_Throughput_recvFixedSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::FixedSeq&);

    CallbackNC_Throughput_recvFixedSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::FixedSeq __ret;
        try
        {
            __ret = __proxy->end_recvFixedSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_recvFixedSeqPtr
newCallback_Throughput_recvFixedSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::FixedSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvFixedSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_recvFixedSeqPtr
newCallback_Throughput_recvFixedSeq(T* instance, void (T::*cb)(const ::Demo::FixedSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_recvFixedSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_recvFixedSeq : public Callback_Throughput_recvFixedSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::FixedSeq&, const CT&);

    Callback_Throughput_recvFixedSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::FixedSeq __ret;
        try
        {
            __ret = __proxy->end_recvFixedSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_recvFixedSeqPtr
newCallback_Throughput_recvFixedSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::FixedSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvFixedSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_recvFixedSeqPtr
newCallback_Throughput_recvFixedSeq(T* instance, void (T::*cb)(const ::Demo::FixedSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_recvFixedSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_echoFixedSeq : public Callback_Throughput_echoFixedSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::FixedSeq&);

    CallbackNC_Throughput_echoFixedSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::FixedSeq __ret;
        try
        {
            __ret = __proxy->end_echoFixedSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Throughput_echoFixedSeqPtr
newCallback_Throughput_echoFixedSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::FixedSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoFixedSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_echoFixedSeqPtr
newCallback_Throughput_echoFixedSeq(T* instance, void (T::*cb)(const ::Demo::FixedSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_echoFixedSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_echoFixedSeq : public Callback_Throughput_echoFixedSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::FixedSeq&, const CT&);

    Callback_Throughput_echoFixedSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::ThroughputPrx __proxy = ::Demo::ThroughputPrx::uncheckedCast(__result->getProxy());
        ::Demo::FixedSeq __ret;
        try
        {
            __ret = __proxy->end_echoFixedSeq(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Throughput_echoFixedSeqPtr
newCallback_Throughput_echoFixedSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::FixedSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoFixedSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_echoFixedSeqPtr
newCallback_Throughput_echoFixedSeq(T* instance, void (T::*cb)(const ::Demo::FixedSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_echoFixedSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Throughput_shutdown : public Callback_Throughput_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Throughput_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Throughput_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Throughput_shutdown : public Callback_Throughput_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Throughput_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Throughput_shutdownPtr
newCallback_Throughput_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Throughput_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
