// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Printer_h__
#define __Printer_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class C;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::C>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::C*);

class Printer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Printer*);

}

}

namespace Demo
{

class C;
bool operator==(const C&, const C&);
bool operator<(const C&, const C&);
::Ice::Object* upCast(::Demo::C*);
typedef ::IceInternal::Handle< ::Demo::C> CPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::C> CPrx;
void __patch(CPtr&, const ::Ice::ObjectPtr&);

class Printer;
bool operator==(const Printer&, const Printer&);
bool operator<(const Printer&, const Printer&);
::Ice::Object* upCast(::Demo::Printer*);
typedef ::IceInternal::Handle< ::Demo::Printer> PrinterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Printer> PrinterPrx;
void __patch(PrinterPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

class PrintFailure : public ::Ice::UserException
{
public:

    PrintFailure() {}
    explicit PrintFailure(const ::std::string&);
    virtual ~PrintFailure() throw();

    virtual ::std::string ice_name() const;
    virtual PrintFailure* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static PrintFailure __PrintFailure_init;

typedef ::std::vector< ::std::string> StringSeq;

typedef ::std::map< ::std::string, ::std::string> StringDict;

enum Color
{
    red,
    green,
    blue
};

struct Structure
{
    ::std::string name;
    ::Demo::Color value;

    bool operator==(const Structure& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Structure& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Structure& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Structure& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Structure& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Structure& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Demo::Structure> StructureSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::PrintFailure>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Demo::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Demo::Structure>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Demo::Structure, S>
{
    static void write(S* __os, const ::Demo::Structure& v)
    {
        __os->write(v.name);
        __os->write(v.value);
    }
};

template<class S>
struct StreamReader< ::Demo::Structure, S>
{
    static void read(S* __is, ::Demo::Structure& v)
    {
        __is->read(v.name);
        __is->read(v.value);
    }
};

}

namespace Demo
{

class Callback_Printer_printString_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printString_Base> Callback_Printer_printStringPtr;

class Callback_Printer_printStringSequence_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printStringSequence_Base> Callback_Printer_printStringSequencePtr;

class Callback_Printer_printDictionary_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printDictionary_Base> Callback_Printer_printDictionaryPtr;

class Callback_Printer_printEnum_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printEnum_Base> Callback_Printer_printEnumPtr;

class Callback_Printer_printStruct_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printStruct_Base> Callback_Printer_printStructPtr;

class Callback_Printer_printStructSequence_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printStructSequence_Base> Callback_Printer_printStructSequencePtr;

class Callback_Printer_printClass_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_printClass_Base> Callback_Printer_printClassPtr;

class Callback_Printer_getValues_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_getValues_Base> Callback_Printer_getValuesPtr;

class Callback_Printer_throwPrintFailure_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_throwPrintFailure_Base> Callback_Printer_throwPrintFailurePtr;

class Callback_Printer_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_shutdown_Base> Callback_Printer_shutdownPtr;

}

namespace IceProxy
{

namespace Demo
{

class C : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<C> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_secure(bool __secure) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_twoway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_oneway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_batchOneway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_datagram() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_batchDatagram() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_compress(bool __compress) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_timeout(int __timeout) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Printer : virtual public ::IceProxy::Ice::Object
{
public:

    void printString(const ::std::string& message)
    {
        printString(message, 0);
    }
    void printString(const ::std::string& message, const ::Ice::Context& __ctx)
    {
        printString(message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& message, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString(message, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString(message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printString(message, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printString(const ::std::string& message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printString(message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& message)
    {
        return begin_printString(message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& message, const ::Ice::Context& __ctx)
    {
        return begin_printString(message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& message, const ::Demo::Callback_Printer_printStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printString(const ::std::string& message, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printString(message, &__ctx, __del, __cookie);
    }

    void end_printString(const ::Ice::AsyncResultPtr&);
    
private:

    void printString(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printString(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void printStringSequence(const ::Demo::StringSeq& seq)
    {
        printStringSequence(seq, 0);
    }
    void printStringSequence(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx)
    {
        printStringSequence(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printStringSequence(const ::Demo::StringSeq& seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printStringSequence(seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printStringSequence(const ::Demo::StringSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printStringSequence(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printStringSequence(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printStringSequence(seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printStringSequence(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printStringSequence(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printStringSequence(const ::Demo::StringSeq& seq)
    {
        return begin_printStringSequence(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printStringSequence(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_printStringSequence(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printStringSequence(const ::Demo::StringSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStringSequence(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStringSequence(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStringSequence(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStringSequence(const ::Demo::StringSeq& seq, const ::Demo::Callback_Printer_printStringSequencePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStringSequence(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStringSequence(const ::Demo::StringSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printStringSequencePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStringSequence(seq, &__ctx, __del, __cookie);
    }

    void end_printStringSequence(const ::Ice::AsyncResultPtr&);
    
private:

    void printStringSequence(const ::Demo::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printStringSequence(const ::Demo::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void printDictionary(const ::Demo::StringDict& dict)
    {
        printDictionary(dict, 0);
    }
    void printDictionary(const ::Demo::StringDict& dict, const ::Ice::Context& __ctx)
    {
        printDictionary(dict, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printDictionary(const ::Demo::StringDict& dict, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printDictionary(dict, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printDictionary(const ::Demo::StringDict& dict, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printDictionary(dict, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printDictionary(const ::Demo::StringDict& dict, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printDictionary(dict, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printDictionary(const ::Demo::StringDict& dict, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printDictionary(dict, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printDictionary(const ::Demo::StringDict& dict)
    {
        return begin_printDictionary(dict, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printDictionary(const ::Demo::StringDict& dict, const ::Ice::Context& __ctx)
    {
        return begin_printDictionary(dict, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printDictionary(const ::Demo::StringDict& dict, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printDictionary(dict, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printDictionary(const ::Demo::StringDict& dict, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printDictionary(dict, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printDictionary(const ::Demo::StringDict& dict, const ::Demo::Callback_Printer_printDictionaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printDictionary(dict, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printDictionary(const ::Demo::StringDict& dict, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printDictionaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printDictionary(dict, &__ctx, __del, __cookie);
    }

    void end_printDictionary(const ::Ice::AsyncResultPtr&);
    
private:

    void printDictionary(const ::Demo::StringDict&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printDictionary(const ::Demo::StringDict&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void printEnum(::Demo::Color c)
    {
        printEnum(c, 0);
    }
    void printEnum(::Demo::Color c, const ::Ice::Context& __ctx)
    {
        printEnum(c, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printEnum(::Demo::Color c, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printEnum(c, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printEnum(::Demo::Color c, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printEnum(c, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printEnum(::Demo::Color c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printEnum(c, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printEnum(::Demo::Color c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printEnum(c, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printEnum(::Demo::Color c)
    {
        return begin_printEnum(c, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printEnum(::Demo::Color c, const ::Ice::Context& __ctx)
    {
        return begin_printEnum(c, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printEnum(::Demo::Color c, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printEnum(c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printEnum(::Demo::Color c, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printEnum(c, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printEnum(::Demo::Color c, const ::Demo::Callback_Printer_printEnumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printEnum(c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printEnum(::Demo::Color c, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printEnumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printEnum(c, &__ctx, __del, __cookie);
    }

    void end_printEnum(const ::Ice::AsyncResultPtr&);
    
private:

    void printEnum(::Demo::Color, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printEnum(::Demo::Color, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void printStruct(const ::Demo::Structure& st)
    {
        printStruct(st, 0);
    }
    void printStruct(const ::Demo::Structure& st, const ::Ice::Context& __ctx)
    {
        printStruct(st, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printStruct(const ::Demo::Structure& st, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printStruct(st, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printStruct(const ::Demo::Structure& st, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printStruct(st, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printStruct(const ::Demo::Structure& st, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printStruct(st, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printStruct(const ::Demo::Structure& st, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printStruct(st, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printStruct(const ::Demo::Structure& st)
    {
        return begin_printStruct(st, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printStruct(const ::Demo::Structure& st, const ::Ice::Context& __ctx)
    {
        return begin_printStruct(st, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printStruct(const ::Demo::Structure& st, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStruct(st, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStruct(const ::Demo::Structure& st, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStruct(st, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStruct(const ::Demo::Structure& st, const ::Demo::Callback_Printer_printStructPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStruct(st, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStruct(const ::Demo::Structure& st, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printStructPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStruct(st, &__ctx, __del, __cookie);
    }

    void end_printStruct(const ::Ice::AsyncResultPtr&);
    
private:

    void printStruct(const ::Demo::Structure&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printStruct(const ::Demo::Structure&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void printStructSequence(const ::Demo::StructureSeq& seq)
    {
        printStructSequence(seq, 0);
    }
    void printStructSequence(const ::Demo::StructureSeq& seq, const ::Ice::Context& __ctx)
    {
        printStructSequence(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printStructSequence(seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printStructSequence(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printStructSequence(seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printStructSequence(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printStructSequence(const ::Demo::StructureSeq& seq)
    {
        return begin_printStructSequence(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_printStructSequence(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStructSequence(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStructSequence(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::Demo::Callback_Printer_printStructSequencePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStructSequence(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printStructSequence(const ::Demo::StructureSeq& seq, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printStructSequencePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printStructSequence(seq, &__ctx, __del, __cookie);
    }

    void end_printStructSequence(const ::Ice::AsyncResultPtr&);
    
private:

    void printStructSequence(const ::Demo::StructureSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printStructSequence(const ::Demo::StructureSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void printClass(const ::Demo::CPtr& cls)
    {
        printClass(cls, 0);
    }
    void printClass(const ::Demo::CPtr& cls, const ::Ice::Context& __ctx)
    {
        printClass(cls, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_printClass(const ::Demo::CPtr& cls, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printClass(cls, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_printClass(const ::Demo::CPtr& cls, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printClass(cls, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printClass(const ::Demo::CPtr& cls, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_printClass(cls, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_printClass(const ::Demo::CPtr& cls, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_printClass(cls, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_printClass(const ::Demo::CPtr& cls)
    {
        return begin_printClass(cls, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printClass(const ::Demo::CPtr& cls, const ::Ice::Context& __ctx)
    {
        return begin_printClass(cls, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_printClass(const ::Demo::CPtr& cls, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printClass(cls, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printClass(const ::Demo::CPtr& cls, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printClass(cls, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printClass(const ::Demo::CPtr& cls, const ::Demo::Callback_Printer_printClassPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printClass(cls, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_printClass(const ::Demo::CPtr& cls, const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_printClassPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_printClass(cls, &__ctx, __del, __cookie);
    }

    void end_printClass(const ::Ice::AsyncResultPtr&);
    
private:

    void printClass(const ::Demo::CPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_printClass(const ::Demo::CPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Demo::CPtr getValues(::std::string& str)
    {
        return getValues(str, 0);
    }
    ::Demo::CPtr getValues(::std::string& str, const ::Ice::Context& __ctx)
    {
        return getValues(str, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getValues(const ::IceInternal::Function<void (const ::Demo::CPtr&, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getValues(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getValues(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getValues(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getValues(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Demo::CPtr&, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getValues(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getValues(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getValues(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getValues(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Demo::CPtr&, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Demo::CPtr&, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::PrinterPrx __proxy = ::Demo::PrinterPrx::uncheckedCast(__result->getProxy());
                ::std::string str;
                ::Demo::CPtr __ret;
                try
                {
                    __ret = __proxy->end_getValues(str, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, str);
                }
            }
        
        private:
            
            ::std::function<void (const ::Demo::CPtr&, const ::std::string&)> _response;
        };
        return begin_getValues(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getValues()
    {
        return begin_getValues(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getValues(const ::Ice::Context& __ctx)
    {
        return begin_getValues(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getValues(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValues(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getValues(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValues(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getValues(const ::Demo::Callback_Printer_getValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValues(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getValues(const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_getValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValues(&__ctx, __del, __cookie);
    }

    ::Demo::CPtr end_getValues(::std::string& str, const ::Ice::AsyncResultPtr&);
    
private:

    ::Demo::CPtr getValues(::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getValues(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void throwPrintFailure()
    {
        throwPrintFailure(0);
    }
    void throwPrintFailure(const ::Ice::Context& __ctx)
    {
        throwPrintFailure(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwPrintFailure(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwPrintFailure(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwPrintFailure(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwPrintFailure(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwPrintFailure(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwPrintFailure(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwPrintFailure(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwPrintFailure(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwPrintFailure(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::PrinterPrx __proxy = ::Demo::PrinterPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwPrintFailure(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwPrintFailure(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwPrintFailure()
    {
        return begin_throwPrintFailure(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwPrintFailure(const ::Ice::Context& __ctx)
    {
        return begin_throwPrintFailure(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwPrintFailure(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwPrintFailure(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwPrintFailure(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwPrintFailure(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwPrintFailure(const ::Demo::Callback_Printer_throwPrintFailurePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwPrintFailure(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwPrintFailure(const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_throwPrintFailurePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwPrintFailure(&__ctx, __del, __cookie);
    }

    void end_throwPrintFailure(const ::Ice::AsyncResultPtr&);
    
private:

    void throwPrintFailure(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwPrintFailure(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_Printer_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_Printer_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Printer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_secure(bool __secure) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_twoway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_oneway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_batchOneway() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_datagram() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_batchDatagram() const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_compress(bool __compress) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Printer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Printer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class C : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Printer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void printString(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void printStringSequence(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void printDictionary(const ::Demo::StringDict&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void printEnum(::Demo::Color, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void printStruct(const ::Demo::Structure&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void printStructSequence(const ::Demo::StructureSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void printClass(const ::Demo::CPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Demo::CPtr getValues(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwPrintFailure(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class C : virtual public ::IceDelegate::Demo::C,
          virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Printer : virtual public ::IceDelegate::Demo::Printer,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void printString(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printStringSequence(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printDictionary(const ::Demo::StringDict&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printEnum(::Demo::Color, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printStruct(const ::Demo::Structure&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printStructSequence(const ::Demo::StructureSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printClass(const ::Demo::CPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::CPtr getValues(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwPrintFailure(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class C : virtual public ::IceDelegate::Demo::C,
          virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Printer : virtual public ::IceDelegate::Demo::Printer,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void printString(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printStringSequence(const ::Demo::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printDictionary(const ::Demo::StringDict&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printEnum(::Demo::Color, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printStruct(const ::Demo::Structure&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printStructSequence(const ::Demo::StructureSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void printClass(const ::Demo::CPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Demo::CPtr getValues(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwPrintFailure(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class C : virtual public ::Ice::Object
{
public:

    typedef CPrx ProxyType;
    typedef CPtr PointerType;

    C()
    {
    }

    explicit C(const ::Demo::Structure& __ice_s) :
        s(__ice_s)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Demo::Structure s;

protected:

    virtual ~C() {}

    friend class C__staticInit;
};

class C__staticInit
{
public:

    ::Demo::C _init;
};

static C__staticInit _C_init;

inline bool operator==(const C& l, const C& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const C& l, const C& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Printer : virtual public ::Ice::Object
{
public:

    typedef PrinterPrx ProxyType;
    typedef PrinterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void printString(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printString(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void printStringSequence(const ::Demo::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printStringSequence(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void printDictionary(const ::Demo::StringDict&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printDictionary(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void printEnum(::Demo::Color, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printEnum(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void printStruct(const ::Demo::Structure&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printStruct(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void printStructSequence(const ::Demo::StructureSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printStructSequence(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void printClass(const ::Demo::CPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___printClass(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Demo::CPtr getValues(::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getValues(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwPrintFailure(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwPrintFailure(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_Printer_printString : public Callback_Printer_printString_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printString<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printString : public Callback_Printer_printString_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringPtr
newCallback_Printer_printString(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printString<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_printStringSequence : public Callback_Printer_printStringSequence_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printStringSequence(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStringSequence<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStringSequence<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStringSequence<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStringSequence<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printStringSequence : public Callback_Printer_printStringSequence_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printStringSequence(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStringSequence<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStringSequence<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStringSequence<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStringSequencePtr
newCallback_Printer_printStringSequence(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStringSequence<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_printDictionary : public Callback_Printer_printDictionary_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printDictionary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printDictionary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printDictionary<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printDictionary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printDictionary<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printDictionary : public Callback_Printer_printDictionary_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printDictionary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printDictionary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printDictionary<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printDictionary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printDictionaryPtr
newCallback_Printer_printDictionary(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printDictionary<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_printEnum : public Callback_Printer_printEnum_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printEnum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printEnum<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printEnum<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printEnum<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printEnum<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printEnum : public Callback_Printer_printEnum_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printEnum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printEnum<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printEnum<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printEnum<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printEnumPtr
newCallback_Printer_printEnum(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printEnum<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_printStruct : public Callback_Printer_printStruct_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStruct<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStruct<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStruct<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStruct<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printStruct : public Callback_Printer_printStruct_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStruct<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStruct<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStruct<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStructPtr
newCallback_Printer_printStruct(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStruct<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_printStructSequence : public Callback_Printer_printStructSequence_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printStructSequence(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStructSequence<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStructSequence<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStructSequence<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printStructSequence<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printStructSequence : public Callback_Printer_printStructSequence_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printStructSequence(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStructSequence<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStructSequence<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStructSequence<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printStructSequencePtr
newCallback_Printer_printStructSequence(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printStructSequence<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_printClass : public Callback_Printer_printClass_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_printClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_printClassPtr
newCallback_Printer_printClass(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printClass<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printClassPtr
newCallback_Printer_printClass(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printClass<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_printClassPtr
newCallback_Printer_printClass(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printClass<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_printClassPtr
newCallback_Printer_printClass(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_printClass<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_printClass : public Callback_Printer_printClass_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_printClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_printClassPtr
newCallback_Printer_printClass(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printClass<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printClassPtr
newCallback_Printer_printClass(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printClass<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printClassPtr
newCallback_Printer_printClass(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printClass<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_printClassPtr
newCallback_Printer_printClass(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_printClass<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_getValues : public Callback_Printer_getValues_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Demo::CPtr&, const ::std::string&);

    CallbackNC_Printer_getValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PrinterPrx __proxy = ::Demo::PrinterPrx::uncheckedCast(__result->getProxy());
        ::std::string str;
        ::Demo::CPtr __ret;
        try
        {
            __ret = __proxy->end_getValues(str, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, str);
        }
    }

    Response response;
};

template<class T> Callback_Printer_getValuesPtr
newCallback_Printer_getValues(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::CPtr&, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_getValues<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_getValuesPtr
newCallback_Printer_getValues(T* instance, void (T::*cb)(const ::Demo::CPtr&, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_getValues<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_getValues : public Callback_Printer_getValues_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Demo::CPtr&, const ::std::string&, const CT&);

    Callback_Printer_getValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PrinterPrx __proxy = ::Demo::PrinterPrx::uncheckedCast(__result->getProxy());
        ::std::string str;
        ::Demo::CPtr __ret;
        try
        {
            __ret = __proxy->end_getValues(str, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, str, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Printer_getValuesPtr
newCallback_Printer_getValues(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Demo::CPtr&, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_getValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_getValuesPtr
newCallback_Printer_getValues(T* instance, void (T::*cb)(const ::Demo::CPtr&, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_getValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_throwPrintFailure : public Callback_Printer_throwPrintFailure_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_throwPrintFailure(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PrinterPrx __proxy = ::Demo::PrinterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwPrintFailure(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_throwPrintFailure<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_throwPrintFailure<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_throwPrintFailure<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_throwPrintFailure<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_throwPrintFailure : public Callback_Printer_throwPrintFailure_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_throwPrintFailure(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::PrinterPrx __proxy = ::Demo::PrinterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwPrintFailure(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_throwPrintFailure<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_throwPrintFailure<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_throwPrintFailure<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_throwPrintFailurePtr
newCallback_Printer_throwPrintFailure(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_throwPrintFailure<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Printer_shutdown : public Callback_Printer_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Printer_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_shutdown : public Callback_Printer_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Printer_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_shutdownPtr
newCallback_Printer_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
