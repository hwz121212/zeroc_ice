// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Callback_h__
#define __Callback_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class CallbackReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::CallbackReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::CallbackReceiver*);

class Callback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Callback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Callback*);

}

}

namespace Test
{

class CallbackReceiver;
bool operator==(const CallbackReceiver&, const CallbackReceiver&);
bool operator<(const CallbackReceiver&, const CallbackReceiver&);
::Ice::Object* upCast(::Test::CallbackReceiver*);
typedef ::IceInternal::Handle< ::Test::CallbackReceiver> CallbackReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::CallbackReceiver> CallbackReceiverPrx;
void __patch(CallbackReceiverPtr&, const ::Ice::ObjectPtr&);

class Callback;
bool operator==(const Callback&, const Callback&);
bool operator<(const Callback&, const Callback&);
::Ice::Object* upCast(::Test::Callback*);
typedef ::IceInternal::Handle< ::Test::Callback> CallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Callback> CallbackPrx;
void __patch(CallbackPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class CallbackException : public ::Ice::UserException
{
public:

    CallbackException() {}
    CallbackException(::Ice::Double, const ::std::string&);
    virtual ~CallbackException() throw();

    virtual ::std::string ice_name() const;
    virtual CallbackException* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Double someValue;
    ::std::string someString;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static CallbackException __CallbackException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::CallbackException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test
{

class AMD_CallbackReceiver_concurrentCallback : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_CallbackReceiver_concurrentCallback> AMD_CallbackReceiver_concurrentCallbackPtr;

class AMD_Callback_initiateCallback : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateCallback> AMD_Callback_initiateCallbackPtr;

class AMD_Callback_initiateCallbackEx : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateCallbackEx> AMD_Callback_initiateCallbackExPtr;

class AMD_Callback_initiateConcurrentCallback : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateConcurrentCallback> AMD_Callback_initiateConcurrentCallbackPtr;

class AMD_Callback_initiateWaitCallback : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateWaitCallback> AMD_Callback_initiateWaitCallbackPtr;

class AMD_Callback_initiateCallbackWithPayload : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateCallbackWithPayload> AMD_Callback_initiateCallbackWithPayloadPtr;

}

namespace IceAsync
{

namespace Test
{

class AMD_CallbackReceiver_concurrentCallback : public ::Test::AMD_CallbackReceiver_concurrentCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_CallbackReceiver_concurrentCallback(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

class AMD_Callback_initiateCallback : public ::Test::AMD_Callback_initiateCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateCallback(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Callback_initiateCallbackEx : public ::Test::AMD_Callback_initiateCallbackEx, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateCallbackEx(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Callback_initiateConcurrentCallback : public ::Test::AMD_Callback_initiateConcurrentCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateConcurrentCallback(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

class AMD_Callback_initiateWaitCallback : public ::Test::AMD_Callback_initiateWaitCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateWaitCallback(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Callback_initiateCallbackWithPayload : public ::Test::AMD_Callback_initiateCallbackWithPayload, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateCallbackWithPayload(::IceInternal::Incoming&);

    virtual void ice_response();
};

}

}

namespace Test
{

class Callback_CallbackReceiver_callback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_callback_Base> Callback_CallbackReceiver_callbackPtr;

class Callback_CallbackReceiver_callbackEx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_callbackEx_Base> Callback_CallbackReceiver_callbackExPtr;

class Callback_CallbackReceiver_concurrentCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_concurrentCallback_Base> Callback_CallbackReceiver_concurrentCallbackPtr;

class Callback_CallbackReceiver_waitCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_waitCallback_Base> Callback_CallbackReceiver_waitCallbackPtr;

class Callback_CallbackReceiver_callbackWithPayload_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_callbackWithPayload_Base> Callback_CallbackReceiver_callbackWithPayloadPtr;

class Callback_Callback_initiateCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateCallback_Base> Callback_Callback_initiateCallbackPtr;

class Callback_Callback_initiateCallbackEx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateCallbackEx_Base> Callback_Callback_initiateCallbackExPtr;

class Callback_Callback_initiateConcurrentCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateConcurrentCallback_Base> Callback_Callback_initiateConcurrentCallbackPtr;

class Callback_Callback_initiateWaitCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateWaitCallback_Base> Callback_Callback_initiateWaitCallbackPtr;

class Callback_Callback_initiateCallbackWithPayload_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateCallbackWithPayload_Base> Callback_Callback_initiateCallbackWithPayloadPtr;

class Callback_Callback_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_shutdown_Base> Callback_Callback_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class CallbackReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    void callback()
    {
        callback(0);
    }
    void callback(const ::Ice::Context& __ctx)
    {
        callback(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_callback(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_callback(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_callback(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callback(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_callback(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_callback(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_callback(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callback(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_callback()
    {
        return begin_callback(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::Context& __ctx)
    {
        return begin_callback(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callback(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callback(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Test::Callback_CallbackReceiver_callbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callback(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::Context& __ctx, const ::Test::Callback_CallbackReceiver_callbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callback(&__ctx, __del, __cookie);
    }

    void end_callback(const ::Ice::AsyncResultPtr&);
    
private:

    void callback(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_callback(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void callbackEx()
    {
        callbackEx(0);
    }
    void callbackEx(const ::Ice::Context& __ctx)
    {
        callbackEx(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_callbackEx(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_callbackEx(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_callbackEx(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callbackEx(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_callbackEx(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_callbackEx(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_callbackEx(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callbackEx(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_callbackEx(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::CallbackReceiverPrx __proxy = ::Test::CallbackReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_callbackEx(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_callbackEx(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_callbackEx()
    {
        return begin_callbackEx(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::Context& __ctx)
    {
        return begin_callbackEx(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackEx(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackEx(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Test::Callback_CallbackReceiver_callbackExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackEx(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::Context& __ctx, const ::Test::Callback_CallbackReceiver_callbackExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackEx(&__ctx, __del, __cookie);
    }

    void end_callbackEx(const ::Ice::AsyncResultPtr&);
    
private:

    void callbackEx(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int concurrentCallback(::Ice::Int number)
    {
        return concurrentCallback(number, 0);
    }
    ::Ice::Int concurrentCallback(::Ice::Int number, const ::Ice::Context& __ctx)
    {
        return concurrentCallback(number, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_concurrentCallback(::Ice::Int number, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_concurrentCallback(number, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_concurrentCallback(::Ice::Int number, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_concurrentCallback(number, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_concurrentCallback(number, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_concurrentCallback(number, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_concurrentCallback(::Ice::Int number, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::CallbackReceiverPrx __proxy = ::Test::CallbackReceiverPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_concurrentCallback(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_concurrentCallback(number, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number)
    {
        return begin_concurrentCallback(number, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& __ctx)
    {
        return begin_concurrentCallback(number, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_concurrentCallback(number, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_concurrentCallback(number, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Test::Callback_CallbackReceiver_concurrentCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_concurrentCallback(number, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& __ctx, const ::Test::Callback_CallbackReceiver_concurrentCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_concurrentCallback(number, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_concurrentCallback(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int concurrentCallback(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void waitCallback()
    {
        waitCallback(0);
    }
    void waitCallback(const ::Ice::Context& __ctx)
    {
        waitCallback(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_waitCallback(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_waitCallback(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_waitCallback(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_waitCallback(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_waitCallback(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_waitCallback(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_waitCallback(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_waitCallback(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_waitCallback()
    {
        return begin_waitCallback(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::Context& __ctx)
    {
        return begin_waitCallback(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitCallback(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitCallback(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Test::Callback_CallbackReceiver_waitCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitCallback(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::Context& __ctx, const ::Test::Callback_CallbackReceiver_waitCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitCallback(&__ctx, __del, __cookie);
    }

    void end_waitCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void waitCallback(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void callbackWithPayload(const ::Ice::ByteSeq& payload)
    {
        callbackWithPayload(payload, 0);
    }
    void callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& __ctx)
    {
        callbackWithPayload(payload, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_callbackWithPayload(payload, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callbackWithPayload(payload, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_callbackWithPayload(payload, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callbackWithPayload(payload, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload)
    {
        return begin_callbackWithPayload(payload, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& __ctx)
    {
        return begin_callbackWithPayload(payload, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackWithPayload(payload, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackWithPayload(payload, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Test::Callback_CallbackReceiver_callbackWithPayloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackWithPayload(payload, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& __ctx, const ::Test::Callback_CallbackReceiver_callbackWithPayloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callbackWithPayload(payload, &__ctx, __del, __cookie);
    }

    void end_callbackWithPayload(const ::Ice::AsyncResultPtr&);
    
private:

    void callbackWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_twoway() const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_oneway() const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_batchOneway() const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_datagram() const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CallbackReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CallbackReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Callback : virtual public ::IceProxy::Ice::Object
{
public:

    void initiateCallback(const ::Test::CallbackReceiverPrx& proxy)
    {
        initiateCallback(proxy, 0);
    }
    void initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        initiateCallback(proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initiateCallback(proxy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateCallback(proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initiateCallback(proxy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateCallback(proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy)
    {
        return begin_initiateCallback(proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_initiateCallback(proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallback(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallback(proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallback(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Test::Callback_Callback_initiateCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallback(proxy, &__ctx, __del, __cookie);
    }

    void end_initiateCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void initiateCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy)
    {
        initiateCallbackEx(proxy, 0);
    }
    void initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        initiateCallbackEx(proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateCallbackEx(proxy, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateCallbackEx(proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateCallbackEx(proxy, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateCallbackEx(proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::CallbackPrx __proxy = ::Test::CallbackPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_initiateCallbackEx(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_initiateCallbackEx(proxy, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy)
    {
        return begin_initiateCallbackEx(proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_initiateCallbackEx(proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackEx(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackEx(proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateCallbackExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackEx(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Test::Callback_Callback_initiateCallbackExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackEx(proxy, &__ctx, __del, __cookie);
    }

    void end_initiateCallbackEx(const ::Ice::AsyncResultPtr&);
    
private:

    void initiateCallbackEx(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy)
    {
        return initiateConcurrentCallback(number, proxy, 0);
    }
    ::Ice::Int initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        return initiateConcurrentCallback(number, proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateConcurrentCallback(number, proxy, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateConcurrentCallback(number, proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateConcurrentCallback(number, proxy, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateConcurrentCallback(number, proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::CallbackPrx __proxy = ::Test::CallbackPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_initiateConcurrentCallback(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_initiateConcurrentCallback(number, proxy, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy)
    {
        return begin_initiateConcurrentCallback(number, proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_initiateConcurrentCallback(number, proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateConcurrentCallback(number, proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateConcurrentCallback(number, proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateConcurrentCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateConcurrentCallback(number, proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Test::Callback_Callback_initiateConcurrentCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateConcurrentCallback(number, proxy, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_initiateConcurrentCallback(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int initiateConcurrentCallback(::Ice::Int, const ::Test::CallbackReceiverPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int, const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy)
    {
        initiateWaitCallback(proxy, 0);
    }
    void initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        initiateWaitCallback(proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initiateWaitCallback(proxy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateWaitCallback(proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initiateWaitCallback(proxy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateWaitCallback(proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy)
    {
        return begin_initiateWaitCallback(proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_initiateWaitCallback(proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateWaitCallback(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateWaitCallback(proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateWaitCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateWaitCallback(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Test::Callback_Callback_initiateWaitCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateWaitCallback(proxy, &__ctx, __del, __cookie);
    }

    void end_initiateWaitCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void initiateWaitCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy)
    {
        initiateCallbackWithPayload(proxy, 0);
    }
    void initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        initiateCallbackWithPayload(proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initiateCallbackWithPayload(proxy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateCallbackWithPayload(proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initiateCallbackWithPayload(proxy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateCallbackWithPayload(proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy)
    {
        return begin_initiateCallbackWithPayload(proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_initiateCallbackWithPayload(proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackWithPayload(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackWithPayload(proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateCallbackWithPayloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackWithPayload(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& __ctx, const ::Test::Callback_Callback_initiateCallbackWithPayloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateCallbackWithPayload(proxy, &__ctx, __del, __cookie);
    }

    void end_initiateCallbackWithPayload(const ::Ice::AsyncResultPtr&);
    
private:

    void initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Callback_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_Callback_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Callback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_secure(bool __secure) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_twoway() const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_oneway() const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_batchOneway() const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_datagram() const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_batchDatagram() const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_compress(bool __compress) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Callback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Callback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class CallbackReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void callback(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void callbackEx(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int concurrentCallback(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void waitCallback(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void callbackWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Callback : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void initiateCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void initiateCallbackEx(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int initiateConcurrentCallback(::Ice::Int, const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void initiateWaitCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class CallbackReceiver : virtual public ::IceDelegate::Test::CallbackReceiver,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void callback(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void callbackEx(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int concurrentCallback(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void waitCallback(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void callbackWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Callback : virtual public ::IceDelegate::Test::Callback,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void initiateCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateCallbackEx(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int initiateConcurrentCallback(::Ice::Int, const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateWaitCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class CallbackReceiver : virtual public ::IceDelegate::Test::CallbackReceiver,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void callback(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void callbackEx(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int concurrentCallback(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void waitCallback(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void callbackWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Callback : virtual public ::IceDelegate::Test::Callback,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void initiateCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateCallbackEx(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int initiateConcurrentCallback(::Ice::Int, const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateWaitCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class CallbackReceiver : virtual public ::Ice::Object
{
public:

    typedef CallbackReceiverPrx ProxyType;
    typedef CallbackReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void callback(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___callback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void callbackEx(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___callbackEx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void concurrentCallback_async(const ::Test::AMD_CallbackReceiver_concurrentCallbackPtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___concurrentCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void waitCallback(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___waitCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void callbackWithPayload(const ::Ice::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___callbackWithPayload(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const CallbackReceiver& l, const CallbackReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CallbackReceiver& l, const CallbackReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Callback : virtual public ::Ice::Object
{
public:

    typedef CallbackPrx ProxyType;
    typedef CallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void initiateCallback_async(const ::Test::AMD_Callback_initiateCallbackPtr&, const ::Test::CallbackReceiverPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initiateCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initiateCallbackEx_async(const ::Test::AMD_Callback_initiateCallbackExPtr&, const ::Test::CallbackReceiverPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initiateCallbackEx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initiateConcurrentCallback_async(const ::Test::AMD_Callback_initiateConcurrentCallbackPtr&, ::Ice::Int, const ::Test::CallbackReceiverPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initiateConcurrentCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initiateWaitCallback_async(const ::Test::AMD_Callback_initiateWaitCallbackPtr&, const ::Test::CallbackReceiverPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initiateWaitCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initiateCallbackWithPayload_async(const ::Test::AMD_Callback_initiateCallbackWithPayloadPtr&, const ::Test::CallbackReceiverPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initiateCallbackWithPayload(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Callback& l, const Callback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Callback& l, const Callback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_CallbackReceiver_callback : public Callback_CallbackReceiver_callback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_callback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallbackReceiver_callback : public Callback_CallbackReceiver_callback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_callback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CallbackReceiver_callbackEx : public Callback_CallbackReceiver_callbackEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_callbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackReceiverPrx __proxy = ::Test::CallbackReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_callbackEx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallbackReceiver_callbackEx : public Callback_CallbackReceiver_callbackEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_callbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackReceiverPrx __proxy = ::Test::CallbackReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_callbackEx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CallbackReceiver_concurrentCallback : public Callback_CallbackReceiver_concurrentCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CallbackReceiver_concurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackReceiverPrx __proxy = ::Test::CallbackReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_concurrentCallback(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_concurrentCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_concurrentCallback<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallbackReceiver_concurrentCallback : public Callback_CallbackReceiver_concurrentCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CallbackReceiver_concurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackReceiverPrx __proxy = ::Test::CallbackReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_concurrentCallback(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_concurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_concurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CallbackReceiver_waitCallback : public Callback_CallbackReceiver_waitCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_waitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallbackReceiver_waitCallback : public Callback_CallbackReceiver_waitCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_waitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CallbackReceiver_callbackWithPayload : public Callback_CallbackReceiver_callbackWithPayload_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_callbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CallbackReceiver_callbackWithPayload : public Callback_CallbackReceiver_callbackWithPayload_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_callbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Callback_initiateCallback : public Callback_Callback_initiateCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Callback_initiateCallback : public Callback_Callback_initiateCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Callback_initiateCallbackEx : public Callback_Callback_initiateCallbackEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateCallbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackPrx __proxy = ::Test::CallbackPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_initiateCallbackEx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Callback_initiateCallbackEx : public Callback_Callback_initiateCallbackEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateCallbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackPrx __proxy = ::Test::CallbackPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_initiateCallbackEx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Callback_initiateConcurrentCallback : public Callback_Callback_initiateConcurrentCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Callback_initiateConcurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackPrx __proxy = ::Test::CallbackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_initiateConcurrentCallback(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateConcurrentCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateConcurrentCallback<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Callback_initiateConcurrentCallback : public Callback_Callback_initiateConcurrentCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Callback_initiateConcurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CallbackPrx __proxy = ::Test::CallbackPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_initiateConcurrentCallback(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateConcurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateConcurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Callback_initiateWaitCallback : public Callback_Callback_initiateWaitCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateWaitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Callback_initiateWaitCallback : public Callback_Callback_initiateWaitCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateWaitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Callback_initiateCallbackWithPayload : public Callback_Callback_initiateCallbackWithPayload_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateCallbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Callback_initiateCallbackWithPayload : public Callback_Callback_initiateCallbackWithPayload_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateCallbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Callback_shutdown : public Callback_Callback_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Callback_shutdown : public Callback_Callback_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
