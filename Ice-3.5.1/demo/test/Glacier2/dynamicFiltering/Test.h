// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Glacier2/Session.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class Backend;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Backend>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Backend*);

class TestController;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::TestController>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::TestController*);

class TestSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::TestSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::TestSession*);

}

}

namespace Test
{

class Backend;
bool operator==(const Backend&, const Backend&);
bool operator<(const Backend&, const Backend&);
::Ice::Object* upCast(::Test::Backend*);
typedef ::IceInternal::Handle< ::Test::Backend> BackendPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Backend> BackendPrx;
void __patch(BackendPtr&, const ::Ice::ObjectPtr&);

class TestController;
bool operator==(const TestController&, const TestController&);
bool operator<(const TestController&, const TestController&);
::Ice::Object* upCast(::Test::TestController*);
typedef ::IceInternal::Handle< ::Test::TestController> TestControllerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::TestController> TestControllerPrx;
void __patch(TestControllerPtr&, const ::Ice::ObjectPtr&);

class TestSession;
bool operator==(const TestSession&, const TestSession&);
bool operator<(const TestSession&, const TestSession&);
::Ice::Object* upCast(::Test::TestSession*);
typedef ::IceInternal::Handle< ::Test::TestSession> TestSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::TestSession> TestSessionPrx;
void __patch(TestSessionPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

enum StateCode
{
    Initial,
    Running,
    Finished
};

struct TestToken
{
    bool expectedResult;
    ::std::string description;
    ::Test::StateCode code;
    ::Ice::Short config;
    ::Ice::Short caseIndex;
    ::std::string testReference;

    bool operator==(const TestToken& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(expectedResult != __rhs.expectedResult)
        {
            return false;
        }
        if(description != __rhs.description)
        {
            return false;
        }
        if(code != __rhs.code)
        {
            return false;
        }
        if(config != __rhs.config)
        {
            return false;
        }
        if(caseIndex != __rhs.caseIndex)
        {
            return false;
        }
        if(testReference != __rhs.testReference)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TestToken& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(expectedResult < __rhs.expectedResult)
        {
            return true;
        }
        else if(__rhs.expectedResult < expectedResult)
        {
            return false;
        }
        if(description < __rhs.description)
        {
            return true;
        }
        else if(__rhs.description < description)
        {
            return false;
        }
        if(code < __rhs.code)
        {
            return true;
        }
        else if(__rhs.code < code)
        {
            return false;
        }
        if(config < __rhs.config)
        {
            return true;
        }
        else if(__rhs.config < config)
        {
            return false;
        }
        if(caseIndex < __rhs.caseIndex)
        {
            return true;
        }
        else if(__rhs.caseIndex < caseIndex)
        {
            return false;
        }
        if(testReference < __rhs.testReference)
        {
            return true;
        }
        else if(__rhs.testReference < testReference)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TestToken& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TestToken& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TestToken& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TestToken& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::StateCode>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::TestToken>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test::TestToken, S>
{
    static void write(S* __os, const ::Test::TestToken& v)
    {
        __os->write(v.expectedResult);
        __os->write(v.description);
        __os->write(v.code);
        __os->write(v.config);
        __os->write(v.caseIndex);
        __os->write(v.testReference);
    }
};

template<class S>
struct StreamReader< ::Test::TestToken, S>
{
    static void read(S* __is, ::Test::TestToken& v)
    {
        __is->read(v.expectedResult);
        __is->read(v.description);
        __is->read(v.code);
        __is->read(v.config);
        __is->read(v.caseIndex);
        __is->read(v.testReference);
    }
};

}

namespace Test
{

class Callback_Backend_check_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backend_check_Base> Callback_Backend_checkPtr;

class Callback_Backend_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backend_shutdown_Base> Callback_Backend_shutdownPtr;

class Callback_TestController_step_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestController_step_Base> Callback_TestController_stepPtr;

class Callback_TestController_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestController_shutdown_Base> Callback_TestController_shutdownPtr;

class Callback_TestSession_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestSession_shutdown_Base> Callback_TestSession_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class Backend : virtual public ::IceProxy::Ice::Object
{
public:

    void check()
    {
        check(0);
    }
    void check(const ::Ice::Context& __ctx)
    {
        check(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_check(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_check(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_check(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_check(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_check(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_check(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_check(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_check(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_check()
    {
        return begin_check(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context& __ctx)
    {
        return begin_check(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Test::Callback_Backend_checkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context& __ctx, const ::Test::Callback_Backend_checkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(&__ctx, __del, __cookie);
    }

    void end_check(const ::Ice::AsyncResultPtr&);
    
private:

    void check(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Backend_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_Backend_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Backend> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_secure(bool __secure) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_twoway() const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_oneway() const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_batchOneway() const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_datagram() const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_batchDatagram() const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_compress(bool __compress) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Backend> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Backend*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TestController : virtual public ::IceProxy::Ice::Object
{
public:

    void step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, ::Test::TestToken& newState)
    {
        step(currentSession, currentState, newState, 0);
    }
    void step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, ::Test::TestToken& newState, const ::Ice::Context& __ctx)
    {
        step(currentSession, currentState, newState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::IceInternal::Function<void (const ::Test::TestToken&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_step(currentSession, currentState, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_step(currentSession, currentState, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::TestToken&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_step(currentSession, currentState, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_step(currentSession, currentState, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::TestToken&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::TestToken&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestControllerPrx __proxy = ::Test::TestControllerPrx::uncheckedCast(__result->getProxy());
                ::Test::TestToken newState;
                try
                {
                    __proxy->end_step(newState, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(newState);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::TestToken&)> _response;
        };
        return begin_step(currentSession, currentState, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState)
    {
        return begin_step(currentSession, currentState, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Ice::Context& __ctx)
    {
        return begin_step(currentSession, currentState, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(currentSession, currentState, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(currentSession, currentState, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Test::Callback_TestController_stepPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(currentSession, currentState, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_step(const ::Glacier2::SessionPrx& currentSession, const ::Test::TestToken& currentState, const ::Ice::Context& __ctx, const ::Test::Callback_TestController_stepPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(currentSession, currentState, &__ctx, __del, __cookie);
    }

    void end_step(::Test::TestToken& newState, const ::Ice::AsyncResultPtr&);
    
private:

    void step(const ::Glacier2::SessionPrx&, const ::Test::TestToken&, ::Test::TestToken&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_step(const ::Glacier2::SessionPrx&, const ::Test::TestToken&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_TestController_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_TestController_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TestController> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_secure(bool __secure) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_twoway() const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_oneway() const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_batchOneway() const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_datagram() const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_batchDatagram() const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_compress(bool __compress) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestController> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TestController*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TestSession : virtual public ::IceProxy::Glacier2::Session
{
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_TestSession_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_TestSession_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TestSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_twoway() const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_oneway() const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_batchOneway() const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_datagram() const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_batchDatagram() const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TestSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class Backend : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void check(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class TestController : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void step(const ::Glacier2::SessionPrx&, const ::Test::TestToken&, ::Test::TestToken&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class TestSession : virtual public ::IceDelegate::Glacier2::Session
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class Backend : virtual public ::IceDelegate::Test::Backend,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void check(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestController : virtual public ::IceDelegate::Test::TestController,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void step(const ::Glacier2::SessionPrx&, const ::Test::TestToken&, ::Test::TestToken&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestSession : virtual public ::IceDelegate::Test::TestSession,
                    virtual public ::IceDelegateM::Glacier2::Session
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class Backend : virtual public ::IceDelegate::Test::Backend,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void check(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestController : virtual public ::IceDelegate::Test::TestController,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void step(const ::Glacier2::SessionPrx&, const ::Test::TestToken&, ::Test::TestToken&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestSession : virtual public ::IceDelegate::Test::TestSession,
                    virtual public ::IceDelegateD::Glacier2::Session
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class Backend : virtual public ::Ice::Object
{
public:

    typedef BackendPrx ProxyType;
    typedef BackendPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void check(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___check(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Backend& l, const Backend& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Backend& l, const Backend& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TestController : virtual public ::Ice::Object
{
public:

    typedef TestControllerPrx ProxyType;
    typedef TestControllerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void step(const ::Glacier2::SessionPrx&, const ::Test::TestToken&, ::Test::TestToken&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___step(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TestController& l, const TestController& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TestController& l, const TestController& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TestSession : virtual public ::Glacier2::Session
{
public:

    typedef TestSessionPrx ProxyType;
    typedef TestSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TestSession& l, const TestSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TestSession& l, const TestSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_Backend_check : public Callback_Backend_check_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backend_check(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Backend_checkPtr
newCallback_Backend_check(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_check<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backend_checkPtr
newCallback_Backend_check(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_check<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backend_checkPtr
newCallback_Backend_check(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_check<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backend_checkPtr
newCallback_Backend_check(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_check<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backend_check : public Callback_Backend_check_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backend_check(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Backend_checkPtr
newCallback_Backend_check(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_check<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backend_checkPtr
newCallback_Backend_check(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_check<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backend_checkPtr
newCallback_Backend_check(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_check<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backend_checkPtr
newCallback_Backend_check(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_check<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backend_shutdown : public Callback_Backend_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backend_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backend_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backend_shutdown : public Callback_Backend_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backend_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backend_shutdownPtr
newCallback_Backend_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backend_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestController_step : public Callback_TestController_step_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::TestToken&);

    CallbackNC_TestController_step(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestControllerPrx __proxy = ::Test::TestControllerPrx::uncheckedCast(__result->getProxy());
        ::Test::TestToken newState;
        try
        {
            __proxy->end_step(newState, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(newState);
        }
    }

    Response response;
};

template<class T> Callback_TestController_stepPtr
newCallback_TestController_step(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::TestToken&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestController_step<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestController_stepPtr
newCallback_TestController_step(T* instance, void (T::*cb)(const ::Test::TestToken&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestController_step<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestController_step : public Callback_TestController_step_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::TestToken&, const CT&);

    Callback_TestController_step(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestControllerPrx __proxy = ::Test::TestControllerPrx::uncheckedCast(__result->getProxy());
        ::Test::TestToken newState;
        try
        {
            __proxy->end_step(newState, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(newState, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestController_stepPtr
newCallback_TestController_step(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::TestToken&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestController_step<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestController_stepPtr
newCallback_TestController_step(T* instance, void (T::*cb)(const ::Test::TestToken&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestController_step<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TestController_shutdown : public Callback_TestController_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestController_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestController_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestController_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestController_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestController_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestController_shutdown : public Callback_TestController_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestController_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestController_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestController_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestController_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestController_shutdownPtr
newCallback_TestController_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestController_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestSession_shutdown : public Callback_TestSession_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestSession_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestSession_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestSession_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestSession_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestSession_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestSession_shutdown : public Callback_TestSession_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestSession_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestSession_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestSession_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestSession_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestSession_shutdownPtr
newCallback_TestSession_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestSession_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
