// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>
#include <list>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class C;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::C>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::C*);

}

}

namespace Test
{

class C;
bool operator==(const C&, const C&);
bool operator<(const C&, const C&);
::Ice::Object* upCast(::Test::C*);
typedef ::IceInternal::Handle< ::Test::C> CPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::C> CPrx;
void __patch(CPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

typedef ::std::vector< ::std::string> StringSeq;

typedef std::list< ::Ice::Int> IntList;

typedef ::std::map< ::std::string, ::std::string> StringDict;

class S1 : public IceUtil::Shared
{
public:
    
    S1() {}
    explicit S1(const ::std::string& __ice_name) :
        name(__ice_name)
    {
    }
    

    ::std::string name;

    bool operator==(const S1& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const S1& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const S1& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const S1& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const S1& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const S1& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::IceUtil::Handle< ::Test::S1> S1Ptr;

struct S2
{
    bool bo;
    ::Ice::Byte by;
    ::Ice::Short sh;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::Test::StringSeq ss;
    ::Test::IntList il;
    ::Test::StringDict sd;
    ::Test::S1Ptr s;
    ::Test::CPtr cls;
    ::Ice::ObjectPrx prx;

    bool operator==(const S2& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(bo != __rhs.bo)
        {
            return false;
        }
        if(by != __rhs.by)
        {
            return false;
        }
        if(sh != __rhs.sh)
        {
            return false;
        }
        if(i != __rhs.i)
        {
            return false;
        }
        if(l != __rhs.l)
        {
            return false;
        }
        if(f != __rhs.f)
        {
            return false;
        }
        if(d != __rhs.d)
        {
            return false;
        }
        if(str != __rhs.str)
        {
            return false;
        }
        if(ss != __rhs.ss)
        {
            return false;
        }
        if(il != __rhs.il)
        {
            return false;
        }
        if(sd != __rhs.sd)
        {
            return false;
        }
        if(s != __rhs.s)
        {
            return false;
        }
        if(cls != __rhs.cls)
        {
            return false;
        }
        if(prx != __rhs.prx)
        {
            return false;
        }
        return true;
    }

    bool operator<(const S2& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(bo < __rhs.bo)
        {
            return true;
        }
        else if(__rhs.bo < bo)
        {
            return false;
        }
        if(by < __rhs.by)
        {
            return true;
        }
        else if(__rhs.by < by)
        {
            return false;
        }
        if(sh < __rhs.sh)
        {
            return true;
        }
        else if(__rhs.sh < sh)
        {
            return false;
        }
        if(i < __rhs.i)
        {
            return true;
        }
        else if(__rhs.i < i)
        {
            return false;
        }
        if(l < __rhs.l)
        {
            return true;
        }
        else if(__rhs.l < l)
        {
            return false;
        }
        if(f < __rhs.f)
        {
            return true;
        }
        else if(__rhs.f < f)
        {
            return false;
        }
        if(d < __rhs.d)
        {
            return true;
        }
        else if(__rhs.d < d)
        {
            return false;
        }
        if(str < __rhs.str)
        {
            return true;
        }
        else if(__rhs.str < str)
        {
            return false;
        }
        if(ss < __rhs.ss)
        {
            return true;
        }
        else if(__rhs.ss < ss)
        {
            return false;
        }
        if(il < __rhs.il)
        {
            return true;
        }
        else if(__rhs.il < il)
        {
            return false;
        }
        if(sd < __rhs.sd)
        {
            return true;
        }
        else if(__rhs.sd < sd)
        {
            return false;
        }
        if(s < __rhs.s)
        {
            return true;
        }
        else if(__rhs.s < s)
        {
            return false;
        }
        if(cls < __rhs.cls)
        {
            return true;
        }
        else if(__rhs.cls < cls)
        {
            return false;
        }
        if(prx < __rhs.prx)
        {
            return true;
        }
        else if(__rhs.prx < prx)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const S2& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const S2& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const S2& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const S2& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::S1Ptr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test::S1Ptr, S>
{
    static void write(S* __os, const ::Test::S1Ptr& v)
    {
        __os->write(v->name);
    }
};

template<class S>
struct StreamReader< ::Test::S1Ptr, S>
{
    static void read(S* __is, ::Test::S1Ptr& v)
    {
        __is->read(v->name);
    }
};

template<>
struct StreamableTraits< ::Test::S2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test::S2, S>
{
    static void write(S* __os, const ::Test::S2& v)
    {
        __os->write(v.bo);
        __os->write(v.by);
        __os->write(v.sh);
        __os->write(v.i);
        __os->write(v.l);
        __os->write(v.f);
        __os->write(v.d);
        __os->write(v.str);
        __os->write(v.ss);
        __os->write(v.il);
        __os->write(v.sd);
        __os->write(v.s);
        __os->write(v.cls);
        __os->write(v.prx);
    }
};

template<class S>
struct StreamReader< ::Test::S2, S>
{
    static void read(S* __is, ::Test::S2& v)
    {
        __is->read(v.bo);
        __is->read(v.by);
        __is->read(v.sh);
        __is->read(v.i);
        __is->read(v.l);
        __is->read(v.f);
        __is->read(v.d);
        __is->read(v.str);
        __is->read(v.ss);
        __is->read(v.il);
        __is->read(v.sd);
        __is->read(v.s);
        __is->read(v.cls);
        __is->read(v.prx);
    }
};

}

namespace Test
{

}

namespace IceProxy
{

namespace Test
{

class C : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<C> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_secure(bool __secure) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_twoway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_oneway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_batchOneway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_datagram() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_batchDatagram() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_compress(bool __compress) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_timeout(int __timeout) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class C : virtual public ::IceDelegate::Ice::Object
{
public:
};

}

}

namespace IceDelegateM
{

namespace Test
{

class C : virtual public ::IceDelegate::Test::C,
          virtual public ::IceDelegateM::Ice::Object
{
public:
};

}

}

namespace IceDelegateD
{

namespace Test
{

class C : virtual public ::IceDelegate::Test::C,
          virtual public ::IceDelegateD::Ice::Object
{
public:
};

}

}

namespace Test
{

class C : virtual public ::Ice::Object
{
public:

    typedef CPrx ProxyType;
    typedef CPtr PointerType;

    C()
    {
    }

    explicit C(::Ice::Int __ice_i) :
        i(__ice_i)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int i;

protected:

    virtual ~C() {}

    friend class C__staticInit;
};

class C__staticInit
{
public:

    ::Test::C _init;
};

static C__staticInit _C_init;

inline bool operator==(const C& l, const C& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const C& l, const C& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

}

#endif
