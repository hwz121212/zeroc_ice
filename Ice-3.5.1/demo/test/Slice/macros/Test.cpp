// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/Stream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Default* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Default>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Default;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Default::ice_staticId()
{
    return ::Test::Default::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Default::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Default);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Default::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Default);
}

::IceProxy::Ice::Object*
IceProxy::Test::Default::__newInstance() const
{
    return new Default;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::NoDefault* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::NoDefault>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::NoDefault;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::NoDefault::ice_staticId()
{
    return ::Test::NoDefault::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::NoDefault::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::NoDefault);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::NoDefault::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::NoDefault);
}

::IceProxy::Ice::Object*
IceProxy::Test::NoDefault::__newInstance() const
{
    return new NoDefault;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::CppOnly* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::CppOnly>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::CppOnly;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::CppOnly::ice_staticId()
{
    return ::Test::CppOnly::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::CppOnly::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::CppOnly);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::CppOnly::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::CppOnly);
}

::IceProxy::Ice::Object*
IceProxy::Test::CppOnly::__newInstance() const
{
    return new CppOnly;
}

::Ice::Object* Test::upCast(::Test::Default* p) { return p; }
::Ice::ObjectPtr
Test::Default::ice_clone() const
{
    ::Ice::Object* __p = new Default(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Default_ids[2] =
{
    "::Ice::Object",
    "::Test::Default"
};

}

bool
Test::Default::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Default_ids, __Test__Default_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Default::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Default_ids[0], &__Test__Default_ids[2]);
}

const ::std::string&
Test::Default::ice_id(const ::Ice::Current&) const
{
    return __Test__Default_ids[1];
}

const ::std::string&
Test::Default::ice_staticId()
{
    return __Test__Default_ids[1];
}

void
Test::Default::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(x);
    __os->write(y);
    __os->endWriteSlice();
}

void
Test::Default::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(x);
    __is->read(y);
    __is->endReadSlice();
}

void
Test::Default::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->write(x);
    __os->write(y);
    __os->endSlice();
}

void
Test::Default::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(x);
    __is->read(y);
    __is->endSlice();
}

namespace
{

class __F__Test__Default : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Default::ice_staticId());
        return new ::Test::Default;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Default_Ptr = new __F__Test__Default;

class __F__Test__Default__Init
{
public:

    __F__Test__Default__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Default::ice_staticId(), __F__Test__Default_Ptr);
    }

    ~__F__Test__Default__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Default::ice_staticId());
    }
};

const __F__Test__Default__Init __F__Test__Default__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Default::ice_factory()
{
    return __F__Test__Default_Ptr;
}

void 
Test::__patch(DefaultPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::DefaultPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Default::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::NoDefault* p) { return p; }
::Ice::ObjectPtr
Test::NoDefault::ice_clone() const
{
    ::Ice::Object* __p = new NoDefault(*this);
    return __p;
}

namespace
{
const ::std::string __Test__NoDefault_ids[2] =
{
    "::Ice::Object",
    "::Test::NoDefault"
};

}

bool
Test::NoDefault::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__NoDefault_ids, __Test__NoDefault_ids + 2, _s);
}

::std::vector< ::std::string>
Test::NoDefault::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__NoDefault_ids[0], &__Test__NoDefault_ids[2]);
}

const ::std::string&
Test::NoDefault::ice_id(const ::Ice::Current&) const
{
    return __Test__NoDefault_ids[1];
}

const ::std::string&
Test::NoDefault::ice_staticId()
{
    return __Test__NoDefault_ids[1];
}

void
Test::NoDefault::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(x);
    __os->write(y);
    __os->endWriteSlice();
}

void
Test::NoDefault::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(x);
    __is->read(y);
    __is->endReadSlice();
}

void
Test::NoDefault::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->write(x);
    __os->write(y);
    __os->endSlice();
}

void
Test::NoDefault::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(x);
    __is->read(y);
    __is->endSlice();
}

namespace
{

class __F__Test__NoDefault : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::NoDefault::ice_staticId());
        return new ::Test::NoDefault;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__NoDefault_Ptr = new __F__Test__NoDefault;

class __F__Test__NoDefault__Init
{
public:

    __F__Test__NoDefault__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::NoDefault::ice_staticId(), __F__Test__NoDefault_Ptr);
    }

    ~__F__Test__NoDefault__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::NoDefault::ice_staticId());
    }
};

const __F__Test__NoDefault__Init __F__Test__NoDefault__i;

}

const ::Ice::ObjectFactoryPtr&
Test::NoDefault::ice_factory()
{
    return __F__Test__NoDefault_Ptr;
}

void 
Test::__patch(NoDefaultPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::NoDefaultPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::NoDefault::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::CppOnly* p) { return p; }
::Ice::ObjectPtr
Test::CppOnly::ice_clone() const
{
    ::Ice::Object* __p = new CppOnly(*this);
    return __p;
}

namespace
{
const ::std::string __Test__CppOnly_ids[2] =
{
    "::Ice::Object",
    "::Test::CppOnly"
};

}

bool
Test::CppOnly::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__CppOnly_ids, __Test__CppOnly_ids + 2, _s);
}

::std::vector< ::std::string>
Test::CppOnly::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__CppOnly_ids[0], &__Test__CppOnly_ids[2]);
}

const ::std::string&
Test::CppOnly::ice_id(const ::Ice::Current&) const
{
    return __Test__CppOnly_ids[1];
}

const ::std::string&
Test::CppOnly::ice_staticId()
{
    return __Test__CppOnly_ids[1];
}

void
Test::CppOnly::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(lang);
    __os->write(version);
    __os->endWriteSlice();
}

void
Test::CppOnly::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(lang);
    __is->read(version);
    __is->endReadSlice();
}

void
Test::CppOnly::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->write(lang);
    __os->write(version);
    __os->endSlice();
}

void
Test::CppOnly::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(lang);
    __is->read(version);
    __is->endSlice();
}

namespace
{

class __F__Test__CppOnly : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::CppOnly::ice_staticId());
        return new ::Test::CppOnly;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__CppOnly_Ptr = new __F__Test__CppOnly;

class __F__Test__CppOnly__Init
{
public:

    __F__Test__CppOnly__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::CppOnly::ice_staticId(), __F__Test__CppOnly_Ptr);
    }

    ~__F__Test__CppOnly__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::CppOnly::ice_staticId());
    }
};

const __F__Test__CppOnly__Init __F__Test__CppOnly__i;

}

const ::Ice::ObjectFactoryPtr&
Test::CppOnly::ice_factory()
{
    return __F__Test__CppOnly_Ptr;
}

void 
Test::__patch(CppOnlyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::CppOnlyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::CppOnly::ice_staticId(), v);
    }
}
