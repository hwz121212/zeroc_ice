// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Key.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/Stream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __and__break__case_name = "case";

const ::std::string __and__char__explicit_name = "explicit";

const ::std::string __and__switch__foo_name = "foo";

}

namespace
{

const char* __and__return_name = "and::return";

struct __F__and__return : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::_cpp_and::_cpp_return();
    }
};

class __F__and__return__Init
{
public:

    __F__and__return__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::and::return", new __F__and__return);
    }

    ~__F__and__return__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::and::return");
    }
};

const __F__and__return__Init __F__and__return__i;

}

_cpp_and::_cpp_return::_cpp_return(::Ice::Int __ice__cpp_signed) :
    ::Ice::UserException(),
    _cpp_signed(__ice__cpp_signed)
{
}

_cpp_and::_cpp_return::~_cpp_return() throw()
{
}

::std::string
_cpp_and::_cpp_return::ice_name() const
{
    return __and__return_name;
}

_cpp_and::_cpp_return*
_cpp_and::_cpp_return::ice_clone() const
{
    return new _cpp_return(*this);
}

void
_cpp_and::_cpp_return::ice_throw() const
{
    throw *this;
}

void
_cpp_and::_cpp_return::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::and::return", -1, true);
    __os->write(_cpp_signed);
    __os->endWriteSlice();
}

void
_cpp_and::_cpp_return::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(_cpp_signed);
    __is->endReadSlice();
}

void
_cpp_and::_cpp_return::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice("::and::return", -1, true);
    __os->write(_cpp_signed);
    __os->endSlice();
}

void
_cpp_and::_cpp_return::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(_cpp_signed);
    __is->endSlice();
}

namespace
{

const char* __and__sizeof_name = "and::sizeof";

struct __F__and__sizeof : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::_cpp_and::_cpp_sizeof();
    }
};

class __F__and__sizeof__Init
{
public:

    __F__and__sizeof__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::and::sizeof", new __F__and__sizeof);
    }

    ~__F__and__sizeof__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::and::sizeof");
    }
};

const __F__and__sizeof__Init __F__and__sizeof__i;

}

_cpp_and::_cpp_sizeof::_cpp_sizeof(::Ice::Int __ice__cpp_signed, ::Ice::Int __ice__cpp_static, ::Ice::Int __ice__cpp_switch) :
    ::_cpp_and::_cpp_return(__ice__cpp_signed),
    _cpp_static(__ice__cpp_static),
    _cpp_switch(__ice__cpp_switch)
{
}

_cpp_and::_cpp_sizeof::~_cpp_sizeof() throw()
{
}

::std::string
_cpp_and::_cpp_sizeof::ice_name() const
{
    return __and__sizeof_name;
}

_cpp_and::_cpp_sizeof*
_cpp_and::_cpp_sizeof::ice_clone() const
{
    return new _cpp_sizeof(*this);
}

void
_cpp_and::_cpp_sizeof::ice_throw() const
{
    throw *this;
}

void
_cpp_and::_cpp_sizeof::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::and::sizeof", -1, false);
    __os->write(_cpp_static);
    __os->write(_cpp_switch);
    __os->endWriteSlice();
    ::_cpp_and::_cpp_return::__writeImpl(__os);
}

void
_cpp_and::_cpp_sizeof::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(_cpp_static);
    __is->read(_cpp_switch);
    __is->endReadSlice();
    ::_cpp_and::_cpp_return::__readImpl(__is);
}

void
_cpp_and::_cpp_sizeof::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice("::and::sizeof", -1, false);
    __os->write(_cpp_static);
    __os->write(_cpp_switch);
    __os->endSlice();
    ::_cpp_and::_cpp_return::__writeImpl(__os);
}

void
_cpp_and::_cpp_sizeof::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(_cpp_static);
    __is->read(_cpp_switch);
    __is->endSlice();
    ::_cpp_and::_cpp_return::__readImpl(__is);
}

namespace Ice
{
}

IceAsync::_cpp_and::AMD_break_case::AMD_break_case(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::_cpp_and::AMD_break_case::ice_response(::Ice::Int _cpp_try)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(_cpp_try);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(::IceProxy::_cpp_and::_cpp_break* p) { return p; }

void
::IceProxy::_cpp_and::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_break>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::_cpp_and::_cpp_break;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::_cpp_and::_cpp_break::_cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __and__break__case_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__and__break__case_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::_cpp_and::_cpp_break* __del = dynamic_cast< ::IceDelegate::_cpp_and::_cpp_break*>(__delBase.get());
            __del->_cpp_case(_cpp_catch, _cpp_try, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_break::begin_case(::Ice::Int _cpp_catch, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__and__break__case_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __and__break__case_name, __del, __cookie);
    try
    {
        __result->__prepare(__and__break__case_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(_cpp_catch);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::_cpp_and::_cpp_break::end_case(::Ice::Int& _cpp_try, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __and__break__case_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(_cpp_try);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::_cpp_and::_cpp_break::ice_staticId()
{
    return ::_cpp_and::_cpp_break::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::_cpp_and::_cpp_break::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::_cpp_and::_cpp_break);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::_cpp_and::_cpp_break::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::_cpp_and::_cpp_break);
}

::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_break::__newInstance() const
{
    return new _cpp_break;
}
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(::IceProxy::_cpp_and::_cpp_char* p) { return p; }

void
::IceProxy::_cpp_and::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_char>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::_cpp_and::_cpp_char;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::_cpp_and::_cpp_char::_cpp_explicit(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __and__char__explicit_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::_cpp_and::_cpp_char* __del = dynamic_cast< ::IceDelegate::_cpp_and::_cpp_char*>(__delBase.get());
            __del->_cpp_explicit(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_char::begin_explicit(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __and__char__explicit_name, __del, __cookie);
    try
    {
        __result->__prepare(__and__char__explicit_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::_cpp_and::_cpp_char::end_explicit(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __and__char__explicit_name);
}

const ::std::string&
IceProxy::_cpp_and::_cpp_char::ice_staticId()
{
    return ::_cpp_and::_cpp_char::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::_cpp_and::_cpp_char::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::_cpp_and::_cpp_char);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::_cpp_and::_cpp_char::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::_cpp_and::_cpp_char);
}

::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_char::__newInstance() const
{
    return new _cpp_char;
}
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(::IceProxy::_cpp_and::_cpp_switch* p) { return p; }

void
::IceProxy::_cpp_and::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_switch>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::_cpp_and::_cpp_switch;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::_cpp_and::_cpp_switch::foo(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int& _cpp_volatile, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __and__switch__foo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__and__switch__foo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::_cpp_and::_cpp_switch* __del = dynamic_cast< ::IceDelegate::_cpp_and::_cpp_switch*>(__delBase.get());
            __del->foo(_cpp_export, _cpp_volatile, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_switch::begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__and__switch__foo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __and__switch__foo_name, __del, __cookie);
    try
    {
        __result->__prepare(__and__switch__foo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(_cpp_export);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::_cpp_and::_cpp_switch::end_foo(::Ice::Int& _cpp_volatile, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __and__switch__foo_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(_cpp_volatile);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::_cpp_and::_cpp_switch::foo_async(const ::_cpp_and::AMI_switch_fooPtr& __cb, const ::_cpp_and::charPrx& _cpp_export)
{
    ::_cpp_and::Callback_switch_fooPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::_cpp_and::newCallback_switch_foo(__cb, &::_cpp_and::AMI_switch_foo::__response, &::_cpp_and::AMI_switch_foo::__exception, &::_cpp_and::AMI_switch_foo::__sent);
    }
    else
    {
         __del = ::_cpp_and::newCallback_switch_foo(__cb, &::_cpp_and::AMI_switch_foo::__response, &::_cpp_and::AMI_switch_foo::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__and__switch__foo_name);
        __ar = begin_foo(_cpp_export, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __and__switch__foo_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::_cpp_and::_cpp_switch::foo_async(const ::_cpp_and::AMI_switch_fooPtr& __cb, const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& __ctx)
{
    ::_cpp_and::Callback_switch_fooPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::_cpp_and::newCallback_switch_foo(__cb, &::_cpp_and::AMI_switch_foo::__response, &::_cpp_and::AMI_switch_foo::__exception, &::_cpp_and::AMI_switch_foo::__sent);
    }
    else
    {
         __del = ::_cpp_and::newCallback_switch_foo(__cb, &::_cpp_and::AMI_switch_foo::__response, &::_cpp_and::AMI_switch_foo::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__and__switch__foo_name);
        __ar = begin_foo(_cpp_export, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __and__switch__foo_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

const ::std::string&
IceProxy::_cpp_and::_cpp_switch::ice_staticId()
{
    return ::_cpp_and::_cpp_switch::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::_cpp_and::_cpp_switch::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::_cpp_and::_cpp_switch);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::_cpp_and::_cpp_switch::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::_cpp_and::_cpp_switch);
}

::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_switch::__newInstance() const
{
    return new _cpp_switch;
}
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(::IceProxy::_cpp_and::_cpp_do* p) { return p; }

void
::IceProxy::_cpp_and::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_do>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::_cpp_and::_cpp_do;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::_cpp_and::_cpp_do::ice_staticId()
{
    return ::_cpp_and::_cpp_do::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::_cpp_and::_cpp_do::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::_cpp_and::_cpp_do);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::_cpp_and::_cpp_do::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::_cpp_and::_cpp_do);
}

::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_do::__newInstance() const
{
    return new _cpp_do;
}

void
IceDelegateM::_cpp_and::_cpp_break::_cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __and__break__case_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(_cpp_catch);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(_cpp_try);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::_cpp_and::_cpp_char::_cpp_explicit(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __and__char__explicit_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::_cpp_and::_cpp_switch::foo(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int& _cpp_volatile, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __and__switch__foo_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(_cpp_export);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(_cpp_volatile);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::_cpp_and::_cpp_break::_cpp_case(::Ice::Int, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

void
IceDelegateD::_cpp_and::_cpp_char::_cpp_explicit(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::_cpp_and::_cpp_char* servant = dynamic_cast< ::_cpp_and::_cpp_char*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->_cpp_explicit(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __and__char__explicit_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::_cpp_and::_cpp_switch::foo(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int& _cpp_volatile, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::_cpp_and::charPrx& __p__cpp_export, ::Ice::Int& __p__cpp_volatile, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m__cpp_export(__p__cpp_export),
            _m__cpp_volatile(__p__cpp_volatile)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::_cpp_and::_cpp_switch* servant = dynamic_cast< ::_cpp_and::_cpp_switch*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->foo(_m__cpp_export, _m__cpp_volatile, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::_cpp_and::charPrx& _m__cpp_export;
        ::Ice::Int& _m__cpp_volatile;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __and__switch__foo_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(_cpp_export, _cpp_volatile, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* _cpp_and::upCast(::_cpp_and::_cpp_break* p) { return p; }

namespace
{
const ::std::string __and__break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};

}

bool
_cpp_and::_cpp_break::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__and__break_ids, __and__break_ids + 2, _s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__and__break_ids[0], &__and__break_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return __and__break_ids[1];
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    return __and__break_ids[1];
}

::Ice::DispatchStatus
_cpp_and::_cpp_break::___case(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int _cpp_catch;
    __is->read(_cpp_catch);
    __inS.endReadParams();
    ::_cpp_and::AMD_break_casePtr __cb = new IceAsync::_cpp_and::AMD_break_case(__inS);
    try
    {
        case_async(__cb, _cpp_catch, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __and__break_all[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
_cpp_and::_cpp_break::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__and__break_all, __and__break_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __and__break_all)
    {
        case 0:
        {
            return ___case(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
_cpp_and::_cpp_break::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
_cpp_and::_cpp_break::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void
_cpp_and::_cpp_break::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->endSlice();
}

void
_cpp_and::_cpp_break::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->endSlice();
}

void 
_cpp_and::__patch(breakPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::_cpp_and::breakPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::_cpp_and::_cpp_break::ice_staticId(), v);
    }
}

::Ice::Object* _cpp_and::upCast(::_cpp_and::_cpp_char* p) { return p; }

namespace
{
const ::std::string __and__char_ids[2] =
{
    "::Ice::Object",
    "::and::char"
};

}

bool
_cpp_and::_cpp_char::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__and__char_ids, __and__char_ids + 2, _s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_char::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__and__char_ids[0], &__and__char_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_char::ice_id(const ::Ice::Current&) const
{
    return __and__char_ids[1];
}

const ::std::string&
_cpp_and::_cpp_char::ice_staticId()
{
    return __and__char_ids[1];
}

::Ice::DispatchStatus
_cpp_and::_cpp_char::___explicit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    _cpp_explicit(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __and__char_all[] =
{
    "explicit",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
_cpp_and::_cpp_char::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__and__char_all, __and__char_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __and__char_all)
    {
        case 0:
        {
            return ___explicit(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
_cpp_and::_cpp_char::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
_cpp_and::_cpp_char::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void
_cpp_and::_cpp_char::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->endSlice();
}

void
_cpp_and::_cpp_char::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->endSlice();
}

void 
_cpp_and::__patch(charPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::_cpp_and::charPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::_cpp_and::_cpp_char::ice_staticId(), v);
    }
}

::Ice::Object* _cpp_and::upCast(::_cpp_and::_cpp_switch* p) { return p; }
::Ice::ObjectPtr
_cpp_and::_cpp_switch::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __and__switch_ids[2] =
{
    "::Ice::Object",
    "::and::switch"
};

}

bool
_cpp_and::_cpp_switch::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__and__switch_ids, __and__switch_ids + 2, _s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_switch::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__and__switch_ids[0], &__and__switch_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_switch::ice_id(const ::Ice::Current&) const
{
    return __and__switch_ids[1];
}

const ::std::string&
_cpp_and::_cpp_switch::ice_staticId()
{
    return __and__switch_ids[1];
}

::Ice::DispatchStatus
_cpp_and::_cpp_switch::___foo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::_cpp_and::charPrx _cpp_export;
    __is->read(_cpp_export);
    __inS.endReadParams();
    ::Ice::Int _cpp_volatile;
    foo(_cpp_export, _cpp_volatile, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(_cpp_volatile);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __and__switch_all[] =
{
    "foo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
_cpp_and::_cpp_switch::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__and__switch_all, __and__switch_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __and__switch_all)
    {
        case 0:
        {
            return ___foo(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
_cpp_and::_cpp_switch::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(_cpp_if);
    __os->endWriteSlice();
}

void
_cpp_and::_cpp_switch::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(_cpp_if);
    __is->endReadSlice();
}

void
_cpp_and::_cpp_switch::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->write(_cpp_if);
    __os->endSlice();
}

void
_cpp_and::_cpp_switch::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(_cpp_if);
    __is->endSlice();
}

void 
_cpp_and::__patch(switchPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::_cpp_and::switchPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::_cpp_and::_cpp_switch::ice_staticId(), v);
    }
}

::Ice::Object* _cpp_and::upCast(::_cpp_and::_cpp_do* p) { return p; }
::Ice::ObjectPtr
_cpp_and::_cpp_do::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __and__do_ids[5] =
{
    "::Ice::Object",
    "::and::break",
    "::and::char",
    "::and::do",
    "::and::switch"
};

}

bool
_cpp_and::_cpp_do::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__and__do_ids, __and__do_ids + 5, _s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_do::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__and__do_ids[0], &__and__do_ids[5]);
}

const ::std::string&
_cpp_and::_cpp_do::ice_id(const ::Ice::Current&) const
{
    return __and__do_ids[3];
}

const ::std::string&
_cpp_and::_cpp_do::ice_staticId()
{
    return __and__do_ids[3];
}

namespace
{
const ::std::string __and__do_all[] =
{
    "case",
    "explicit",
    "foo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
_cpp_and::_cpp_do::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__and__do_all, __and__do_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __and__do_all)
    {
        case 0:
        {
            return ___case(in, current);
        }
        case 1:
        {
            return ___explicit(in, current);
        }
        case 2:
        {
            return ___foo(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
_cpp_and::_cpp_do::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::_cpp_and::_cpp_switch::__writeImpl(__os);
}

void
_cpp_and::_cpp_do::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::_cpp_and::_cpp_switch::__readImpl(__is);
}

void
_cpp_and::_cpp_do::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, false);
    __os->endSlice();
    ::_cpp_and::_cpp_switch::__writeImpl(__os);
}

void
_cpp_and::_cpp_do::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->endSlice();
    ::_cpp_and::_cpp_switch::__readImpl(__is);
}

void 
_cpp_and::__patch(doPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::_cpp_and::doPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::_cpp_and::_cpp_do::ice_staticId(), v);
    }
}

::Ice::LocalObject* _cpp_and::upCast(::_cpp_and::_cpp_friend* p) { return p; }
