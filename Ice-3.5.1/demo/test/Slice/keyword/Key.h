// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_break>&);
::IceProxy::Ice::Object* upCast(::IceProxy::_cpp_and::_cpp_break*);

class _cpp_char;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_char>&);
::IceProxy::Ice::Object* upCast(::IceProxy::_cpp_and::_cpp_char*);

class _cpp_switch;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_switch>&);
::IceProxy::Ice::Object* upCast(::IceProxy::_cpp_and::_cpp_switch*);

class _cpp_do;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_do>&);
::IceProxy::Ice::Object* upCast(::IceProxy::_cpp_and::_cpp_do*);

}

}

namespace _cpp_and
{

class _cpp_break;
bool operator==(const _cpp_break&, const _cpp_break&);
bool operator<(const _cpp_break&, const _cpp_break&);
::Ice::Object* upCast(::_cpp_and::_cpp_break*);
typedef ::IceInternal::Handle< ::_cpp_and::_cpp_break> breakPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_break> breakPrx;
void __patch(breakPtr&, const ::Ice::ObjectPtr&);

class _cpp_char;
bool operator==(const _cpp_char&, const _cpp_char&);
bool operator<(const _cpp_char&, const _cpp_char&);
::Ice::Object* upCast(::_cpp_and::_cpp_char*);
typedef ::IceInternal::Handle< ::_cpp_and::_cpp_char> charPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_char> charPrx;
void __patch(charPtr&, const ::Ice::ObjectPtr&);

class _cpp_switch;
bool operator==(const _cpp_switch&, const _cpp_switch&);
bool operator<(const _cpp_switch&, const _cpp_switch&);
::Ice::Object* upCast(::_cpp_and::_cpp_switch*);
typedef ::IceInternal::Handle< ::_cpp_and::_cpp_switch> switchPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_switch> switchPrx;
void __patch(switchPtr&, const ::Ice::ObjectPtr&);

class _cpp_do;
bool operator==(const _cpp_do&, const _cpp_do&);
bool operator<(const _cpp_do&, const _cpp_do&);
::Ice::Object* upCast(::_cpp_and::_cpp_do*);
typedef ::IceInternal::Handle< ::_cpp_and::_cpp_do> doPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_do> doPrx;
void __patch(doPtr&, const ::Ice::ObjectPtr&);

class _cpp_friend;
bool operator==(const _cpp_friend&, const _cpp_friend&);
bool operator<(const _cpp_friend&, const _cpp_friend&);
::Ice::LocalObject* upCast(::_cpp_and::_cpp_friend*);
typedef ::IceInternal::Handle< ::_cpp_and::_cpp_friend> friendPtr;

}

namespace _cpp_and
{

enum _cpp_continue
{
    _cpp_asm
};

struct _cpp_auto
{
    ::Ice::Int _cpp_default;

    bool operator==(const _cpp_auto& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(_cpp_default != __rhs._cpp_default)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_auto& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(_cpp_default < __rhs._cpp_default)
        {
            return true;
        }
        else if(__rhs._cpp_default < _cpp_default)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_auto& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const _cpp_auto& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const _cpp_auto& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const _cpp_auto& __rhs) const
    {
        return !operator<(__rhs);
    }
};

class _cpp_delete : public IceUtil::Shared
{
public:
    
    _cpp_delete() {}
    explicit _cpp_delete(const ::std::string& __ice_else) :
        _cpp_else(__ice_else)
    {
    }
    

    ::std::string _cpp_else;

    bool operator==(const _cpp_delete& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(_cpp_else != __rhs._cpp_else)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_delete& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(_cpp_else < __rhs._cpp_else)
        {
            return true;
        }
        else if(__rhs._cpp_else < _cpp_else)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_delete& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const _cpp_delete& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const _cpp_delete& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const _cpp_delete& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::IceUtil::Handle< ::_cpp_and::_cpp_delete> deletePtr;

typedef ::std::vector< ::_cpp_and::_cpp_auto> _cpp_extern;

typedef ::std::map< ::std::string, ::_cpp_and::_cpp_auto> _cpp_for;

class _cpp_return : public ::Ice::UserException
{
public:

    _cpp_return() {}
    explicit _cpp_return(::Ice::Int);
    virtual ~_cpp_return() throw();

    virtual ::std::string ice_name() const;
    virtual _cpp_return* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int _cpp_signed;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    virtual void __writeImpl(const ::Ice::OutputStreamPtr&) const;
    virtual void __readImpl(const ::Ice::InputStreamPtr&);
};

static _cpp_return __return_init;

class _cpp_sizeof : public ::_cpp_and::_cpp_return
{
public:

    _cpp_sizeof() {}
    _cpp_sizeof(::Ice::Int, ::Ice::Int, ::Ice::Int);
    virtual ~_cpp_sizeof() throw();

    virtual ::std::string ice_name() const;
    virtual _cpp_sizeof* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int _cpp_static;
    ::Ice::Int _cpp_switch;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    virtual void __writeImpl(const ::Ice::OutputStreamPtr&) const;
    virtual void __readImpl(const ::Ice::InputStreamPtr&);
};

const ::Ice::Int _cpp_template = 0;

const ::Ice::Int _cpp_this = 0;

const ::Ice::Int _cpp_throw = 0;

const ::Ice::Int _cpp_typedef = 0;

const ::Ice::Int _cpp_typeid = 0;

const ::Ice::Int _cpp_typename = 0;

const ::Ice::Int _cpp_union = 0;

const ::Ice::Int _cpp_unsigned = 0;

const ::Ice::Int _cpp_using = 0;

const ::Ice::Int _cpp_virtual = 0;

const ::Ice::Int _cpp_while = 0;

const ::Ice::Int _cpp_xor = 0;

const ::Ice::Int _cpp_xor_eq = 0;

}

namespace Ice
{
template<>
struct StreamableTraits< ::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_auto>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::_cpp_and::_cpp_auto, S>
{
    static void write(S* __os, const ::_cpp_and::_cpp_auto& v)
    {
        __os->write(v._cpp_default);
    }
};

template<class S>
struct StreamReader< ::_cpp_and::_cpp_auto, S>
{
    static void read(S* __is, ::_cpp_and::_cpp_auto& v)
    {
        __is->read(v._cpp_default);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::deletePtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::_cpp_and::deletePtr, S>
{
    static void write(S* __os, const ::_cpp_and::deletePtr& v)
    {
        __os->write(v->_cpp_else);
    }
};

template<class S>
struct StreamReader< ::_cpp_and::deletePtr, S>
{
    static void read(S* __is, ::_cpp_and::deletePtr& v)
    {
        __is->read(v->_cpp_else);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_return>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_sizeof>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace _cpp_and
{

class AMD_break_case : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::_cpp_and::AMD_break_case> AMD_break_casePtr;

class AMI_switch_foo : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(::Ice::Int) = 0;

    void __response(::Ice::Int _cpp_volatile)
    {
        ice_response(_cpp_volatile);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::_cpp_and::AMI_switch_foo> AMI_switch_fooPtr;

}

namespace IceAsync
{

namespace _cpp_and
{

class AMD_break_case : public ::_cpp_and::AMD_break_case, public ::IceInternal::IncomingAsync
{
public:

    AMD_break_case(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

}

}

namespace _cpp_and
{

class Callback_break_case_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_case_Base> Callback_break_casePtr;

class Callback_char_explicit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_char_explicit_Base> Callback_char_explicitPtr;

class Callback_switch_foo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_switch_foo_Base> Callback_switch_fooPtr;

}

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break : virtual public ::IceProxy::Ice::Object
{
public:

    void _cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try)
    {
        _cpp_case(_cpp_catch, _cpp_try, 0);
    }
    void _cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Context& __ctx)
    {
        _cpp_case(_cpp_catch, _cpp_try, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_case(::Ice::Int _cpp_catch, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_case(_cpp_catch, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_case(::Ice::Int _cpp_catch, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_case(_cpp_catch, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_case(_cpp_catch, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_case(_cpp_catch, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_case(::Ice::Int _cpp_catch, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::_cpp_and::breakPrx __proxy = ::_cpp_and::breakPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int _cpp_try;
                try
                {
                    __proxy->end_case(_cpp_try, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(_cpp_try);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_case(_cpp_catch, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch)
    {
        return begin_case(_cpp_catch, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& __ctx)
    {
        return begin_case(_cpp_catch, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_case(_cpp_catch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_case(_cpp_catch, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::_cpp_and::Callback_break_casePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_case(_cpp_catch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& __ctx, const ::_cpp_and::Callback_break_casePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_case(_cpp_catch, &__ctx, __del, __cookie);
    }

    void end_case(::Ice::Int& _cpp_try, const ::Ice::AsyncResultPtr&);
    
private:

    void _cpp_case(::Ice::Int, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_case(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_secure(bool __secure) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_twoway() const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_oneway() const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_batchOneway() const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_datagram() const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_batchDatagram() const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_compress(bool __compress) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_timeout(int __timeout) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_break> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<_cpp_break*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class _cpp_char : virtual public ::IceProxy::Ice::Object
{
public:

    void _cpp_explicit()
    {
        _cpp_explicit(0);
    }
    void _cpp_explicit(const ::Ice::Context& __ctx)
    {
        _cpp_explicit(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_explicit(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_explicit(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_explicit(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_explicit(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_explicit(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_explicit(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_explicit(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_explicit(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_explicit()
    {
        return begin_explicit(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::Context& __ctx)
    {
        return begin_explicit(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_explicit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_explicit(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::_cpp_and::Callback_char_explicitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_explicit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::Context& __ctx, const ::_cpp_and::Callback_char_explicitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_explicit(&__ctx, __del, __cookie);
    }

    void end_explicit(const ::Ice::AsyncResultPtr&);
    
private:

    void _cpp_explicit(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_secure(bool __secure) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_twoway() const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_oneway() const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_batchOneway() const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_datagram() const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_batchDatagram() const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_compress(bool __compress) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_timeout(int __timeout) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_char> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<_cpp_char*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class _cpp_switch : virtual public ::IceProxy::Ice::Object
{
public:

    void foo(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int& _cpp_volatile)
    {
        foo(_cpp_export, _cpp_volatile, 0);
    }
    void foo(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int& _cpp_volatile, const ::Ice::Context& __ctx)
    {
        foo(_cpp_export, _cpp_volatile, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_foo(_cpp_export, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_foo(_cpp_export, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_foo(_cpp_export, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_foo(_cpp_export, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::_cpp_and::switchPrx __proxy = ::_cpp_and::switchPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int _cpp_volatile;
                try
                {
                    __proxy->end_foo(_cpp_volatile, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(_cpp_volatile);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_foo(_cpp_export, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export)
    {
        return begin_foo(_cpp_export, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& __ctx)
    {
        return begin_foo(_cpp_export, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_foo(_cpp_export, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_foo(_cpp_export, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::_cpp_and::Callback_switch_fooPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_foo(_cpp_export, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& __ctx, const ::_cpp_and::Callback_switch_fooPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_foo(_cpp_export, &__ctx, __del, __cookie);
    }

    void end_foo(::Ice::Int& _cpp_volatile, const ::Ice::AsyncResultPtr&);
    
private:

    void foo(const ::_cpp_and::charPrx&, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool foo_async(const ::_cpp_and::AMI_switch_fooPtr&, const ::_cpp_and::charPrx&);
    bool foo_async(const ::_cpp_and::AMI_switch_fooPtr&, const ::_cpp_and::charPrx&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_secure(bool __secure) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_twoway() const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_oneway() const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_batchOneway() const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_datagram() const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_batchDatagram() const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_compress(bool __compress) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_timeout(int __timeout) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_switch> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<_cpp_switch*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class _cpp_do : virtual public ::IceProxy::_cpp_and::_cpp_switch,
                virtual public ::IceProxy::_cpp_and::_cpp_char,
                virtual public ::IceProxy::_cpp_and::_cpp_break
{
public:
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_secure(bool __secure) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_twoway() const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_oneway() const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_batchOneway() const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_datagram() const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_batchDatagram() const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_compress(bool __compress) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_timeout(int __timeout) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<_cpp_do> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<_cpp_do*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace _cpp_and
{

class _cpp_break : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void _cpp_case(::Ice::Int, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class _cpp_char : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void _cpp_explicit(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class _cpp_switch : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void foo(const ::_cpp_and::charPrx&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class _cpp_do : virtual public ::IceDelegate::_cpp_and::_cpp_switch,
                virtual public ::IceDelegate::_cpp_and::_cpp_char,
                virtual public ::IceDelegate::_cpp_and::_cpp_break
{
public:
};

}

}

namespace IceDelegateM
{

namespace _cpp_and
{

class _cpp_break : virtual public ::IceDelegate::_cpp_and::_cpp_break,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void _cpp_case(::Ice::Int, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class _cpp_char : virtual public ::IceDelegate::_cpp_and::_cpp_char,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void _cpp_explicit(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class _cpp_switch : virtual public ::IceDelegate::_cpp_and::_cpp_switch,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void foo(const ::_cpp_and::charPrx&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class _cpp_do : virtual public ::IceDelegate::_cpp_and::_cpp_do,
                virtual public ::IceDelegateM::_cpp_and::_cpp_switch,
                virtual public ::IceDelegateM::_cpp_and::_cpp_char,
                virtual public ::IceDelegateM::_cpp_and::_cpp_break
{
public:
};

}

}

namespace IceDelegateD
{

namespace _cpp_and
{

class _cpp_break : virtual public ::IceDelegate::_cpp_and::_cpp_break,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void _cpp_case(::Ice::Int, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class _cpp_char : virtual public ::IceDelegate::_cpp_and::_cpp_char,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void _cpp_explicit(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class _cpp_switch : virtual public ::IceDelegate::_cpp_and::_cpp_switch,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void foo(const ::_cpp_and::charPrx&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class _cpp_do : virtual public ::IceDelegate::_cpp_and::_cpp_do,
                virtual public ::IceDelegateD::_cpp_and::_cpp_switch,
                virtual public ::IceDelegateD::_cpp_and::_cpp_char,
                virtual public ::IceDelegateD::_cpp_and::_cpp_break
{
public:
};

}

}

namespace _cpp_and
{

class _cpp_break : virtual public ::Ice::Object
{
public:

    typedef breakPrx ProxyType;
    typedef breakPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void case_async(const ::_cpp_and::AMD_break_casePtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___case(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    virtual void __writeImpl(const ::Ice::OutputStreamPtr&) const;
    virtual void __readImpl(const ::Ice::InputStreamPtr&);
};

inline bool operator==(const _cpp_break& l, const _cpp_break& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const _cpp_break& l, const _cpp_break& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class _cpp_char : virtual public ::Ice::Object
{
public:

    typedef charPrx ProxyType;
    typedef charPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void _cpp_explicit(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___explicit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    virtual void __writeImpl(const ::Ice::OutputStreamPtr&) const;
    virtual void __readImpl(const ::Ice::InputStreamPtr&);
};

inline bool operator==(const _cpp_char& l, const _cpp_char& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const _cpp_char& l, const _cpp_char& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class _cpp_switch : virtual public ::Ice::Object
{
public:

    typedef switchPrx ProxyType;
    typedef switchPtr PointerType;

    _cpp_switch()
    {
    }

    explicit _cpp_switch(::Ice::Int __ice_if) :
        _cpp_if(__ice_if)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void foo(const ::_cpp_and::charPrx&, ::Ice::Int&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___foo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    virtual void __writeImpl(const ::Ice::OutputStreamPtr&) const;
    virtual void __readImpl(const ::Ice::InputStreamPtr&);

public:

    ::Ice::Int _cpp_if;
};

inline bool operator==(const _cpp_switch& l, const _cpp_switch& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const _cpp_switch& l, const _cpp_switch& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class _cpp_do : public ::_cpp_and::_cpp_switch,
                virtual public ::_cpp_and::_cpp_char,
                virtual public ::_cpp_and::_cpp_break
{
public:

    typedef doPrx ProxyType;
    typedef doPtr PointerType;

    _cpp_do()
    {
    }

    explicit _cpp_do(::Ice::Int __ice_if) :
        ::_cpp_and::_cpp_switch(__ice_if)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    virtual void __writeImpl(const ::Ice::OutputStreamPtr&) const;
    virtual void __readImpl(const ::Ice::InputStreamPtr&);
};

inline bool operator==(const _cpp_do& l, const _cpp_do& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const _cpp_do& l, const _cpp_do& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class _cpp_friend : virtual public ::Ice::LocalObject
{
public:

    typedef friendPtr PointerType;

    virtual ::_cpp_and::_cpp_auto _cpp_goto(::_cpp_and::_cpp_continue, const ::_cpp_and::_cpp_auto&, const ::_cpp_and::deletePtr&, const ::_cpp_and::switchPtr&, const ::_cpp_and::doPtr&, const ::_cpp_and::breakPrx&, const ::_cpp_and::charPrx&, const ::_cpp_and::switchPrx&, const ::_cpp_and::doPrx&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int) = 0;
};

inline bool operator==(const _cpp_friend& l, const _cpp_friend& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const _cpp_friend& l, const _cpp_friend& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

}

namespace _cpp_and
{

template<class T>
class CallbackNC_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::_cpp_and::breakPrx __proxy = ::_cpp_and::breakPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int _cpp_try;
        try
        {
            __proxy->end_case(_cpp_try, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(_cpp_try);
        }
    }

    Response response;
};

template<class T> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::_cpp_and::breakPrx __proxy = ::_cpp_and::breakPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int _cpp_try;
        try
        {
            __proxy->end_case(_cpp_try, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(_cpp_try, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_char_explicit : public Callback_char_explicit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_char_explicit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_char_explicit : public Callback_char_explicit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_char_explicit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_switch_foo : public Callback_switch_foo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_switch_foo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::_cpp_and::switchPrx __proxy = ::_cpp_and::switchPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int _cpp_volatile;
        try
        {
            __proxy->end_foo(_cpp_volatile, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(_cpp_volatile);
        }
    }

    Response response;
};

template<class T> Callback_switch_fooPtr
newCallback_switch_foo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_switch_fooPtr
newCallback_switch_foo(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_switch_foo : public Callback_switch_foo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_switch_foo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::_cpp_and::switchPrx __proxy = ::_cpp_and::switchPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int _cpp_volatile;
        try
        {
            __proxy->end_foo(_cpp_volatile, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(_cpp_volatile, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_switch_fooPtr
newCallback_switch_foo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_switch_fooPtr
newCallback_switch_foo(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
