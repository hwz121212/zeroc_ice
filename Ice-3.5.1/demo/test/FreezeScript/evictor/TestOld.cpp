// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TestOld.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <TestOld.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MainObject* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MainObject>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MainObject;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MainObject::ice_staticId()
{
    return ::Test::MainObject::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MainObject::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MainObject);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MainObject::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MainObject);
}

::IceProxy::Ice::Object*
IceProxy::Test::MainObject::__newInstance() const
{
    return new MainObject;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::DerivedMainObject* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::DerivedMainObject>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::DerivedMainObject;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::DerivedMainObject::ice_staticId()
{
    return ::Test::DerivedMainObject::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::DerivedMainObject::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::DerivedMainObject);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::DerivedMainObject::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::DerivedMainObject);
}

::IceProxy::Ice::Object*
IceProxy::Test::DerivedMainObject::__newInstance() const
{
    return new DerivedMainObject;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::FacetObject* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::FacetObject>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::FacetObject;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::FacetObject::ice_staticId()
{
    return ::Test::FacetObject::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::FacetObject::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::FacetObject);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::FacetObject::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::FacetObject);
}

::IceProxy::Ice::Object*
IceProxy::Test::FacetObject::__newInstance() const
{
    return new FacetObject;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::DerivedFacetObject* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::DerivedFacetObject>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::DerivedFacetObject;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::DerivedFacetObject::ice_staticId()
{
    return ::Test::DerivedFacetObject::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::DerivedFacetObject::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::DerivedFacetObject);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::DerivedFacetObject::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::DerivedFacetObject);
}

::IceProxy::Ice::Object*
IceProxy::Test::DerivedFacetObject::__newInstance() const
{
    return new DerivedFacetObject;
}

::Ice::Object* Test::upCast(::Test::MainObject* p) { return p; }
::Ice::ObjectPtr
Test::MainObject::ice_clone() const
{
    ::Ice::Object* __p = new MainObject(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MainObject_ids[2] =
{
    "::Ice::Object",
    "::Test::MainObject"
};

}

bool
Test::MainObject::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MainObject_ids, __Test__MainObject_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MainObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MainObject_ids[0], &__Test__MainObject_ids[2]);
}

const ::std::string&
Test::MainObject::ice_id(const ::Ice::Current&) const
{
    return __Test__MainObject_ids[1];
}

const ::std::string&
Test::MainObject::ice_staticId()
{
    return __Test__MainObject_ids[1];
}

void
Test::MainObject::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(boolToString);
    __os->write(byteToShort);
    __os->write(shortToByte);
    __os->write(intToShort);
    __os->write(longToInt);
    __os->write(floatToString);
    __os->write(doubleToFloat);
    __os->write(stringToEnum);
    __os->write(renamed);
    __os->endWriteSlice();
}

void
Test::MainObject::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(boolToString);
    __is->read(byteToShort);
    __is->read(shortToByte);
    __is->read(intToShort);
    __is->read(longToInt);
    __is->read(floatToString);
    __is->read(doubleToFloat);
    __is->read(stringToEnum);
    __is->read(renamed);
    __is->endReadSlice();
}

namespace
{

class __F__Test__MainObject : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MainObject::ice_staticId());
        return new ::Test::MainObject;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MainObject_Ptr = new __F__Test__MainObject;

class __F__Test__MainObject__Init
{
public:

    __F__Test__MainObject__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MainObject::ice_staticId(), __F__Test__MainObject_Ptr);
    }

    ~__F__Test__MainObject__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MainObject::ice_staticId());
    }
};

const __F__Test__MainObject__Init __F__Test__MainObject__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MainObject::ice_factory()
{
    return __F__Test__MainObject_Ptr;
}

void 
Test::__patch(MainObjectPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MainObjectPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MainObject::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::DerivedMainObject* p) { return p; }
::Ice::ObjectPtr
Test::DerivedMainObject::ice_clone() const
{
    ::Ice::Object* __p = new DerivedMainObject(*this);
    return __p;
}

namespace
{
const ::std::string __Test__DerivedMainObject_ids[3] =
{
    "::Ice::Object",
    "::Test::DerivedMainObject",
    "::Test::MainObject"
};

}

bool
Test::DerivedMainObject::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__DerivedMainObject_ids, __Test__DerivedMainObject_ids + 3, _s);
}

::std::vector< ::std::string>
Test::DerivedMainObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__DerivedMainObject_ids[0], &__Test__DerivedMainObject_ids[3]);
}

const ::std::string&
Test::DerivedMainObject::ice_id(const ::Ice::Current&) const
{
    return __Test__DerivedMainObject_ids[1];
}

const ::std::string&
Test::DerivedMainObject::ice_staticId()
{
    return __Test__DerivedMainObject_ids[1];
}

void
Test::DerivedMainObject::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(name);
    __os->endWriteSlice();
    ::Test::MainObject::__writeImpl(__os);
}

void
Test::DerivedMainObject::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
    ::Test::MainObject::__readImpl(__is);
}

namespace
{

class __F__Test__DerivedMainObject : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::DerivedMainObject::ice_staticId());
        return new ::Test::DerivedMainObject;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__DerivedMainObject_Ptr = new __F__Test__DerivedMainObject;

class __F__Test__DerivedMainObject__Init
{
public:

    __F__Test__DerivedMainObject__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::DerivedMainObject::ice_staticId(), __F__Test__DerivedMainObject_Ptr);
    }

    ~__F__Test__DerivedMainObject__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::DerivedMainObject::ice_staticId());
    }
};

const __F__Test__DerivedMainObject__Init __F__Test__DerivedMainObject__i;

}

const ::Ice::ObjectFactoryPtr&
Test::DerivedMainObject::ice_factory()
{
    return __F__Test__DerivedMainObject_Ptr;
}

void 
Test::__patch(DerivedMainObjectPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::DerivedMainObjectPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::DerivedMainObject::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::FacetObject* p) { return p; }
::Ice::ObjectPtr
Test::FacetObject::ice_clone() const
{
    ::Ice::Object* __p = new FacetObject(*this);
    return __p;
}

namespace
{
const ::std::string __Test__FacetObject_ids[2] =
{
    "::Ice::Object",
    "::Test::FacetObject"
};

}

bool
Test::FacetObject::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__FacetObject_ids, __Test__FacetObject_ids + 2, _s);
}

::std::vector< ::std::string>
Test::FacetObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__FacetObject_ids[0], &__Test__FacetObject_ids[2]);
}

const ::std::string&
Test::FacetObject::ice_id(const ::Ice::Current&) const
{
    return __Test__FacetObject_ids[1];
}

const ::std::string&
Test::FacetObject::ice_staticId()
{
    return __Test__FacetObject_ids[1];
}

void
Test::FacetObject::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(doubleToString);
    __os->endWriteSlice();
}

void
Test::FacetObject::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(doubleToString);
    __is->endReadSlice();
}

namespace
{

class __F__Test__FacetObject : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::FacetObject::ice_staticId());
        return new ::Test::FacetObject;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__FacetObject_Ptr = new __F__Test__FacetObject;

class __F__Test__FacetObject__Init
{
public:

    __F__Test__FacetObject__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::FacetObject::ice_staticId(), __F__Test__FacetObject_Ptr);
    }

    ~__F__Test__FacetObject__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::FacetObject::ice_staticId());
    }
};

const __F__Test__FacetObject__Init __F__Test__FacetObject__i;

}

const ::Ice::ObjectFactoryPtr&
Test::FacetObject::ice_factory()
{
    return __F__Test__FacetObject_Ptr;
}

void 
Test::__patch(FacetObjectPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::FacetObjectPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::FacetObject::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::DerivedFacetObject* p) { return p; }
::Ice::ObjectPtr
Test::DerivedFacetObject::ice_clone() const
{
    ::Ice::Object* __p = new DerivedFacetObject(*this);
    return __p;
}

namespace
{
const ::std::string __Test__DerivedFacetObject_ids[3] =
{
    "::Ice::Object",
    "::Test::DerivedFacetObject",
    "::Test::FacetObject"
};

}

bool
Test::DerivedFacetObject::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__DerivedFacetObject_ids, __Test__DerivedFacetObject_ids + 3, _s);
}

::std::vector< ::std::string>
Test::DerivedFacetObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__DerivedFacetObject_ids[0], &__Test__DerivedFacetObject_ids[3]);
}

const ::std::string&
Test::DerivedFacetObject::ice_id(const ::Ice::Current&) const
{
    return __Test__DerivedFacetObject_ids[1];
}

const ::std::string&
Test::DerivedFacetObject::ice_staticId()
{
    return __Test__DerivedFacetObject_ids[1];
}

void
Test::DerivedFacetObject::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(count);
    __os->endWriteSlice();
    ::Test::FacetObject::__writeImpl(__os);
}

void
Test::DerivedFacetObject::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(count);
    __is->endReadSlice();
    ::Test::FacetObject::__readImpl(__is);
}

namespace
{

class __F__Test__DerivedFacetObject : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::DerivedFacetObject::ice_staticId());
        return new ::Test::DerivedFacetObject;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__DerivedFacetObject_Ptr = new __F__Test__DerivedFacetObject;

class __F__Test__DerivedFacetObject__Init
{
public:

    __F__Test__DerivedFacetObject__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::DerivedFacetObject::ice_staticId(), __F__Test__DerivedFacetObject_Ptr);
    }

    ~__F__Test__DerivedFacetObject__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::DerivedFacetObject::ice_staticId());
    }
};

const __F__Test__DerivedFacetObject__Init __F__Test__DerivedFacetObject__i;

}

const ::Ice::ObjectFactoryPtr&
Test::DerivedFacetObject::ice_factory()
{
    return __F__Test__DerivedFacetObject_Ptr;
}

void 
Test::__patch(DerivedFacetObjectPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::DerivedFacetObjectPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::DerivedFacetObject::ice_staticId(), v);
    }
}
