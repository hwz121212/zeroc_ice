// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TestOld.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <TestOld.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::C* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::D* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::D;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::D::ice_staticId()
{
    return ::Test::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::D::__newInstance() const
{
    return new D;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::F* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::F>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::F;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::F::ice_staticId()
{
    return ::Test::F::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::F::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::F);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::F::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::F);
}

::IceProxy::Ice::Object*
IceProxy::Test::F::__newInstance() const
{
    return new F;
}

::Ice::Object* Test::upCast(::Test::C* p) { return p; }
::Ice::ObjectPtr
Test::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__C_ids[2] =
{
    "::Ice::Object",
    "::Test::C"
};

}

bool
Test::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__C_ids, __Test__C_ids + 2, _s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__C_ids[0], &__Test__C_ids[2]);
}

const ::std::string&
Test::C::ice_id(const ::Ice::Current&) const
{
    return __Test__C_ids[1];
}

const ::std::string&
Test::C::ice_staticId()
{
    return __Test__C_ids[1];
}

void
Test::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(boolToStringDict);
    __os->endWriteSlice();
}

void
Test::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(boolToStringDict);
    __is->endReadSlice();
}

namespace
{

class __F__Test__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::C::ice_staticId());
        return new ::Test::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__C_Ptr = new __F__Test__C;

class __F__Test__C__Init
{
public:

    __F__Test__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::C::ice_staticId(), __F__Test__C_Ptr);
    }

    ~__F__Test__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::C::ice_staticId());
    }
};

const __F__Test__C__Init __F__Test__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::C::ice_factory()
{
    return __F__Test__C_Ptr;
}

void 
Test::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::D* p) { return p; }
::Ice::ObjectPtr
Test::D::ice_clone() const
{
    ::Ice::Object* __p = new D(*this);
    return __p;
}

namespace
{
const ::std::string __Test__D_ids[3] =
{
    "::Ice::Object",
    "::Test::C",
    "::Test::D"
};

}

bool
Test::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__D_ids, __Test__D_ids + 3, _s);
}

::std::vector< ::std::string>
Test::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__D_ids[0], &__Test__D_ids[3]);
}

const ::std::string&
Test::D::ice_id(const ::Ice::Current&) const
{
    return __Test__D_ids[2];
}

const ::std::string&
Test::D::ice_staticId()
{
    return __Test__D_ids[2];
}

void
Test::D::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::D::__usesGC()
{
    return true;
}

void
Test::D::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(obj)
    {
        obj->__addObject(_c);
    }
}

void
Test::D::__gcClear()
{
    if(obj)
    {
        if(obj->__usesGC())
        {
            obj->__decRefUnsafe();
            obj.__clearHandleUnsafe();
        }
        else
        {
            obj = 0;
        }
    }
}

void
Test::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(stringToByteSeq);
    __os->write(obj);
    __os->endWriteSlice();
    ::Test::C::__writeImpl(__os);
}

void
Test::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(stringToByteSeq);
    __is->read(obj);
    __is->endReadSlice();
    ::Test::C::__readImpl(__is);
}

namespace
{

class __F__Test__D : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::D::ice_staticId());
        return new ::Test::D;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__D_Ptr = new __F__Test__D;

class __F__Test__D__Init
{
public:

    __F__Test__D__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::D::ice_staticId(), __F__Test__D_Ptr);
    }

    ~__F__Test__D__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::D::ice_staticId());
    }
};

const __F__Test__D__Init __F__Test__D__i;

}

const ::Ice::ObjectFactoryPtr&
Test::D::ice_factory()
{
    return __F__Test__D_Ptr;
}

void 
Test::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::D::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::F* p) { return p; }
::Ice::ObjectPtr
Test::F::ice_clone() const
{
    ::Ice::Object* __p = new F(*this);
    return __p;
}

namespace
{
const ::std::string __Test__F_ids[2] =
{
    "::Ice::Object",
    "::Test::F"
};

}

bool
Test::F::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__F_ids, __Test__F_ids + 2, _s);
}

::std::vector< ::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__F_ids[0], &__Test__F_ids[2]);
}

const ::std::string&
Test::F::ice_id(const ::Ice::Current&) const
{
    return __Test__F_ids[1];
}

const ::std::string&
Test::F::ice_staticId()
{
    return __Test__F_ids[1];
}

void
Test::F::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(stringToEnumSeq);
    __os->endWriteSlice();
}

void
Test::F::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(stringToEnumSeq);
    __is->endReadSlice();
}

namespace
{

class __F__Test__F : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::F::ice_staticId());
        return new ::Test::F;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__F_Ptr = new __F__Test__F;

class __F__Test__F__Init
{
public:

    __F__Test__F__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::F::ice_staticId(), __F__Test__F_Ptr);
    }

    ~__F__Test__F__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::F::ice_staticId());
    }
};

const __F__Test__F__Init __F__Test__F__i;

}

const ::Ice::ObjectFactoryPtr&
Test::F::ice_factory()
{
    return __F__Test__F_Ptr;
}

void 
Test::__patch(FPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::FPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::F::ice_staticId(), v);
    }
}
