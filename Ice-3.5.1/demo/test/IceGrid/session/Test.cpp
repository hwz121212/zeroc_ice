// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/SlicedData.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const char* __Test__ExtendedPermissionDeniedException_name = "Test::ExtendedPermissionDeniedException";

struct __F__Test__ExtendedPermissionDeniedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::ExtendedPermissionDeniedException();
    }
};

class __F__Test__ExtendedPermissionDeniedException__Init
{
public:

    __F__Test__ExtendedPermissionDeniedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::ExtendedPermissionDeniedException", new __F__Test__ExtendedPermissionDeniedException);
    }

    ~__F__Test__ExtendedPermissionDeniedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::ExtendedPermissionDeniedException");
    }
};

const __F__Test__ExtendedPermissionDeniedException__Init __F__Test__ExtendedPermissionDeniedException__i;

}

Test::ExtendedPermissionDeniedException::ExtendedPermissionDeniedException(const ::std::string& __ice_reason) :
    ::Glacier2::PermissionDeniedException(__ice_reason)
{
}

Test::ExtendedPermissionDeniedException::~ExtendedPermissionDeniedException() throw()
{
}

::std::string
Test::ExtendedPermissionDeniedException::ice_name() const
{
    return __Test__ExtendedPermissionDeniedException_name;
}

Test::ExtendedPermissionDeniedException*
Test::ExtendedPermissionDeniedException::ice_clone() const
{
    return new ExtendedPermissionDeniedException(*this);
}

void
Test::ExtendedPermissionDeniedException::ice_throw() const
{
    throw *this;
}

void
Test::ExtendedPermissionDeniedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::ExtendedPermissionDeniedException", -1, false);
    __os->endWriteSlice();
    ::Glacier2::PermissionDeniedException::__writeImpl(__os);
}

void
Test::ExtendedPermissionDeniedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Glacier2::PermissionDeniedException::__readImpl(__is);
}

namespace Ice
{
}
