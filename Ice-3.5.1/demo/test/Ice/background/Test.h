// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/Endpoint.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class Background;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Background>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Background*);

class BackgroundController;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::BackgroundController>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::BackgroundController*);

}

}

namespace Test
{

class Background;
bool operator==(const Background&, const Background&);
bool operator<(const Background&, const Background&);
::Ice::Object* upCast(::Test::Background*);
typedef ::IceInternal::Handle< ::Test::Background> BackgroundPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Background> BackgroundPrx;
void __patch(BackgroundPtr&, const ::Ice::ObjectPtr&);

class BackgroundController;
bool operator==(const BackgroundController&, const BackgroundController&);
bool operator<(const BackgroundController&, const BackgroundController&);
::Ice::Object* upCast(::Test::BackgroundController*);
typedef ::IceInternal::Handle< ::Test::BackgroundController> BackgroundControllerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::BackgroundController> BackgroundControllerPrx;
void __patch(BackgroundControllerPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class Callback_Background_op_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Background_op_Base> Callback_Background_opPtr;

class Callback_Background_opWithPayload_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Background_opWithPayload_Base> Callback_Background_opWithPayloadPtr;

class Callback_Background_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Background_shutdown_Base> Callback_Background_shutdownPtr;

class Callback_BackgroundController_pauseCall_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_pauseCall_Base> Callback_BackgroundController_pauseCallPtr;

class Callback_BackgroundController_resumeCall_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_resumeCall_Base> Callback_BackgroundController_resumeCallPtr;

class Callback_BackgroundController_holdAdapter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_holdAdapter_Base> Callback_BackgroundController_holdAdapterPtr;

class Callback_BackgroundController_resumeAdapter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_resumeAdapter_Base> Callback_BackgroundController_resumeAdapterPtr;

class Callback_BackgroundController_initializeSocketOperation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_initializeSocketOperation_Base> Callback_BackgroundController_initializeSocketOperationPtr;

class Callback_BackgroundController_initializeException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_initializeException_Base> Callback_BackgroundController_initializeExceptionPtr;

class Callback_BackgroundController_readReady_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_readReady_Base> Callback_BackgroundController_readReadyPtr;

class Callback_BackgroundController_readException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_readException_Base> Callback_BackgroundController_readExceptionPtr;

class Callback_BackgroundController_writeReady_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_writeReady_Base> Callback_BackgroundController_writeReadyPtr;

class Callback_BackgroundController_writeException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackgroundController_writeException_Base> Callback_BackgroundController_writeExceptionPtr;

}

namespace IceProxy
{

namespace Test
{

class Background : virtual public ::IceProxy::Ice::Object
{
public:

    void op()
    {
        op(0);
    }
    void op(const ::Ice::Context& __ctx)
    {
        op(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_op(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_op(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_op()
    {
        return begin_op(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx)
    {
        return begin_op(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Test::Callback_Background_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Test::Callback_Background_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    void end_op(const ::Ice::AsyncResultPtr&);
    
private:

    void op(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void opWithPayload(const ::Ice::ByteSeq& seq)
    {
        opWithPayload(seq, 0);
    }
    void opWithPayload(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx)
    {
        opWithPayload(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithPayload(seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithPayload(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithPayload(seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithPayload(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_opWithPayload(const ::Ice::ByteSeq& seq)
    {
        return begin_opWithPayload(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_opWithPayload(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithPayload(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithPayload(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::Test::Callback_Background_opWithPayloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithPayload(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithPayload(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::Test::Callback_Background_opWithPayloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithPayload(seq, &__ctx, __del, __cookie);
    }

    void end_opWithPayload(const ::Ice::AsyncResultPtr&);
    
private:

    void opWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Background_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_Background_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Background> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_secure(bool __secure) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_twoway() const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_oneway() const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_batchOneway() const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_datagram() const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_batchDatagram() const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_compress(bool __compress) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Background> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Background*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class BackgroundController : virtual public ::IceProxy::Ice::Object
{
public:

    void pauseCall(const ::std::string& call)
    {
        pauseCall(call, 0);
    }
    void pauseCall(const ::std::string& call, const ::Ice::Context& __ctx)
    {
        pauseCall(call, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_pauseCall(const ::std::string& call, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_pauseCall(call, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_pauseCall(const ::std::string& call, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pauseCall(call, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pauseCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_pauseCall(call, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pauseCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pauseCall(call, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_pauseCall(const ::std::string& call)
    {
        return begin_pauseCall(call, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pauseCall(const ::std::string& call, const ::Ice::Context& __ctx)
    {
        return begin_pauseCall(call, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pauseCall(const ::std::string& call, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pauseCall(call, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pauseCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pauseCall(call, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pauseCall(const ::std::string& call, const ::Test::Callback_BackgroundController_pauseCallPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pauseCall(call, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pauseCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_pauseCallPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pauseCall(call, &__ctx, __del, __cookie);
    }

    void end_pauseCall(const ::Ice::AsyncResultPtr&);
    
private:

    void pauseCall(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pauseCall(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resumeCall(const ::std::string& call)
    {
        resumeCall(call, 0);
    }
    void resumeCall(const ::std::string& call, const ::Ice::Context& __ctx)
    {
        resumeCall(call, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resumeCall(const ::std::string& call, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resumeCall(call, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_resumeCall(const ::std::string& call, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resumeCall(call, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resumeCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resumeCall(call, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resumeCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resumeCall(call, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_resumeCall(const ::std::string& call)
    {
        return begin_resumeCall(call, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resumeCall(const ::std::string& call, const ::Ice::Context& __ctx)
    {
        return begin_resumeCall(call, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resumeCall(const ::std::string& call, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeCall(call, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resumeCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeCall(call, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resumeCall(const ::std::string& call, const ::Test::Callback_BackgroundController_resumeCallPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeCall(call, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resumeCall(const ::std::string& call, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_resumeCallPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeCall(call, &__ctx, __del, __cookie);
    }

    void end_resumeCall(const ::Ice::AsyncResultPtr&);
    
private:

    void resumeCall(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resumeCall(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void holdAdapter()
    {
        holdAdapter(0);
    }
    void holdAdapter(const ::Ice::Context& __ctx)
    {
        holdAdapter(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_holdAdapter(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_holdAdapter(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_holdAdapter(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_holdAdapter(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_holdAdapter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_holdAdapter(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_holdAdapter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_holdAdapter(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_holdAdapter()
    {
        return begin_holdAdapter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_holdAdapter(const ::Ice::Context& __ctx)
    {
        return begin_holdAdapter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_holdAdapter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_holdAdapter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_holdAdapter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_holdAdapter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_holdAdapter(const ::Test::Callback_BackgroundController_holdAdapterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_holdAdapter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_holdAdapter(const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_holdAdapterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_holdAdapter(&__ctx, __del, __cookie);
    }

    void end_holdAdapter(const ::Ice::AsyncResultPtr&);
    
private:

    void holdAdapter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_holdAdapter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resumeAdapter()
    {
        resumeAdapter(0);
    }
    void resumeAdapter(const ::Ice::Context& __ctx)
    {
        resumeAdapter(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resumeAdapter(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resumeAdapter(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_resumeAdapter(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resumeAdapter(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resumeAdapter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resumeAdapter(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resumeAdapter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resumeAdapter(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_resumeAdapter()
    {
        return begin_resumeAdapter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resumeAdapter(const ::Ice::Context& __ctx)
    {
        return begin_resumeAdapter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resumeAdapter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeAdapter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resumeAdapter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeAdapter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resumeAdapter(const ::Test::Callback_BackgroundController_resumeAdapterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeAdapter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resumeAdapter(const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_resumeAdapterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resumeAdapter(&__ctx, __del, __cookie);
    }

    void end_resumeAdapter(const ::Ice::AsyncResultPtr&);
    
private:

    void resumeAdapter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resumeAdapter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void initializeSocketOperation(::Ice::Int status)
    {
        initializeSocketOperation(status, 0);
    }
    void initializeSocketOperation(::Ice::Int status, const ::Ice::Context& __ctx)
    {
        initializeSocketOperation(status, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initializeSocketOperation(::Ice::Int status, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initializeSocketOperation(status, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initializeSocketOperation(::Ice::Int status, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initializeSocketOperation(status, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initializeSocketOperation(::Ice::Int status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initializeSocketOperation(status, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initializeSocketOperation(::Ice::Int status, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initializeSocketOperation(status, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initializeSocketOperation(::Ice::Int status)
    {
        return begin_initializeSocketOperation(status, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initializeSocketOperation(::Ice::Int status, const ::Ice::Context& __ctx)
    {
        return begin_initializeSocketOperation(status, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initializeSocketOperation(::Ice::Int status, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeSocketOperation(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initializeSocketOperation(::Ice::Int status, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeSocketOperation(status, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initializeSocketOperation(::Ice::Int status, const ::Test::Callback_BackgroundController_initializeSocketOperationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeSocketOperation(status, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initializeSocketOperation(::Ice::Int status, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_initializeSocketOperationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeSocketOperation(status, &__ctx, __del, __cookie);
    }

    void end_initializeSocketOperation(const ::Ice::AsyncResultPtr&);
    
private:

    void initializeSocketOperation(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initializeSocketOperation(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void initializeException(bool enable)
    {
        initializeException(enable, 0);
    }
    void initializeException(bool enable, const ::Ice::Context& __ctx)
    {
        initializeException(enable, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initializeException(bool enable, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initializeException(enable, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initializeException(bool enable, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initializeException(enable, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initializeException(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initializeException(enable, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initializeException(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initializeException(enable, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initializeException(bool enable)
    {
        return begin_initializeException(enable, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initializeException(bool enable, const ::Ice::Context& __ctx)
    {
        return begin_initializeException(enable, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initializeException(bool enable, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeException(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initializeException(bool enable, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeException(enable, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initializeException(bool enable, const ::Test::Callback_BackgroundController_initializeExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeException(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initializeException(bool enable, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_initializeExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initializeException(enable, &__ctx, __del, __cookie);
    }

    void end_initializeException(const ::Ice::AsyncResultPtr&);
    
private:

    void initializeException(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initializeException(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void readReady(bool enable)
    {
        readReady(enable, 0);
    }
    void readReady(bool enable, const ::Ice::Context& __ctx)
    {
        readReady(enable, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readReady(bool enable, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readReady(enable, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_readReady(bool enable, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readReady(enable, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readReady(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readReady(enable, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readReady(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readReady(enable, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_readReady(bool enable)
    {
        return begin_readReady(enable, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readReady(bool enable, const ::Ice::Context& __ctx)
    {
        return begin_readReady(enable, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readReady(bool enable, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readReady(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readReady(bool enable, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readReady(enable, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readReady(bool enable, const ::Test::Callback_BackgroundController_readReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readReady(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readReady(bool enable, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_readReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readReady(enable, &__ctx, __del, __cookie);
    }

    void end_readReady(const ::Ice::AsyncResultPtr&);
    
private:

    void readReady(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readReady(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void readException(bool enable)
    {
        readException(enable, 0);
    }
    void readException(bool enable, const ::Ice::Context& __ctx)
    {
        readException(enable, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readException(bool enable, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readException(enable, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_readException(bool enable, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readException(enable, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readException(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readException(enable, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readException(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readException(enable, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_readException(bool enable)
    {
        return begin_readException(enable, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readException(bool enable, const ::Ice::Context& __ctx)
    {
        return begin_readException(enable, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readException(bool enable, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readException(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readException(bool enable, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readException(enable, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readException(bool enable, const ::Test::Callback_BackgroundController_readExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readException(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readException(bool enable, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_readExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readException(enable, &__ctx, __del, __cookie);
    }

    void end_readException(const ::Ice::AsyncResultPtr&);
    
private:

    void readException(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readException(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void writeReady(bool enable)
    {
        writeReady(enable, 0);
    }
    void writeReady(bool enable, const ::Ice::Context& __ctx)
    {
        writeReady(enable, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeReady(bool enable, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeReady(enable, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_writeReady(bool enable, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeReady(enable, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeReady(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeReady(enable, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeReady(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeReady(enable, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_writeReady(bool enable)
    {
        return begin_writeReady(enable, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeReady(bool enable, const ::Ice::Context& __ctx)
    {
        return begin_writeReady(enable, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeReady(bool enable, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeReady(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeReady(bool enable, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeReady(enable, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeReady(bool enable, const ::Test::Callback_BackgroundController_writeReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeReady(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeReady(bool enable, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_writeReadyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeReady(enable, &__ctx, __del, __cookie);
    }

    void end_writeReady(const ::Ice::AsyncResultPtr&);
    
private:

    void writeReady(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeReady(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void writeException(bool enable)
    {
        writeException(enable, 0);
    }
    void writeException(bool enable, const ::Ice::Context& __ctx)
    {
        writeException(enable, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeException(bool enable, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeException(enable, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_writeException(bool enable, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeException(enable, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeException(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeException(enable, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeException(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeException(enable, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_writeException(bool enable)
    {
        return begin_writeException(enable, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeException(bool enable, const ::Ice::Context& __ctx)
    {
        return begin_writeException(enable, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeException(bool enable, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeException(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeException(bool enable, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeException(enable, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeException(bool enable, const ::Test::Callback_BackgroundController_writeExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeException(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeException(bool enable, const ::Ice::Context& __ctx, const ::Test::Callback_BackgroundController_writeExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeException(enable, &__ctx, __del, __cookie);
    }

    void end_writeException(const ::Ice::AsyncResultPtr&);
    
private:

    void writeException(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeException(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_secure(bool __secure) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_twoway() const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_oneway() const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_batchOneway() const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_datagram() const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_batchDatagram() const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_compress(bool __compress) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BackgroundController> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BackgroundController*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class Background : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void opWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class BackgroundController : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void pauseCall(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void resumeCall(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void holdAdapter(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void resumeAdapter(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void initializeSocketOperation(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void initializeException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void readReady(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void readException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void writeReady(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void writeException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class Background : virtual public ::IceDelegate::Test::Background,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BackgroundController : virtual public ::IceDelegate::Test::BackgroundController,
                             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void pauseCall(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resumeCall(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void holdAdapter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resumeAdapter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initializeSocketOperation(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initializeException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void readReady(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void readException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void writeReady(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void writeException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class Background : virtual public ::IceDelegate::Test::Background,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BackgroundController : virtual public ::IceDelegate::Test::BackgroundController,
                             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void pauseCall(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resumeCall(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void holdAdapter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resumeAdapter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initializeSocketOperation(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initializeException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void readReady(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void readException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void writeReady(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void writeException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class Background : virtual public ::Ice::Object
{
public:

    typedef BackgroundPrx ProxyType;
    typedef BackgroundPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___op(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opWithPayload(const ::Ice::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opWithPayload(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Background& l, const Background& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Background& l, const Background& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class BackgroundController : virtual public ::Ice::Object
{
public:

    typedef BackgroundControllerPrx ProxyType;
    typedef BackgroundControllerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void pauseCall(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pauseCall(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resumeCall(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resumeCall(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void holdAdapter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___holdAdapter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resumeAdapter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resumeAdapter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initializeSocketOperation(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initializeSocketOperation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initializeException(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initializeException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void readReady(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void readException(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void writeReady(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeReady(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void writeException(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const BackgroundController& l, const BackgroundController& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BackgroundController& l, const BackgroundController& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_Background_op : public Callback_Background_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Background_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Background_opPtr
newCallback_Background_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_op<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Background_opPtr
newCallback_Background_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_op<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Background_opPtr
newCallback_Background_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_op<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Background_opPtr
newCallback_Background_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_op<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Background_op : public Callback_Background_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Background_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Background_opPtr
newCallback_Background_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_op<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Background_opPtr
newCallback_Background_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_op<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Background_opPtr
newCallback_Background_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_op<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Background_opPtr
newCallback_Background_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_op<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Background_opWithPayload : public Callback_Background_opWithPayload_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Background_opWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_opWithPayload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_opWithPayload<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_opWithPayload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_opWithPayload<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Background_opWithPayload : public Callback_Background_opWithPayload_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Background_opWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_opWithPayload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_opWithPayload<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_opWithPayload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Background_opWithPayloadPtr
newCallback_Background_opWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_opWithPayload<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Background_shutdown : public Callback_Background_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Background_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Background_shutdownPtr
newCallback_Background_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Background_shutdownPtr
newCallback_Background_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Background_shutdownPtr
newCallback_Background_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Background_shutdownPtr
newCallback_Background_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Background_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Background_shutdown : public Callback_Background_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Background_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Background_shutdownPtr
newCallback_Background_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Background_shutdownPtr
newCallback_Background_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Background_shutdownPtr
newCallback_Background_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Background_shutdownPtr
newCallback_Background_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Background_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_pauseCall : public Callback_BackgroundController_pauseCall_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_pauseCall(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_pauseCall<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_pauseCall<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_pauseCall<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_pauseCall<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_pauseCall : public Callback_BackgroundController_pauseCall_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_pauseCall(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_pauseCall<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_pauseCall<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_pauseCall<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_pauseCallPtr
newCallback_BackgroundController_pauseCall(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_pauseCall<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_resumeCall : public Callback_BackgroundController_resumeCall_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_resumeCall(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeCall<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeCall<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeCall<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeCall<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_resumeCall : public Callback_BackgroundController_resumeCall_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_resumeCall(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeCall<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeCall<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeCall<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_resumeCallPtr
newCallback_BackgroundController_resumeCall(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeCall<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_holdAdapter : public Callback_BackgroundController_holdAdapter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_holdAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_holdAdapter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_holdAdapter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_holdAdapter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_holdAdapter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_holdAdapter : public Callback_BackgroundController_holdAdapter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_holdAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_holdAdapter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_holdAdapter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_holdAdapter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_holdAdapterPtr
newCallback_BackgroundController_holdAdapter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_holdAdapter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_resumeAdapter : public Callback_BackgroundController_resumeAdapter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_resumeAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeAdapter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeAdapter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeAdapter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_resumeAdapter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_resumeAdapter : public Callback_BackgroundController_resumeAdapter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_resumeAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeAdapter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeAdapter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeAdapter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_resumeAdapterPtr
newCallback_BackgroundController_resumeAdapter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_resumeAdapter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_initializeSocketOperation : public Callback_BackgroundController_initializeSocketOperation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_initializeSocketOperation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeSocketOperation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeSocketOperation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeSocketOperation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeSocketOperation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_initializeSocketOperation : public Callback_BackgroundController_initializeSocketOperation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_initializeSocketOperation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeSocketOperation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeSocketOperation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeSocketOperation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_initializeSocketOperationPtr
newCallback_BackgroundController_initializeSocketOperation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeSocketOperation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_initializeException : public Callback_BackgroundController_initializeException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_initializeException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_initializeException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_initializeException : public Callback_BackgroundController_initializeException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_initializeException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_initializeExceptionPtr
newCallback_BackgroundController_initializeException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_initializeException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_readReady : public Callback_BackgroundController_readReady_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_readReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readReady<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readReady<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_readReady : public Callback_BackgroundController_readReady_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_readReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_readReadyPtr
newCallback_BackgroundController_readReady(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_readException : public Callback_BackgroundController_readException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_readException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_readException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_readException : public Callback_BackgroundController_readException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_readException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_readExceptionPtr
newCallback_BackgroundController_readException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_readException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_writeReady : public Callback_BackgroundController_writeReady_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_writeReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeReady<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeReady<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeReady<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_writeReady : public Callback_BackgroundController_writeReady_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_writeReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeReady<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_writeReadyPtr
newCallback_BackgroundController_writeReady(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeReady<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_BackgroundController_writeException : public Callback_BackgroundController_writeException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BackgroundController_writeException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackgroundController_writeException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackgroundController_writeException : public Callback_BackgroundController_writeException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BackgroundController_writeException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackgroundController_writeExceptionPtr
newCallback_BackgroundController_writeException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackgroundController_writeException<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
