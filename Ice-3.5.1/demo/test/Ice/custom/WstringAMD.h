// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `WstringAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __WstringAMD_h__
#define __WstringAMD_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test1
{

class WstringClass;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test1::WstringClass>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test1::WstringClass*);

}

namespace Test2
{

class WstringClass;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test2::WstringClass>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test2::WstringClass*);

}

}

namespace Test1
{

class WstringClass;
bool operator==(const WstringClass&, const WstringClass&);
bool operator<(const WstringClass&, const WstringClass&);
::Ice::Object* upCast(::Test1::WstringClass*);
typedef ::IceInternal::Handle< ::Test1::WstringClass> WstringClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test1::WstringClass> WstringClassPrx;
void __patch(WstringClassPtr&, const ::Ice::ObjectPtr&);

}

namespace Test2
{

class WstringClass;
bool operator==(const WstringClass&, const WstringClass&);
bool operator<(const WstringClass&, const WstringClass&);
::Ice::Object* upCast(::Test2::WstringClass*);
typedef ::IceInternal::Handle< ::Test2::WstringClass> WstringClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test2::WstringClass> WstringClassPrx;
void __patch(WstringClassPtr&, const ::Ice::ObjectPtr&);

}

namespace Test1
{

typedef ::std::vector< ::std::wstring> WstringSeq;

typedef ::std::map< ::std::wstring, ::std::wstring> WstringWStringDict;

struct WstringStruct
{
    ::std::wstring s;

    bool operator==(const WstringStruct& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(s != __rhs.s)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WstringStruct& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(s < __rhs.s)
        {
            return true;
        }
        else if(__rhs.s < s)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WstringStruct& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const WstringStruct& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const WstringStruct& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const WstringStruct& __rhs) const
    {
        return !operator<(__rhs);
    }
};

class WstringException : public ::Ice::UserException
{
public:

    WstringException() {}
    explicit WstringException(const ::std::wstring&);
    virtual ~WstringException() throw();

    virtual ::std::string ice_name() const;
    virtual WstringException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::wstring reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static WstringException __WstringException_init;

}

namespace Test2
{

typedef ::std::vector< ::std::wstring> WstringSeq;

typedef ::std::map< ::std::wstring, ::std::wstring> WstringWStringDict;

struct WstringStruct
{
    ::std::wstring s;

    bool operator==(const WstringStruct& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(s != __rhs.s)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WstringStruct& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(s < __rhs.s)
        {
            return true;
        }
        else if(__rhs.s < s)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WstringStruct& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const WstringStruct& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const WstringStruct& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const WstringStruct& __rhs) const
    {
        return !operator<(__rhs);
    }
};

class WstringException : public ::Ice::UserException
{
public:

    WstringException() {}
    explicit WstringException(const ::std::wstring&);
    virtual ~WstringException() throw();

    virtual ::std::string ice_name() const;
    virtual WstringException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::wstring reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test1::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test1::WstringStruct, S>
{
    static void write(S* __os, const ::Test1::WstringStruct& v)
    {
        __os->write(v.s);
    }
};

template<class S>
struct StreamReader< ::Test1::WstringStruct, S>
{
    static void read(S* __is, ::Test1::WstringStruct& v)
    {
        __is->read(v.s);
    }
};

template<>
struct StreamableTraits< ::Test1::WstringException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test2::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test2::WstringStruct, S>
{
    static void write(S* __os, const ::Test2::WstringStruct& v)
    {
        __os->write(v.s);
    }
};

template<class S>
struct StreamReader< ::Test2::WstringStruct, S>
{
    static void read(S* __is, ::Test2::WstringStruct& v)
    {
        __is->read(v.s);
    }
};

template<>
struct StreamableTraits< ::Test2::WstringException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test1
{

class AMI_WstringClass_opString : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::wstring&, const ::std::wstring&) = 0;

    void __response(const ::std::wstring& __ret, const ::std::wstring& s2)
    {
        ice_response(__ret, s2);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test1::AMI_WstringClass_opString> AMI_WstringClass_opStringPtr;

class AMD_WstringClass_opString : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::wstring&, const ::std::wstring&) = 0;
};

typedef ::IceUtil::Handle< ::Test1::AMD_WstringClass_opString> AMD_WstringClass_opStringPtr;

class AMI_WstringClass_opStruct : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&) = 0;

    void __response(const ::Test1::WstringStruct& __ret, const ::Test1::WstringStruct& s2)
    {
        ice_response(__ret, s2);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test1::AMI_WstringClass_opStruct> AMI_WstringClass_opStructPtr;

class AMD_WstringClass_opStruct : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&) = 0;
};

typedef ::IceUtil::Handle< ::Test1::AMD_WstringClass_opStruct> AMD_WstringClass_opStructPtr;

class AMI_WstringClass_throwExcept : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test1::AMI_WstringClass_throwExcept> AMI_WstringClass_throwExceptPtr;

class AMD_WstringClass_throwExcept : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test1::AMD_WstringClass_throwExcept> AMD_WstringClass_throwExceptPtr;

}

namespace Test2
{

class AMI_WstringClass_opString : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::wstring&, const ::std::wstring&) = 0;

    void __response(const ::std::wstring& __ret, const ::std::wstring& s2)
    {
        ice_response(__ret, s2);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test2::AMI_WstringClass_opString> AMI_WstringClass_opStringPtr;

class AMD_WstringClass_opString : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::wstring&, const ::std::wstring&) = 0;
};

typedef ::IceUtil::Handle< ::Test2::AMD_WstringClass_opString> AMD_WstringClass_opStringPtr;

class AMI_WstringClass_opStruct : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&) = 0;

    void __response(const ::Test2::WstringStruct& __ret, const ::Test2::WstringStruct& s2)
    {
        ice_response(__ret, s2);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test2::AMI_WstringClass_opStruct> AMI_WstringClass_opStructPtr;

class AMD_WstringClass_opStruct : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&) = 0;
};

typedef ::IceUtil::Handle< ::Test2::AMD_WstringClass_opStruct> AMD_WstringClass_opStructPtr;

class AMI_WstringClass_throwExcept : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test2::AMI_WstringClass_throwExcept> AMI_WstringClass_throwExceptPtr;

class AMD_WstringClass_throwExcept : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test2::AMD_WstringClass_throwExcept> AMD_WstringClass_throwExceptPtr;

}

namespace IceAsync
{

namespace Test1
{

class AMD_WstringClass_opString : public ::Test1::AMD_WstringClass_opString, public ::IceInternal::IncomingAsync
{
public:

    AMD_WstringClass_opString(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::wstring&, const ::std::wstring&);
};

class AMD_WstringClass_opStruct : public ::Test1::AMD_WstringClass_opStruct, public ::IceInternal::IncomingAsync
{
public:

    AMD_WstringClass_opStruct(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&);
};

class AMD_WstringClass_throwExcept : public ::Test1::AMD_WstringClass_throwExcept, public ::IceInternal::IncomingAsync
{
public:

    AMD_WstringClass_throwExcept(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

namespace Test2
{

class AMD_WstringClass_opString : public ::Test2::AMD_WstringClass_opString, public ::IceInternal::IncomingAsync
{
public:

    AMD_WstringClass_opString(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::wstring&, const ::std::wstring&);
};

class AMD_WstringClass_opStruct : public ::Test2::AMD_WstringClass_opStruct, public ::IceInternal::IncomingAsync
{
public:

    AMD_WstringClass_opStruct(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&);
};

class AMD_WstringClass_throwExcept : public ::Test2::AMD_WstringClass_throwExcept, public ::IceInternal::IncomingAsync
{
public:

    AMD_WstringClass_throwExcept(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace Test1
{

class Callback_WstringClass_opString_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opString_Base> Callback_WstringClass_opStringPtr;

class Callback_WstringClass_opStruct_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opStruct_Base> Callback_WstringClass_opStructPtr;

class Callback_WstringClass_throwExcept_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_throwExcept_Base> Callback_WstringClass_throwExceptPtr;

}

namespace Test2
{

class Callback_WstringClass_opString_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opString_Base> Callback_WstringClass_opStringPtr;

class Callback_WstringClass_opStruct_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opStruct_Base> Callback_WstringClass_opStructPtr;

class Callback_WstringClass_throwExcept_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_throwExcept_Base> Callback_WstringClass_throwExceptPtr;

}

namespace IceProxy
{

namespace Test1
{

class WstringClass : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2)
    {
        return opString(s1, s2, 0);
    }
    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& __ctx)
    {
        return opString(s1, s2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::IceInternal::Function<void (const ::std::wstring&, const ::std::wstring&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opString(s1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opString(s1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::wstring&, const ::std::wstring&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opString(s1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opString(s1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opString(const ::std::wstring& s1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::wstring&, const ::std::wstring&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::wstring&, const ::std::wstring&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
                ::std::wstring s2;
                ::std::wstring __ret;
                try
                {
                    __ret = __proxy->end_opString(s2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, s2);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::wstring&, const ::std::wstring&)> _response;
        };
        return begin_opString(s1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1)
    {
        return begin_opString(s1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx)
    {
        return begin_opString(s1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Test1::Callback_WstringClass_opStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::Test1::Callback_WstringClass_opStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, &__ctx, __del, __cookie);
    }

    ::std::wstring end_opString(::std::wstring& s2, const ::Ice::AsyncResultPtr&);
    
private:

    ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool opString_async(const ::Test1::AMI_WstringClass_opStringPtr&, const ::std::wstring&);
    bool opString_async(const ::Test1::AMI_WstringClass_opStringPtr&, const ::std::wstring&, const ::Ice::Context&);

    ::Test1::WstringStruct opStruct(const ::Test1::WstringStruct& s1, ::Test1::WstringStruct& s2)
    {
        return opStruct(s1, s2, 0);
    }
    ::Test1::WstringStruct opStruct(const ::Test1::WstringStruct& s1, ::Test1::WstringStruct& s2, const ::Ice::Context& __ctx)
    {
        return opStruct(s1, s2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test1::WstringStruct& s1, const ::IceInternal::Function<void (const ::Test1::WstringStruct&, const ::Test1::WstringStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opStruct(s1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test1::WstringStruct& s1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opStruct(s1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test1::WstringStruct&, const ::Test1::WstringStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opStruct(s1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opStruct(s1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test1::WstringStruct&, const ::Test1::WstringStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test1::WstringStruct&, const ::Test1::WstringStruct&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
                ::Test1::WstringStruct s2;
                ::Test1::WstringStruct __ret;
                try
                {
                    __ret = __proxy->end_opStruct(s2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, s2);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test1::WstringStruct&, const ::Test1::WstringStruct&)> _response;
        };
        return begin_opStruct(s1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1)
    {
        return begin_opStruct(s1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& __ctx)
    {
        return begin_opStruct(s1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Test1::Callback_WstringClass_opStructPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& __ctx, const ::Test1::Callback_WstringClass_opStructPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, &__ctx, __del, __cookie);
    }

    ::Test1::WstringStruct end_opStruct(::Test1::WstringStruct& s2, const ::Ice::AsyncResultPtr&);
    
private:

    ::Test1::WstringStruct opStruct(const ::Test1::WstringStruct&, ::Test1::WstringStruct&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool opStruct_async(const ::Test1::AMI_WstringClass_opStructPtr&, const ::Test1::WstringStruct&);
    bool opStruct_async(const ::Test1::AMI_WstringClass_opStructPtr&, const ::Test1::WstringStruct&, const ::Ice::Context&);

    void throwExcept(const ::std::wstring& reason)
    {
        throwExcept(reason, 0);
    }
    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx)
    {
        throwExcept(reason, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwExcept(reason, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwExcept(reason, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwExcept(reason, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwExcept(reason, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwExcept(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwExcept(reason, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason)
    {
        return begin_throwExcept(reason, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx)
    {
        return begin_throwExcept(reason, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Test1::Callback_WstringClass_throwExceptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::Test1::Callback_WstringClass_throwExceptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, &__ctx, __del, __cookie);
    }

    void end_throwExcept(const ::Ice::AsyncResultPtr&);
    
private:

    void throwExcept(const ::std::wstring&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwExcept_async(const ::Test1::AMI_WstringClass_throwExceptPtr&, const ::std::wstring&);
    bool throwExcept_async(const ::Test1::AMI_WstringClass_throwExceptPtr&, const ::std::wstring&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<WstringClass> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_secure(bool __secure) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_twoway() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_oneway() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_batchOneway() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_datagram() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_batchDatagram() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_compress(bool __compress) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_timeout(int __timeout) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

namespace Test2
{

class WstringClass : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2)
    {
        return opString(s1, s2, 0);
    }
    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& __ctx)
    {
        return opString(s1, s2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::IceInternal::Function<void (const ::std::wstring&, const ::std::wstring&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opString(s1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opString(s1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::wstring&, const ::std::wstring&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opString(s1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opString(s1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opString(const ::std::wstring& s1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::wstring&, const ::std::wstring&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::wstring&, const ::std::wstring&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
                ::std::wstring s2;
                ::std::wstring __ret;
                try
                {
                    __ret = __proxy->end_opString(s2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, s2);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::wstring&, const ::std::wstring&)> _response;
        };
        return begin_opString(s1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1)
    {
        return begin_opString(s1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx)
    {
        return begin_opString(s1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Test2::Callback_WstringClass_opStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& __ctx, const ::Test2::Callback_WstringClass_opStringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opString(s1, &__ctx, __del, __cookie);
    }

    ::std::wstring end_opString(::std::wstring& s2, const ::Ice::AsyncResultPtr&);
    
private:

    ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool opString_async(const ::Test2::AMI_WstringClass_opStringPtr&, const ::std::wstring&);
    bool opString_async(const ::Test2::AMI_WstringClass_opStringPtr&, const ::std::wstring&, const ::Ice::Context&);

    ::Test2::WstringStruct opStruct(const ::Test2::WstringStruct& s1, ::Test2::WstringStruct& s2)
    {
        return opStruct(s1, s2, 0);
    }
    ::Test2::WstringStruct opStruct(const ::Test2::WstringStruct& s1, ::Test2::WstringStruct& s2, const ::Ice::Context& __ctx)
    {
        return opStruct(s1, s2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test2::WstringStruct& s1, const ::IceInternal::Function<void (const ::Test2::WstringStruct&, const ::Test2::WstringStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opStruct(s1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test2::WstringStruct& s1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opStruct(s1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test2::WstringStruct&, const ::Test2::WstringStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opStruct(s1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opStruct(s1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test2::WstringStruct&, const ::Test2::WstringStruct&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test2::WstringStruct&, const ::Test2::WstringStruct&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
                ::Test2::WstringStruct s2;
                ::Test2::WstringStruct __ret;
                try
                {
                    __ret = __proxy->end_opStruct(s2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, s2);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test2::WstringStruct&, const ::Test2::WstringStruct&)> _response;
        };
        return begin_opStruct(s1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1)
    {
        return begin_opStruct(s1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& __ctx)
    {
        return begin_opStruct(s1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Test2::Callback_WstringClass_opStructPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& __ctx, const ::Test2::Callback_WstringClass_opStructPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opStruct(s1, &__ctx, __del, __cookie);
    }

    ::Test2::WstringStruct end_opStruct(::Test2::WstringStruct& s2, const ::Ice::AsyncResultPtr&);
    
private:

    ::Test2::WstringStruct opStruct(const ::Test2::WstringStruct&, ::Test2::WstringStruct&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool opStruct_async(const ::Test2::AMI_WstringClass_opStructPtr&, const ::Test2::WstringStruct&);
    bool opStruct_async(const ::Test2::AMI_WstringClass_opStructPtr&, const ::Test2::WstringStruct&, const ::Ice::Context&);

    void throwExcept(const ::std::wstring& reason)
    {
        throwExcept(reason, 0);
    }
    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx)
    {
        throwExcept(reason, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwExcept(reason, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwExcept(reason, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwExcept(reason, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwExcept(reason, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwExcept(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwExcept(reason, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason)
    {
        return begin_throwExcept(reason, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx)
    {
        return begin_throwExcept(reason, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Test2::Callback_WstringClass_throwExceptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& __ctx, const ::Test2::Callback_WstringClass_throwExceptPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwExcept(reason, &__ctx, __del, __cookie);
    }

    void end_throwExcept(const ::Ice::AsyncResultPtr&);
    
private:

    void throwExcept(const ::std::wstring&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwExcept_async(const ::Test2::AMI_WstringClass_throwExceptPtr&, const ::std::wstring&);
    bool throwExcept_async(const ::Test2::AMI_WstringClass_throwExceptPtr&, const ::std::wstring&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<WstringClass> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_secure(bool __secure) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_twoway() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_oneway() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_batchOneway() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_datagram() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_batchDatagram() const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_compress(bool __compress) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_timeout(int __timeout) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WstringClass> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<WstringClass*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test1
{

class WstringClass : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test1::WstringStruct opStruct(const ::Test1::WstringStruct&, ::Test1::WstringStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwExcept(const ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

namespace Test2
{

class WstringClass : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test2::WstringStruct opStruct(const ::Test2::WstringStruct&, ::Test2::WstringStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwExcept(const ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test1
{

class WstringClass : virtual public ::IceDelegate::Test1::WstringClass,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test1::WstringStruct opStruct(const ::Test1::WstringStruct&, ::Test1::WstringStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwExcept(const ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

namespace Test2
{

class WstringClass : virtual public ::IceDelegate::Test2::WstringClass,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test2::WstringStruct opStruct(const ::Test2::WstringStruct&, ::Test2::WstringStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwExcept(const ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test1
{

class WstringClass : virtual public ::IceDelegate::Test1::WstringClass,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test1::WstringStruct opStruct(const ::Test1::WstringStruct&, ::Test1::WstringStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwExcept(const ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

namespace Test2
{

class WstringClass : virtual public ::IceDelegate::Test2::WstringClass,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::wstring opString(const ::std::wstring&, ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test2::WstringStruct opStruct(const ::Test2::WstringStruct&, ::Test2::WstringStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwExcept(const ::std::wstring&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test1
{

class WstringClass : virtual public ::Ice::Object
{
public:

    typedef WstringClassPrx ProxyType;
    typedef WstringClassPtr PointerType;

    WstringClass()
    {
    }

    explicit WstringClass(const ::std::wstring& __ice_s) :
        s(__ice_s)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void opString_async(const ::Test1::AMD_WstringClass_opStringPtr&, const ::std::wstring&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opString(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opStruct_async(const ::Test1::AMD_WstringClass_opStructPtr&, const ::Test1::WstringStruct&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opStruct(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwExcept_async(const ::Test1::AMD_WstringClass_throwExceptPtr&, const ::std::wstring&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::wstring s;
};

inline bool operator==(const WstringClass& l, const WstringClass& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WstringClass& l, const WstringClass& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test2
{

class WstringClass : virtual public ::Ice::Object
{
public:

    typedef WstringClassPrx ProxyType;
    typedef WstringClassPtr PointerType;

    WstringClass()
    {
    }

    explicit WstringClass(const ::std::wstring& __ice_s) :
        s(__ice_s)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void opString_async(const ::Test2::AMD_WstringClass_opStringPtr&, const ::std::wstring&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opString(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opStruct_async(const ::Test2::AMD_WstringClass_opStructPtr&, const ::Test2::WstringStruct&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opStruct(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwExcept_async(const ::Test2::AMD_WstringClass_throwExceptPtr&, const ::std::wstring&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::wstring s;
};

inline bool operator==(const WstringClass& l, const WstringClass& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WstringClass& l, const WstringClass& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test1
{

template<class T>
class CallbackNC_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&);

    CallbackNC_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::std::wstring s2;
        ::std::wstring __ret;
        try
        {
            __ret = __proxy->end_opString(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, s2);
        }
    }

    Response response;
};

template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&, const CT&);

    Callback_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::std::wstring s2;
        ::std::wstring __ret;
        try
        {
            __ret = __proxy->end_opString(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, s2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&);

    CallbackNC_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::Test1::WstringStruct s2;
        ::Test1::WstringStruct __ret;
        try
        {
            __ret = __proxy->end_opStruct(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, s2);
        }
    }

    Response response;
};

template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&, const CT&);

    Callback_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::Test1::WstringStruct s2;
        ::Test1::WstringStruct __ret;
        try
        {
            __ret = __proxy->end_opStruct(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, s2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const ::Test1::WstringStruct&, const ::Test1::WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwExcept(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test1::WstringClassPrx __proxy = ::Test1::WstringClassPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwExcept(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

}

namespace Test2
{

template<class T>
class CallbackNC_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&);

    CallbackNC_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::std::wstring s2;
        ::std::wstring __ret;
        try
        {
            __ret = __proxy->end_opString(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, s2);
        }
    }

    Response response;
};

template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&, const CT&);

    Callback_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::std::wstring s2;
        ::std::wstring __ret;
        try
        {
            __ret = __proxy->end_opString(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, s2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&);

    CallbackNC_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::Test2::WstringStruct s2;
        ::Test2::WstringStruct __ret;
        try
        {
            __ret = __proxy->end_opStruct(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, s2);
        }
    }

    Response response;
};

template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&, const CT&);

    Callback_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
        ::Test2::WstringStruct s2;
        ::Test2::WstringStruct __ret;
        try
        {
            __ret = __proxy->end_opStruct(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, s2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const ::Test2::WstringStruct&, const ::Test2::WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwExcept(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test2::WstringClassPrx __proxy = ::Test2::WstringClassPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwExcept(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
