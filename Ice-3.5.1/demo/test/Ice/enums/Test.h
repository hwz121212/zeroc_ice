// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class TestIntf;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::TestIntf>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::TestIntf*);

}

}

namespace Test
{

class TestIntf;
bool operator==(const TestIntf&, const TestIntf&);
bool operator<(const TestIntf&, const TestIntf&);
::Ice::Object* upCast(::Test::TestIntf*);
typedef ::IceInternal::Handle< ::Test::TestIntf> TestIntfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::TestIntf> TestIntfPrx;
void __patch(TestIntfPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

const ::Ice::Byte ByteConst1 = 10;

const ::Ice::Short ShortConst1 = 20;

const ::Ice::Int IntConst1 = 30;

const ::Ice::Long LongConst1 = ICE_INT64(40);

const ::Ice::Byte ByteConst2 = 126;

const ::Ice::Short ShortConst2 = 32766;

const ::Ice::Int IntConst2 = 2147483647;

const ::Ice::Long LongConst2 = ICE_INT64(2147483646);

enum ByteEnum
{
    benum1 = 0,
    benum2 = 1,
    benum3 = 10,
    benum4 = 11,
    benum5 = 20,
    benum6 = 21,
    benum7 = 30,
    benum8 = 31,
    benum9 = 40,
    benum10 = 41,
    benum11 = 126
};

enum ShortEnum
{
    senum1 = 3,
    senum2 = 4,
    senum3 = 10,
    senum4 = 11,
    senum5 = 20,
    senum6 = 21,
    senum7 = 30,
    senum8 = 31,
    senum9 = 40,
    senum10 = 41,
    senum11 = 32766
};

enum IntEnum
{
    ienum1 = 0,
    ienum2 = 1,
    ienum3 = 10,
    ienum4 = 11,
    ienum5 = 20,
    ienum6 = 21,
    ienum7 = 30,
    ienum8 = 31,
    ienum9 = 40,
    ienum10 = 41,
    ienum11 = 2147483647,
    ienum12 = 2147483646
};

enum SimpleEnum
{
    red,
    green,
    blue
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::ByteEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 126;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::ShortEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 3;
    static const int maxValue = 32766;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::IntEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2147483647;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::SimpleEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace Test
{

class Callback_TestIntf_opByte_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_opByte_Base> Callback_TestIntf_opBytePtr;

class Callback_TestIntf_opShort_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_opShort_Base> Callback_TestIntf_opShortPtr;

class Callback_TestIntf_opInt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_opInt_Base> Callback_TestIntf_opIntPtr;

class Callback_TestIntf_opSimple_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_opSimple_Base> Callback_TestIntf_opSimplePtr;

class Callback_TestIntf_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_shutdown_Base> Callback_TestIntf_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class TestIntf : virtual public ::IceProxy::Ice::Object
{
public:

    ::Test::ByteEnum opByte(::Test::ByteEnum b1, ::Test::ByteEnum& b2)
    {
        return opByte(b1, b2, 0);
    }
    ::Test::ByteEnum opByte(::Test::ByteEnum b1, ::Test::ByteEnum& b2, const ::Ice::Context& __ctx)
    {
        return opByte(b1, b2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opByte(::Test::ByteEnum b1, const ::IceInternal::Function<void (::Test::ByteEnum, ::Test::ByteEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opByte(b1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opByte(::Test::ByteEnum b1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opByte(b1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opByte(::Test::ByteEnum b1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Test::ByteEnum, ::Test::ByteEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opByte(b1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opByte(::Test::ByteEnum b1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opByte(b1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opByte(::Test::ByteEnum b1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Test::ByteEnum, ::Test::ByteEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Test::ByteEnum, ::Test::ByteEnum)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                ::Test::ByteEnum b2;
                ::Test::ByteEnum __ret;
                try
                {
                    __ret = __proxy->end_opByte(b2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, b2);
                }
            }
        
        private:
            
            ::std::function<void (::Test::ByteEnum, ::Test::ByteEnum)> _response;
        };
        return begin_opByte(b1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opByte(::Test::ByteEnum b1)
    {
        return begin_opByte(b1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByte(::Test::ByteEnum b1, const ::Ice::Context& __ctx)
    {
        return begin_opByte(b1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByte(::Test::ByteEnum b1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByte(b1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opByte(::Test::ByteEnum b1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByte(b1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opByte(::Test::ByteEnum b1, const ::Test::Callback_TestIntf_opBytePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByte(b1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opByte(::Test::ByteEnum b1, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_opBytePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByte(b1, &__ctx, __del, __cookie);
    }

    ::Test::ByteEnum end_opByte(::Test::ByteEnum& b2, const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::ByteEnum opByte(::Test::ByteEnum, ::Test::ByteEnum&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opByte(::Test::ByteEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::ShortEnum opShort(::Test::ShortEnum s1, ::Test::ShortEnum& s2)
    {
        return opShort(s1, s2, 0);
    }
    ::Test::ShortEnum opShort(::Test::ShortEnum s1, ::Test::ShortEnum& s2, const ::Ice::Context& __ctx)
    {
        return opShort(s1, s2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opShort(::Test::ShortEnum s1, const ::IceInternal::Function<void (::Test::ShortEnum, ::Test::ShortEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opShort(s1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opShort(::Test::ShortEnum s1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opShort(s1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opShort(::Test::ShortEnum s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Test::ShortEnum, ::Test::ShortEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opShort(s1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opShort(::Test::ShortEnum s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opShort(s1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opShort(::Test::ShortEnum s1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Test::ShortEnum, ::Test::ShortEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Test::ShortEnum, ::Test::ShortEnum)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                ::Test::ShortEnum s2;
                ::Test::ShortEnum __ret;
                try
                {
                    __ret = __proxy->end_opShort(s2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, s2);
                }
            }
        
        private:
            
            ::std::function<void (::Test::ShortEnum, ::Test::ShortEnum)> _response;
        };
        return begin_opShort(s1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opShort(::Test::ShortEnum s1)
    {
        return begin_opShort(s1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShort(::Test::ShortEnum s1, const ::Ice::Context& __ctx)
    {
        return begin_opShort(s1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShort(::Test::ShortEnum s1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opShort(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opShort(::Test::ShortEnum s1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opShort(s1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opShort(::Test::ShortEnum s1, const ::Test::Callback_TestIntf_opShortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opShort(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opShort(::Test::ShortEnum s1, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_opShortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opShort(s1, &__ctx, __del, __cookie);
    }

    ::Test::ShortEnum end_opShort(::Test::ShortEnum& s2, const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::ShortEnum opShort(::Test::ShortEnum, ::Test::ShortEnum&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opShort(::Test::ShortEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::IntEnum opInt(::Test::IntEnum i1, ::Test::IntEnum& i2)
    {
        return opInt(i1, i2, 0);
    }
    ::Test::IntEnum opInt(::Test::IntEnum i1, ::Test::IntEnum& i2, const ::Ice::Context& __ctx)
    {
        return opInt(i1, i2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opInt(::Test::IntEnum i1, const ::IceInternal::Function<void (::Test::IntEnum, ::Test::IntEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opInt(i1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opInt(::Test::IntEnum i1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opInt(i1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opInt(::Test::IntEnum i1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Test::IntEnum, ::Test::IntEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opInt(i1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opInt(::Test::IntEnum i1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opInt(i1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opInt(::Test::IntEnum i1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Test::IntEnum, ::Test::IntEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Test::IntEnum, ::Test::IntEnum)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                ::Test::IntEnum i2;
                ::Test::IntEnum __ret;
                try
                {
                    __ret = __proxy->end_opInt(i2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, i2);
                }
            }
        
        private:
            
            ::std::function<void (::Test::IntEnum, ::Test::IntEnum)> _response;
        };
        return begin_opInt(i1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opInt(::Test::IntEnum i1)
    {
        return begin_opInt(i1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opInt(::Test::IntEnum i1, const ::Ice::Context& __ctx)
    {
        return begin_opInt(i1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opInt(::Test::IntEnum i1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opInt(i1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opInt(::Test::IntEnum i1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opInt(i1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opInt(::Test::IntEnum i1, const ::Test::Callback_TestIntf_opIntPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opInt(i1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opInt(::Test::IntEnum i1, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_opIntPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opInt(i1, &__ctx, __del, __cookie);
    }

    ::Test::IntEnum end_opInt(::Test::IntEnum& i2, const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::IntEnum opInt(::Test::IntEnum, ::Test::IntEnum&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opInt(::Test::IntEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::SimpleEnum opSimple(::Test::SimpleEnum s1, ::Test::SimpleEnum& s2)
    {
        return opSimple(s1, s2, 0);
    }
    ::Test::SimpleEnum opSimple(::Test::SimpleEnum s1, ::Test::SimpleEnum& s2, const ::Ice::Context& __ctx)
    {
        return opSimple(s1, s2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opSimple(::Test::SimpleEnum s1, const ::IceInternal::Function<void (::Test::SimpleEnum, ::Test::SimpleEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opSimple(s1, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opSimple(::Test::SimpleEnum s1, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opSimple(s1, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opSimple(::Test::SimpleEnum s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Test::SimpleEnum, ::Test::SimpleEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opSimple(s1, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opSimple(::Test::SimpleEnum s1, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opSimple(s1, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opSimple(::Test::SimpleEnum s1, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Test::SimpleEnum, ::Test::SimpleEnum)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Test::SimpleEnum, ::Test::SimpleEnum)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                ::Test::SimpleEnum s2;
                ::Test::SimpleEnum __ret;
                try
                {
                    __ret = __proxy->end_opSimple(s2, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, s2);
                }
            }
        
        private:
            
            ::std::function<void (::Test::SimpleEnum, ::Test::SimpleEnum)> _response;
        };
        return begin_opSimple(s1, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opSimple(::Test::SimpleEnum s1)
    {
        return begin_opSimple(s1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSimple(::Test::SimpleEnum s1, const ::Ice::Context& __ctx)
    {
        return begin_opSimple(s1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSimple(::Test::SimpleEnum s1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opSimple(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opSimple(::Test::SimpleEnum s1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opSimple(s1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opSimple(::Test::SimpleEnum s1, const ::Test::Callback_TestIntf_opSimplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opSimple(s1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opSimple(::Test::SimpleEnum s1, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_opSimplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opSimple(s1, &__ctx, __del, __cookie);
    }

    ::Test::SimpleEnum end_opSimple(::Test::SimpleEnum& s2, const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::SimpleEnum opSimple(::Test::SimpleEnum, ::Test::SimpleEnum&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opSimple(::Test::SimpleEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_TestIntf_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TestIntf> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_secure(bool __secure) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_twoway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_oneway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_batchOneway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_datagram() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_batchDatagram() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_compress(bool __compress) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class TestIntf : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Test::ByteEnum opByte(::Test::ByteEnum, ::Test::ByteEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::ShortEnum opShort(::Test::ShortEnum, ::Test::ShortEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::IntEnum opInt(::Test::IntEnum, ::Test::IntEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::SimpleEnum opSimple(::Test::SimpleEnum, ::Test::SimpleEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class TestIntf : virtual public ::IceDelegate::Test::TestIntf,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Test::ByteEnum opByte(::Test::ByteEnum, ::Test::ByteEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::ShortEnum opShort(::Test::ShortEnum, ::Test::ShortEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IntEnum opInt(::Test::IntEnum, ::Test::IntEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::SimpleEnum opSimple(::Test::SimpleEnum, ::Test::SimpleEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class TestIntf : virtual public ::IceDelegate::Test::TestIntf,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Test::ByteEnum opByte(::Test::ByteEnum, ::Test::ByteEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::ShortEnum opShort(::Test::ShortEnum, ::Test::ShortEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IntEnum opInt(::Test::IntEnum, ::Test::IntEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::SimpleEnum opSimple(::Test::SimpleEnum, ::Test::SimpleEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class TestIntf : virtual public ::Ice::Object
{
public:

    typedef TestIntfPrx ProxyType;
    typedef TestIntfPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Test::ByteEnum opByte(::Test::ByteEnum, ::Test::ByteEnum&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opByte(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::ShortEnum opShort(::Test::ShortEnum, ::Test::ShortEnum&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opShort(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::IntEnum opInt(::Test::IntEnum, ::Test::IntEnum&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opInt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::SimpleEnum opSimple(::Test::SimpleEnum, ::Test::SimpleEnum&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opSimple(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    virtual void __writeImpl(const ::Ice::OutputStreamPtr&) const;
    virtual void __readImpl(const ::Ice::InputStreamPtr&);
};

inline bool operator==(const TestIntf& l, const TestIntf& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TestIntf& l, const TestIntf& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_TestIntf_opByte : public Callback_TestIntf_opByte_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Test::ByteEnum, ::Test::ByteEnum);

    CallbackNC_TestIntf_opByte(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::ByteEnum b2;
        ::Test::ByteEnum __ret;
        try
        {
            __ret = __proxy->end_opByte(b2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, b2);
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_opBytePtr
newCallback_TestIntf_opByte(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::ByteEnum, ::Test::ByteEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opByte<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_opBytePtr
newCallback_TestIntf_opByte(T* instance, void (T::*cb)(::Test::ByteEnum, ::Test::ByteEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opByte<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_opByte : public Callback_TestIntf_opByte_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Test::ByteEnum, ::Test::ByteEnum, const CT&);

    Callback_TestIntf_opByte(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::ByteEnum b2;
        ::Test::ByteEnum __ret;
        try
        {
            __ret = __proxy->end_opByte(b2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, b2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_opBytePtr
newCallback_TestIntf_opByte(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::ByteEnum, ::Test::ByteEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opByte<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_opBytePtr
newCallback_TestIntf_opByte(T* instance, void (T::*cb)(::Test::ByteEnum, ::Test::ByteEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opByte<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_opShort : public Callback_TestIntf_opShort_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Test::ShortEnum, ::Test::ShortEnum);

    CallbackNC_TestIntf_opShort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::ShortEnum s2;
        ::Test::ShortEnum __ret;
        try
        {
            __ret = __proxy->end_opShort(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, s2);
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_opShortPtr
newCallback_TestIntf_opShort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::ShortEnum, ::Test::ShortEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opShort<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_opShortPtr
newCallback_TestIntf_opShort(T* instance, void (T::*cb)(::Test::ShortEnum, ::Test::ShortEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opShort<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_opShort : public Callback_TestIntf_opShort_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Test::ShortEnum, ::Test::ShortEnum, const CT&);

    Callback_TestIntf_opShort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::ShortEnum s2;
        ::Test::ShortEnum __ret;
        try
        {
            __ret = __proxy->end_opShort(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, s2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_opShortPtr
newCallback_TestIntf_opShort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::ShortEnum, ::Test::ShortEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opShort<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_opShortPtr
newCallback_TestIntf_opShort(T* instance, void (T::*cb)(::Test::ShortEnum, ::Test::ShortEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opShort<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_opInt : public Callback_TestIntf_opInt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Test::IntEnum, ::Test::IntEnum);

    CallbackNC_TestIntf_opInt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::IntEnum i2;
        ::Test::IntEnum __ret;
        try
        {
            __ret = __proxy->end_opInt(i2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, i2);
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_opIntPtr
newCallback_TestIntf_opInt(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::IntEnum, ::Test::IntEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opInt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_opIntPtr
newCallback_TestIntf_opInt(T* instance, void (T::*cb)(::Test::IntEnum, ::Test::IntEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opInt<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_opInt : public Callback_TestIntf_opInt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Test::IntEnum, ::Test::IntEnum, const CT&);

    Callback_TestIntf_opInt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::IntEnum i2;
        ::Test::IntEnum __ret;
        try
        {
            __ret = __proxy->end_opInt(i2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, i2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_opIntPtr
newCallback_TestIntf_opInt(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::IntEnum, ::Test::IntEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opInt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_opIntPtr
newCallback_TestIntf_opInt(T* instance, void (T::*cb)(::Test::IntEnum, ::Test::IntEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opInt<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_opSimple : public Callback_TestIntf_opSimple_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Test::SimpleEnum, ::Test::SimpleEnum);

    CallbackNC_TestIntf_opSimple(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::SimpleEnum s2;
        ::Test::SimpleEnum __ret;
        try
        {
            __ret = __proxy->end_opSimple(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, s2);
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_opSimplePtr
newCallback_TestIntf_opSimple(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::SimpleEnum, ::Test::SimpleEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opSimple<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_opSimplePtr
newCallback_TestIntf_opSimple(T* instance, void (T::*cb)(::Test::SimpleEnum, ::Test::SimpleEnum), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_opSimple<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_opSimple : public Callback_TestIntf_opSimple_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Test::SimpleEnum, ::Test::SimpleEnum, const CT&);

    Callback_TestIntf_opSimple(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::Test::SimpleEnum s2;
        ::Test::SimpleEnum __ret;
        try
        {
            __ret = __proxy->end_opSimple(s2, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, s2, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_opSimplePtr
newCallback_TestIntf_opSimple(const IceUtil::Handle<T>& instance, void (T::*cb)(::Test::SimpleEnum, ::Test::SimpleEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opSimple<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_opSimplePtr
newCallback_TestIntf_opSimple(T* instance, void (T::*cb)(::Test::SimpleEnum, ::Test::SimpleEnum, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_opSimple<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_shutdown : public Callback_TestIntf_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_shutdown : public Callback_TestIntf_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
