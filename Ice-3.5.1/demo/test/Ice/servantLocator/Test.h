// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class TestIntf;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::TestIntf>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::TestIntf*);

class TestActivation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::TestActivation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::TestActivation*);

}

}

namespace Test
{

class TestIntf;
bool operator==(const TestIntf&, const TestIntf&);
bool operator<(const TestIntf&, const TestIntf&);
::Ice::Object* upCast(::Test::TestIntf*);
typedef ::IceInternal::Handle< ::Test::TestIntf> TestIntfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::TestIntf> TestIntfPrx;
void __patch(TestIntfPtr&, const ::Ice::ObjectPtr&);

class TestActivation;
bool operator==(const TestActivation&, const TestActivation&);
bool operator<(const TestActivation&, const TestActivation&);
::Ice::Object* upCast(::Test::TestActivation*);
typedef ::IceInternal::Handle< ::Test::TestActivation> TestActivationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::TestActivation> TestActivationPrx;
void __patch(TestActivationPtr&, const ::Ice::ObjectPtr&);

class Cookie;
bool operator==(const Cookie&, const Cookie&);
bool operator<(const Cookie&, const Cookie&);
::Ice::LocalObject* upCast(::Test::Cookie*);
typedef ::IceInternal::Handle< ::Test::Cookie> CookiePtr;

}

namespace Test
{

class TestIntfUserException : public ::Ice::UserException
{
public:

    TestIntfUserException() {}
    virtual ~TestIntfUserException() throw();

    virtual ::std::string ice_name() const;
    virtual TestIntfUserException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static TestIntfUserException __TestIntfUserException_init;

class TestImpossibleException : public ::Ice::UserException
{
public:

    TestImpossibleException() {}
    virtual ~TestImpossibleException() throw();

    virtual ::std::string ice_name() const;
    virtual TestImpossibleException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::TestIntfUserException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::TestImpossibleException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test
{

class Callback_TestIntf_requestFailedException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_requestFailedException_Base> Callback_TestIntf_requestFailedExceptionPtr;

class Callback_TestIntf_unknownUserException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownUserException_Base> Callback_TestIntf_unknownUserExceptionPtr;

class Callback_TestIntf_unknownLocalException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownLocalException_Base> Callback_TestIntf_unknownLocalExceptionPtr;

class Callback_TestIntf_unknownException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownException_Base> Callback_TestIntf_unknownExceptionPtr;

class Callback_TestIntf_localException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_localException_Base> Callback_TestIntf_localExceptionPtr;

class Callback_TestIntf_userException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_userException_Base> Callback_TestIntf_userExceptionPtr;

class Callback_TestIntf_stdException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_stdException_Base> Callback_TestIntf_stdExceptionPtr;

class Callback_TestIntf_cppException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_cppException_Base> Callback_TestIntf_cppExceptionPtr;

class Callback_TestIntf_unknownExceptionWithServantException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownExceptionWithServantException_Base> Callback_TestIntf_unknownExceptionWithServantExceptionPtr;

class Callback_TestIntf_impossibleException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_impossibleException_Base> Callback_TestIntf_impossibleExceptionPtr;

class Callback_TestIntf_intfUserException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_intfUserException_Base> Callback_TestIntf_intfUserExceptionPtr;

class Callback_TestIntf_asyncResponse_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_asyncResponse_Base> Callback_TestIntf_asyncResponsePtr;

class Callback_TestIntf_asyncException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_asyncException_Base> Callback_TestIntf_asyncExceptionPtr;

class Callback_TestIntf_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_shutdown_Base> Callback_TestIntf_shutdownPtr;

class Callback_TestActivation_activateServantLocator_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestActivation_activateServantLocator_Base> Callback_TestActivation_activateServantLocatorPtr;

}

namespace IceProxy
{

namespace Test
{

class TestIntf : virtual public ::IceProxy::Ice::Object
{
public:

    void requestFailedException()
    {
        requestFailedException(0);
    }
    void requestFailedException(const ::Ice::Context& __ctx)
    {
        requestFailedException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestFailedException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_requestFailedException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_requestFailedException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestFailedException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestFailedException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_requestFailedException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestFailedException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestFailedException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_requestFailedException()
    {
        return begin_requestFailedException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestFailedException(const ::Ice::Context& __ctx)
    {
        return begin_requestFailedException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestFailedException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFailedException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestFailedException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFailedException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestFailedException(const ::Test::Callback_TestIntf_requestFailedExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFailedException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestFailedException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_requestFailedExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFailedException(&__ctx, __del, __cookie);
    }

    void end_requestFailedException(const ::Ice::AsyncResultPtr&);
    
private:

    void requestFailedException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestFailedException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownUserException()
    {
        unknownUserException(0);
    }
    void unknownUserException(const ::Ice::Context& __ctx)
    {
        unknownUserException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownUserException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownUserException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unknownUserException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownUserException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownUserException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownUserException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownUserException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownUserException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unknownUserException()
    {
        return begin_unknownUserException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownUserException(const ::Ice::Context& __ctx)
    {
        return begin_unknownUserException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownUserException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownUserException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownUserException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownUserException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownUserException(const ::Test::Callback_TestIntf_unknownUserExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownUserException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownUserException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownUserExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownUserException(&__ctx, __del, __cookie);
    }

    void end_unknownUserException(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownUserException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownUserException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownLocalException()
    {
        unknownLocalException(0);
    }
    void unknownLocalException(const ::Ice::Context& __ctx)
    {
        unknownLocalException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownLocalException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownLocalException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unknownLocalException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownLocalException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownLocalException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownLocalException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownLocalException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownLocalException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unknownLocalException()
    {
        return begin_unknownLocalException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownLocalException(const ::Ice::Context& __ctx)
    {
        return begin_unknownLocalException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownLocalException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownLocalException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownLocalException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownLocalException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownLocalException(const ::Test::Callback_TestIntf_unknownLocalExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownLocalException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownLocalException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownLocalExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownLocalException(&__ctx, __del, __cookie);
    }

    void end_unknownLocalException(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownLocalException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownLocalException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownException()
    {
        unknownException(0);
    }
    void unknownException(const ::Ice::Context& __ctx)
    {
        unknownException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unknownException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unknownException()
    {
        return begin_unknownException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownException(const ::Ice::Context& __ctx)
    {
        return begin_unknownException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownException(const ::Test::Callback_TestIntf_unknownExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownException(&__ctx, __del, __cookie);
    }

    void end_unknownException(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void localException()
    {
        localException(0);
    }
    void localException(const ::Ice::Context& __ctx)
    {
        localException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_localException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_localException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_localException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_localException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_localException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_localException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_localException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_localException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_localException()
    {
        return begin_localException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_localException(const ::Ice::Context& __ctx)
    {
        return begin_localException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_localException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_localException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_localException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_localException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_localException(const ::Test::Callback_TestIntf_localExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_localException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_localException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_localExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_localException(&__ctx, __del, __cookie);
    }

    void end_localException(const ::Ice::AsyncResultPtr&);
    
private:

    void localException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_localException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void userException()
    {
        userException(0);
    }
    void userException(const ::Ice::Context& __ctx)
    {
        userException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_userException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_userException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_userException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_userException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_userException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_userException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_userException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_userException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_userException()
    {
        return begin_userException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_userException(const ::Ice::Context& __ctx)
    {
        return begin_userException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_userException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_userException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_userException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_userException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_userException(const ::Test::Callback_TestIntf_userExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_userException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_userException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_userExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_userException(&__ctx, __del, __cookie);
    }

    void end_userException(const ::Ice::AsyncResultPtr&);
    
private:

    void userException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_userException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stdException()
    {
        stdException(0);
    }
    void stdException(const ::Ice::Context& __ctx)
    {
        stdException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stdException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stdException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stdException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stdException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stdException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stdException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stdException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stdException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stdException()
    {
        return begin_stdException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stdException(const ::Ice::Context& __ctx)
    {
        return begin_stdException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stdException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stdException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stdException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stdException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stdException(const ::Test::Callback_TestIntf_stdExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stdException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stdException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_stdExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stdException(&__ctx, __del, __cookie);
    }

    void end_stdException(const ::Ice::AsyncResultPtr&);
    
private:

    void stdException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stdException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cppException()
    {
        cppException(0);
    }
    void cppException(const ::Ice::Context& __ctx)
    {
        cppException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cppException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cppException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cppException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cppException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cppException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cppException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cppException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cppException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cppException()
    {
        return begin_cppException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cppException(const ::Ice::Context& __ctx)
    {
        return begin_cppException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cppException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cppException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cppException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cppException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cppException(const ::Test::Callback_TestIntf_cppExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cppException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cppException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_cppExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cppException(&__ctx, __del, __cookie);
    }

    void end_cppException(const ::Ice::AsyncResultPtr&);
    
private:

    void cppException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cppException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownExceptionWithServantException()
    {
        unknownExceptionWithServantException(0);
    }
    void unknownExceptionWithServantException(const ::Ice::Context& __ctx)
    {
        unknownExceptionWithServantException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownExceptionWithServantException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownExceptionWithServantException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unknownExceptionWithServantException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownExceptionWithServantException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownExceptionWithServantException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unknownExceptionWithServantException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownExceptionWithServantException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownExceptionWithServantException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unknownExceptionWithServantException()
    {
        return begin_unknownExceptionWithServantException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownExceptionWithServantException(const ::Ice::Context& __ctx)
    {
        return begin_unknownExceptionWithServantException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownExceptionWithServantException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownExceptionWithServantException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownExceptionWithServantException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownExceptionWithServantException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownExceptionWithServantException(const ::Test::Callback_TestIntf_unknownExceptionWithServantExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownExceptionWithServantException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownExceptionWithServantException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownExceptionWithServantExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownExceptionWithServantException(&__ctx, __del, __cookie);
    }

    void end_unknownExceptionWithServantException(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownExceptionWithServantException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownExceptionWithServantException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string impossibleException(bool _cpp_throw)
    {
        return impossibleException(_cpp_throw, 0);
    }
    ::std::string impossibleException(bool _cpp_throw, const ::Ice::Context& __ctx)
    {
        return impossibleException(_cpp_throw, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_impossibleException(bool _cpp_throw, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_impossibleException(_cpp_throw, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_impossibleException(bool _cpp_throw, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_impossibleException(_cpp_throw, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_impossibleException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_impossibleException(_cpp_throw, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_impossibleException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_impossibleException(_cpp_throw, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_impossibleException(bool _cpp_throw, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_impossibleException(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_impossibleException(_cpp_throw, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_impossibleException(bool _cpp_throw)
    {
        return begin_impossibleException(_cpp_throw, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_impossibleException(bool _cpp_throw, const ::Ice::Context& __ctx)
    {
        return begin_impossibleException(_cpp_throw, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_impossibleException(bool _cpp_throw, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_impossibleException(_cpp_throw, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_impossibleException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_impossibleException(_cpp_throw, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_impossibleException(bool _cpp_throw, const ::Test::Callback_TestIntf_impossibleExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_impossibleException(_cpp_throw, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_impossibleException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_impossibleExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_impossibleException(_cpp_throw, &__ctx, __del, __cookie);
    }

    ::std::string end_impossibleException(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string impossibleException(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_impossibleException(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string intfUserException(bool _cpp_throw)
    {
        return intfUserException(_cpp_throw, 0);
    }
    ::std::string intfUserException(bool _cpp_throw, const ::Ice::Context& __ctx)
    {
        return intfUserException(_cpp_throw, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_intfUserException(bool _cpp_throw, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_intfUserException(_cpp_throw, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_intfUserException(bool _cpp_throw, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_intfUserException(_cpp_throw, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_intfUserException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_intfUserException(_cpp_throw, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_intfUserException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_intfUserException(_cpp_throw, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_intfUserException(bool _cpp_throw, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_intfUserException(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_intfUserException(_cpp_throw, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_intfUserException(bool _cpp_throw)
    {
        return begin_intfUserException(_cpp_throw, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_intfUserException(bool _cpp_throw, const ::Ice::Context& __ctx)
    {
        return begin_intfUserException(_cpp_throw, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_intfUserException(bool _cpp_throw, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_intfUserException(_cpp_throw, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_intfUserException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_intfUserException(_cpp_throw, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_intfUserException(bool _cpp_throw, const ::Test::Callback_TestIntf_intfUserExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_intfUserException(_cpp_throw, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_intfUserException(bool _cpp_throw, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_intfUserExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_intfUserException(_cpp_throw, &__ctx, __del, __cookie);
    }

    ::std::string end_intfUserException(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string intfUserException(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_intfUserException(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void asyncResponse()
    {
        asyncResponse(0);
    }
    void asyncResponse(const ::Ice::Context& __ctx)
    {
        asyncResponse(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_asyncResponse(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_asyncResponse(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_asyncResponse(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_asyncResponse(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_asyncResponse(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_asyncResponse(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_asyncResponse(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_asyncResponse(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_asyncResponse(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_asyncResponse(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_asyncResponse(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_asyncResponse()
    {
        return begin_asyncResponse(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_asyncResponse(const ::Ice::Context& __ctx)
    {
        return begin_asyncResponse(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_asyncResponse(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncResponse(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_asyncResponse(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncResponse(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_asyncResponse(const ::Test::Callback_TestIntf_asyncResponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncResponse(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_asyncResponse(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_asyncResponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncResponse(&__ctx, __del, __cookie);
    }

    void end_asyncResponse(const ::Ice::AsyncResultPtr&);
    
private:

    void asyncResponse(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_asyncResponse(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void asyncException()
    {
        asyncException(0);
    }
    void asyncException(const ::Ice::Context& __ctx)
    {
        asyncException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_asyncException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_asyncException(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_asyncException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_asyncException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_asyncException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_asyncException(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_asyncException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_asyncException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_asyncException(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_asyncException(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_asyncException(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_asyncException()
    {
        return begin_asyncException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_asyncException(const ::Ice::Context& __ctx)
    {
        return begin_asyncException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_asyncException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_asyncException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_asyncException(const ::Test::Callback_TestIntf_asyncExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_asyncException(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_asyncExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_asyncException(&__ctx, __del, __cookie);
    }

    void end_asyncException(const ::Ice::AsyncResultPtr&);
    
private:

    void asyncException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_asyncException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_TestIntf_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TestIntf> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_secure(bool __secure) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_twoway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_oneway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_batchOneway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_datagram() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_batchDatagram() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_compress(bool __compress) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TestActivation : virtual public ::IceProxy::Ice::Object
{
public:

    void activateServantLocator(bool activate)
    {
        activateServantLocator(activate, 0);
    }
    void activateServantLocator(bool activate, const ::Ice::Context& __ctx)
    {
        activateServantLocator(activate, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_activateServantLocator(bool activate, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_activateServantLocator(activate, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_activateServantLocator(bool activate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activateServantLocator(activate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activateServantLocator(bool activate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_activateServantLocator(activate, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activateServantLocator(bool activate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activateServantLocator(activate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_activateServantLocator(bool activate)
    {
        return begin_activateServantLocator(activate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activateServantLocator(bool activate, const ::Ice::Context& __ctx)
    {
        return begin_activateServantLocator(activate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activateServantLocator(bool activate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateServantLocator(activate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateServantLocator(bool activate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateServantLocator(activate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateServantLocator(bool activate, const ::Test::Callback_TestActivation_activateServantLocatorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateServantLocator(activate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateServantLocator(bool activate, const ::Ice::Context& __ctx, const ::Test::Callback_TestActivation_activateServantLocatorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateServantLocator(activate, &__ctx, __del, __cookie);
    }

    void end_activateServantLocator(const ::Ice::AsyncResultPtr&);
    
private:

    void activateServantLocator(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_activateServantLocator(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TestActivation> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_secure(bool __secure) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_twoway() const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_oneway() const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_batchOneway() const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_datagram() const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_batchDatagram() const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_compress(bool __compress) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestActivation> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TestActivation*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class TestIntf : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void requestFailedException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownUserException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void localException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void userException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void stdException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void cppException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownExceptionWithServantException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string impossibleException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string intfUserException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void asyncResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void asyncException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class TestActivation : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void activateServantLocator(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class TestIntf : virtual public ::IceDelegate::Test::TestIntf,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void requestFailedException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownUserException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void localException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void userException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stdException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void cppException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownExceptionWithServantException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string impossibleException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string intfUserException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void asyncResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void asyncException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestActivation : virtual public ::IceDelegate::Test::TestActivation,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void activateServantLocator(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class TestIntf : virtual public ::IceDelegate::Test::TestIntf,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void requestFailedException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownUserException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void localException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void userException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stdException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void cppException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownExceptionWithServantException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string impossibleException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string intfUserException(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void asyncResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void asyncException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestActivation : virtual public ::IceDelegate::Test::TestActivation,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void activateServantLocator(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class TestIntf : virtual public ::Ice::Object
{
public:

    typedef TestIntfPrx ProxyType;
    typedef TestIntfPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void requestFailedException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestFailedException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownUserException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownUserException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownLocalException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownLocalException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void localException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___localException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void userException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___userException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stdException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stdException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cppException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cppException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownExceptionWithServantException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownExceptionWithServantException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string impossibleException(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___impossibleException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string intfUserException(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___intfUserException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void asyncResponse(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___asyncResponse(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void asyncException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___asyncException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TestIntf& l, const TestIntf& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TestIntf& l, const TestIntf& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TestActivation : virtual public ::Ice::Object
{
public:

    typedef TestActivationPrx ProxyType;
    typedef TestActivationPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void activateServantLocator(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___activateServantLocator(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TestActivation& l, const TestActivation& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TestActivation& l, const TestActivation& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Cookie : virtual public ::Ice::LocalObject
{
public:

    typedef CookiePtr PointerType;

    Cookie()
    {
    }


    virtual ::std::string message() const = 0;
};

inline bool operator==(const Cookie& l, const Cookie& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const Cookie& l, const Cookie& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_TestIntf_requestFailedException : public Callback_TestIntf_requestFailedException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_requestFailedException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_requestFailedException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_requestFailedException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_requestFailedException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_requestFailedException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_requestFailedException : public Callback_TestIntf_requestFailedException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_requestFailedException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_requestFailedException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_requestFailedException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_requestFailedException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_requestFailedExceptionPtr
newCallback_TestIntf_requestFailedException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_requestFailedException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownUserException : public Callback_TestIntf_unknownUserException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownUserException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownUserException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownUserException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownUserException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownUserException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownUserException : public Callback_TestIntf_unknownUserException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownUserException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownUserException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownUserException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownUserException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownUserExceptionPtr
newCallback_TestIntf_unknownUserException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownUserException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownLocalException : public Callback_TestIntf_unknownLocalException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownLocalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownLocalException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownLocalException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownLocalException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownLocalException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownLocalException : public Callback_TestIntf_unknownLocalException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownLocalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownLocalException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownLocalException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownLocalException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownLocalExceptionPtr
newCallback_TestIntf_unknownLocalException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownLocalException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownException : public Callback_TestIntf_unknownException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownException : public Callback_TestIntf_unknownException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownExceptionPtr
newCallback_TestIntf_unknownException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_localException : public Callback_TestIntf_localException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_localException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_localException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_localException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_localException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_localException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_localException : public Callback_TestIntf_localException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_localException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_localException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_localException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_localException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_localExceptionPtr
newCallback_TestIntf_localException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_localException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_userException : public Callback_TestIntf_userException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_userException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_userException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_userException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_userException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_userException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_userException : public Callback_TestIntf_userException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_userException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_userException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_userException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_userException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_userExceptionPtr
newCallback_TestIntf_userException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_userException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_stdException : public Callback_TestIntf_stdException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_stdException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_stdException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_stdException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_stdException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_stdException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_stdException : public Callback_TestIntf_stdException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_stdException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_stdException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_stdException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_stdException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_stdExceptionPtr
newCallback_TestIntf_stdException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_stdException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_cppException : public Callback_TestIntf_cppException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_cppException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_cppException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_cppException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_cppException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_cppException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_cppException : public Callback_TestIntf_cppException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_cppException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_cppException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_cppException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_cppException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_cppExceptionPtr
newCallback_TestIntf_cppException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_cppException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownExceptionWithServantException : public Callback_TestIntf_unknownExceptionWithServantException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownExceptionWithServantException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownExceptionWithServantException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownExceptionWithServantException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownExceptionWithServantException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownExceptionWithServantException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownExceptionWithServantException : public Callback_TestIntf_unknownExceptionWithServantException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownExceptionWithServantException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownExceptionWithServantException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownExceptionWithServantException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownExceptionWithServantException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownExceptionWithServantExceptionPtr
newCallback_TestIntf_unknownExceptionWithServantException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownExceptionWithServantException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_impossibleException : public Callback_TestIntf_impossibleException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TestIntf_impossibleException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_impossibleException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_impossibleExceptionPtr
newCallback_TestIntf_impossibleException(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_impossibleException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_impossibleExceptionPtr
newCallback_TestIntf_impossibleException(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_impossibleException<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_impossibleException : public Callback_TestIntf_impossibleException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TestIntf_impossibleException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_impossibleException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_impossibleExceptionPtr
newCallback_TestIntf_impossibleException(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_impossibleException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_impossibleExceptionPtr
newCallback_TestIntf_impossibleException(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_impossibleException<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_intfUserException : public Callback_TestIntf_intfUserException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TestIntf_intfUserException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_intfUserException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_intfUserExceptionPtr
newCallback_TestIntf_intfUserException(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_intfUserException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_intfUserExceptionPtr
newCallback_TestIntf_intfUserException(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_intfUserException<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_intfUserException : public Callback_TestIntf_intfUserException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TestIntf_intfUserException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_intfUserException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_intfUserExceptionPtr
newCallback_TestIntf_intfUserException(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_intfUserException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_intfUserExceptionPtr
newCallback_TestIntf_intfUserException(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_intfUserException<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_asyncResponse : public Callback_TestIntf_asyncResponse_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_asyncResponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_asyncResponse(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncResponse<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncResponse<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncResponse<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncResponse<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_asyncResponse : public Callback_TestIntf_asyncResponse_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_asyncResponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_asyncResponse(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncResponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncResponse<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncResponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_asyncResponsePtr
newCallback_TestIntf_asyncResponse(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncResponse<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_asyncException : public Callback_TestIntf_asyncException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_asyncException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_asyncException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_asyncException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_asyncException : public Callback_TestIntf_asyncException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_asyncException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_asyncException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_asyncExceptionPtr
newCallback_TestIntf_asyncException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_asyncException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_shutdown : public Callback_TestIntf_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_shutdown : public Callback_TestIntf_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestActivation_activateServantLocator : public Callback_TestActivation_activateServantLocator_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestActivation_activateServantLocator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestActivation_activateServantLocator<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestActivation_activateServantLocator<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestActivation_activateServantLocator<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestActivation_activateServantLocator<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestActivation_activateServantLocator : public Callback_TestActivation_activateServantLocator_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestActivation_activateServantLocator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestActivation_activateServantLocator<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestActivation_activateServantLocator<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestActivation_activateServantLocator<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestActivation_activateServantLocatorPtr
newCallback_TestActivation_activateServantLocator(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestActivation_activateServantLocator<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
