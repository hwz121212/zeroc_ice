// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/SlicedData.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Test__Initial__shutdown_name = "shutdown";

const ::std::string __Test__Initial__pingPong_name = "pingPong";

const ::std::string __Test__Initial__opOptionalException_name = "opOptionalException";

const ::std::string __Test__Initial__opDerivedException_name = "opDerivedException";

const ::std::string __Test__Initial__opRequiredException_name = "opRequiredException";

const ::std::string __Test__Initial__opByte_name = "opByte";

const ::std::string __Test__Initial__opBool_name = "opBool";

const ::std::string __Test__Initial__opShort_name = "opShort";

const ::std::string __Test__Initial__opInt_name = "opInt";

const ::std::string __Test__Initial__opLong_name = "opLong";

const ::std::string __Test__Initial__opFloat_name = "opFloat";

const ::std::string __Test__Initial__opDouble_name = "opDouble";

const ::std::string __Test__Initial__opString_name = "opString";

const ::std::string __Test__Initial__opMyEnum_name = "opMyEnum";

const ::std::string __Test__Initial__opSmallStruct_name = "opSmallStruct";

const ::std::string __Test__Initial__opFixedStruct_name = "opFixedStruct";

const ::std::string __Test__Initial__opVarStruct_name = "opVarStruct";

const ::std::string __Test__Initial__opOneOptional_name = "opOneOptional";

const ::std::string __Test__Initial__opOneOptionalProxy_name = "opOneOptionalProxy";

const ::std::string __Test__Initial__opByteSeq_name = "opByteSeq";

const ::std::string __Test__Initial__opBoolSeq_name = "opBoolSeq";

const ::std::string __Test__Initial__opShortSeq_name = "opShortSeq";

const ::std::string __Test__Initial__opIntSeq_name = "opIntSeq";

const ::std::string __Test__Initial__opLongSeq_name = "opLongSeq";

const ::std::string __Test__Initial__opFloatSeq_name = "opFloatSeq";

const ::std::string __Test__Initial__opDoubleSeq_name = "opDoubleSeq";

const ::std::string __Test__Initial__opStringSeq_name = "opStringSeq";

const ::std::string __Test__Initial__opSmallStructSeq_name = "opSmallStructSeq";

const ::std::string __Test__Initial__opSmallStructList_name = "opSmallStructList";

const ::std::string __Test__Initial__opFixedStructSeq_name = "opFixedStructSeq";

const ::std::string __Test__Initial__opFixedStructList_name = "opFixedStructList";

const ::std::string __Test__Initial__opVarStructSeq_name = "opVarStructSeq";

const ::std::string __Test__Initial__opSerializable_name = "opSerializable";

const ::std::string __Test__Initial__opIntIntDict_name = "opIntIntDict";

const ::std::string __Test__Initial__opStringIntDict_name = "opStringIntDict";

const ::std::string __Test__Initial__opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

const ::std::string __Test__Initial__sendOptionalClass_name = "sendOptionalClass";

const ::std::string __Test__Initial__returnOptionalClass_name = "returnOptionalClass";

const ::std::string __Test__Initial__supportsRequiredParams_name = "supportsRequiredParams";

const ::std::string __Test__Initial__supportsJavaSerializable_name = "supportsJavaSerializable";

const ::std::string __Test__Initial__supportsCsharpSerializable_name = "supportsCsharpSerializable";

}

namespace
{

const char* __Test__OptionalException_name = "Test::OptionalException";

struct __F__Test__OptionalException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::OptionalException();
    }
};

class __F__Test__OptionalException__Init
{
public:

    __F__Test__OptionalException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::OptionalException", new __F__Test__OptionalException);
    }

    ~__F__Test__OptionalException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::OptionalException");
    }
};

const __F__Test__OptionalException__Init __F__Test__OptionalException__i;

}

Test::OptionalException::OptionalException() :
    req(false),
    a(5)
{
}

Test::OptionalException::OptionalException(bool __ice_req, const IceUtil::Optional< ::Ice::Int>& __ice_a, const IceUtil::Optional< ::std::string>& __ice_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& __ice_o) :
    ::Ice::UserException(),
    req(__ice_req),
    a(__ice_a),
    b(__ice_b),
    o(__ice_o)
{
}

Test::OptionalException::~OptionalException() throw()
{
}

::std::string
Test::OptionalException::ice_name() const
{
    return __Test__OptionalException_name;
}

Test::OptionalException*
Test::OptionalException::ice_clone() const
{
    return new OptionalException(*this);
}

void
Test::OptionalException::ice_throw() const
{
    throw *this;
}

void
Test::OptionalException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::OptionalException", -1, true);
    __os->write(req);
    __os->write(1, a);
    __os->write(2, b);
    __os->write(50, o);
    __os->endWriteSlice();
}

void
Test::OptionalException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(req);
    __is->read(1, a);
    __is->read(2, b);
    __is->read(50, o);
    __is->endReadSlice();
}

namespace
{

const char* __Test__DerivedException_name = "Test::DerivedException";

struct __F__Test__DerivedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::DerivedException();
    }
};

class __F__Test__DerivedException__Init
{
public:

    __F__Test__DerivedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::DerivedException", new __F__Test__DerivedException);
    }

    ~__F__Test__DerivedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::DerivedException");
    }
};

const __F__Test__DerivedException__Init __F__Test__DerivedException__i;

}

Test::DerivedException::DerivedException() :
    ss("test")
{
}

Test::DerivedException::DerivedException(bool __ice_req, const IceUtil::Optional< ::Ice::Int>& __ice_a, const IceUtil::Optional< ::std::string>& __ice_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& __ice_o, const IceUtil::Optional< ::std::string>& __ice_ss, const IceUtil::Optional< ::Test::OneOptionalPtr>& __ice_o2) :
    ::Test::OptionalException(__ice_req, __ice_a, __ice_b, __ice_o),
    ss(__ice_ss),
    o2(__ice_o2)
{
}

Test::DerivedException::~DerivedException() throw()
{
}

::std::string
Test::DerivedException::ice_name() const
{
    return __Test__DerivedException_name;
}

Test::DerivedException*
Test::DerivedException::ice_clone() const
{
    return new DerivedException(*this);
}

void
Test::DerivedException::ice_throw() const
{
    throw *this;
}

void
Test::DerivedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::DerivedException", -1, false);
    __os->write(600, ss);
    __os->write(601, o2);
    __os->endWriteSlice();
    ::Test::OptionalException::__writeImpl(__os);
}

void
Test::DerivedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(600, ss);
    __is->read(601, o2);
    __is->endReadSlice();
    ::Test::OptionalException::__readImpl(__is);
}

namespace
{

const char* __Test__RequiredException_name = "Test::RequiredException";

struct __F__Test__RequiredException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::RequiredException();
    }
};

class __F__Test__RequiredException__Init
{
public:

    __F__Test__RequiredException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::RequiredException", new __F__Test__RequiredException);
    }

    ~__F__Test__RequiredException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::RequiredException");
    }
};

const __F__Test__RequiredException__Init __F__Test__RequiredException__i;

}

Test::RequiredException::RequiredException() :
    ss("test")
{
}

Test::RequiredException::RequiredException(bool __ice_req, const IceUtil::Optional< ::Ice::Int>& __ice_a, const IceUtil::Optional< ::std::string>& __ice_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& __ice_o, const ::std::string& __ice_ss, const ::Test::OneOptionalPtr& __ice_o2) :
    ::Test::OptionalException(__ice_req, __ice_a, __ice_b, __ice_o),
    ss(__ice_ss),
    o2(__ice_o2)
{
}

Test::RequiredException::~RequiredException() throw()
{
}

::std::string
Test::RequiredException::ice_name() const
{
    return __Test__RequiredException_name;
}

Test::RequiredException*
Test::RequiredException::ice_clone() const
{
    return new RequiredException(*this);
}

void
Test::RequiredException::ice_throw() const
{
    throw *this;
}

bool
Test::RequiredException::__usesClasses() const
{
    return true;
}

void
Test::RequiredException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::RequiredException", -1, false);
    __os->write(ss);
    __os->write(o2);
    __os->endWriteSlice();
    ::Test::OptionalException::__writeImpl(__os);
}

void
Test::RequiredException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(ss);
    __is->read(o2);
    __is->endReadSlice();
    ::Test::OptionalException::__readImpl(__is);
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::OneOptional* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::OneOptional>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::OneOptional;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::OneOptional::ice_staticId()
{
    return ::Test::OneOptional::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::OneOptional::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::OneOptional);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::OneOptional::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::OneOptional);
}

::IceProxy::Ice::Object*
IceProxy::Test::OneOptional::__newInstance() const
{
    return new OneOptional;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MultiOptional* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MultiOptional>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MultiOptional;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MultiOptional::ice_staticId()
{
    return ::Test::MultiOptional::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MultiOptional::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MultiOptional);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MultiOptional::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MultiOptional);
}

::IceProxy::Ice::Object*
IceProxy::Test::MultiOptional::__newInstance() const
{
    return new MultiOptional;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::A* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::A;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::A::ice_staticId()
{
    return ::Test::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::B* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::B::ice_staticId()
{
    return ::Test::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::C* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::WD* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::WD>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::WD;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::WD::ice_staticId()
{
    return ::Test::WD::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::WD::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::WD);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::WD::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::WD);
}

::IceProxy::Ice::Object*
IceProxy::Test::WD::__newInstance() const
{
    return new WD;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::OptionalWithCustom* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::OptionalWithCustom>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::OptionalWithCustom;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::OptionalWithCustom::ice_staticId()
{
    return ::Test::OptionalWithCustom::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::OptionalWithCustom::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::OptionalWithCustom);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::OptionalWithCustom::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::OptionalWithCustom);
}

::IceProxy::Ice::Object*
IceProxy::Test::OptionalWithCustom::__newInstance() const
{
    return new OptionalWithCustom;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::E* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::E>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::E;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::E::ice_staticId()
{
    return ::Test::E::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::E::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::E);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::E::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::E);
}

::IceProxy::Ice::Object*
IceProxy::Test::E::__newInstance() const
{
    return new E;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::F* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::F>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::F;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::F::ice_staticId()
{
    return ::Test::F::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::F::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::F);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::F::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::F);
}

::IceProxy::Ice::Object*
IceProxy::Test::F::__newInstance() const
{
    return new F;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Initial* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Initial;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::Initial::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__Initial__shutdown_name);
}

::Ice::ObjectPtr
IceProxy::Test::Initial::pingPong(const ::Ice::ObjectPtr& o, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__pingPong_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__pingPong_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->pingPong(o, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_pingPong(const ::Ice::ObjectPtr& o, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__pingPong_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__pingPong_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__pingPong_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(o);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::ObjectPtr
IceProxy::Test::Initial::end_pingPong(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__pingPong_name);
    ::Ice::ObjectPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Test::Initial::opOptionalException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opOptionalException_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opOptionalException_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->opOptionalException(a, b, o, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opOptionalException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opOptionalException_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opOptionalException_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opOptionalException_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(1, a);
        __os->write(2, b);
        __os->write(3, o);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_opOptionalException(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opOptionalException_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Test::OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Test::Initial::opDerivedException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opDerivedException_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opDerivedException_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->opDerivedException(a, b, o, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opDerivedException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opDerivedException_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opDerivedException_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opDerivedException_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(1, a);
        __os->write(2, b);
        __os->write(3, o);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_opDerivedException(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opDerivedException_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Test::OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Test::Initial::opRequiredException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opRequiredException_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opRequiredException_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->opRequiredException(a, b, o, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opRequiredException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opRequiredException_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opRequiredException_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opRequiredException_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(1, a);
        __os->write(2, b);
        __os->write(3, o);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_opRequiredException(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opRequiredException_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Test::OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Ice::Byte>
IceProxy::Test::Initial::opByte(const IceUtil::Optional< ::Ice::Byte>& p1, IceUtil::Optional< ::Ice::Byte>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opByte_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opByte_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opByte(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opByte(const IceUtil::Optional< ::Ice::Byte>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opByte_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opByte_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opByte_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Byte>
IceProxy::Test::Initial::end_opByte(IceUtil::Optional< ::Ice::Byte>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opByte_name);
    IceUtil::Optional< ::Ice::Byte> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional<bool>
IceProxy::Test::Initial::opBool(const IceUtil::Optional<bool>& p1, IceUtil::Optional<bool>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opBool_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opBool_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opBool(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opBool(const IceUtil::Optional<bool>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opBool_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opBool_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opBool_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional<bool>
IceProxy::Test::Initial::end_opBool(IceUtil::Optional<bool>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opBool_name);
    IceUtil::Optional<bool> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Ice::Short>
IceProxy::Test::Initial::opShort(const IceUtil::Optional< ::Ice::Short>& p1, IceUtil::Optional< ::Ice::Short>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opShort_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opShort_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opShort(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opShort(const IceUtil::Optional< ::Ice::Short>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opShort_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opShort_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opShort_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Short>
IceProxy::Test::Initial::end_opShort(IceUtil::Optional< ::Ice::Short>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opShort_name);
    IceUtil::Optional< ::Ice::Short> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Ice::Int>
IceProxy::Test::Initial::opInt(const IceUtil::Optional< ::Ice::Int>& p1, IceUtil::Optional< ::Ice::Int>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opInt_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opInt_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opInt(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opInt(const IceUtil::Optional< ::Ice::Int>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opInt_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opInt_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opInt_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Int>
IceProxy::Test::Initial::end_opInt(IceUtil::Optional< ::Ice::Int>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opInt_name);
    IceUtil::Optional< ::Ice::Int> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Ice::Long>
IceProxy::Test::Initial::opLong(const IceUtil::Optional< ::Ice::Long>& p1, IceUtil::Optional< ::Ice::Long>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opLong_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opLong_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opLong(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opLong(const IceUtil::Optional< ::Ice::Long>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opLong_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opLong_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opLong_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(1, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Long>
IceProxy::Test::Initial::end_opLong(IceUtil::Optional< ::Ice::Long>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opLong_name);
    IceUtil::Optional< ::Ice::Long> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(2, p3);
        __is->read(3, __ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Ice::Float>
IceProxy::Test::Initial::opFloat(const IceUtil::Optional< ::Ice::Float>& p1, IceUtil::Optional< ::Ice::Float>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opFloat_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opFloat_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opFloat(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opFloat(const IceUtil::Optional< ::Ice::Float>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opFloat_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opFloat_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opFloat_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Float>
IceProxy::Test::Initial::end_opFloat(IceUtil::Optional< ::Ice::Float>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFloat_name);
    IceUtil::Optional< ::Ice::Float> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Ice::Double>
IceProxy::Test::Initial::opDouble(const IceUtil::Optional< ::Ice::Double>& p1, IceUtil::Optional< ::Ice::Double>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opDouble_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opDouble_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opDouble(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opDouble(const IceUtil::Optional< ::Ice::Double>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opDouble_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opDouble_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opDouble_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Double>
IceProxy::Test::Initial::end_opDouble(IceUtil::Optional< ::Ice::Double>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opDouble_name);
    IceUtil::Optional< ::Ice::Double> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::std::string>
IceProxy::Test::Initial::opString(const IceUtil::Optional< ::std::string>& p1, IceUtil::Optional< ::std::string>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opString_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opString_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opString(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opString(const IceUtil::Optional< ::std::string>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opString_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opString_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opString_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::std::string>
IceProxy::Test::Initial::end_opString(IceUtil::Optional< ::std::string>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opString_name);
    IceUtil::Optional< ::std::string> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::MyEnum>
IceProxy::Test::Initial::opMyEnum(const IceUtil::Optional< ::Test::MyEnum>& p1, IceUtil::Optional< ::Test::MyEnum>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opMyEnum_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opMyEnum_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opMyEnum(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opMyEnum(const IceUtil::Optional< ::Test::MyEnum>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opMyEnum_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opMyEnum_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opMyEnum_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::MyEnum>
IceProxy::Test::Initial::end_opMyEnum(IceUtil::Optional< ::Test::MyEnum>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opMyEnum_name);
    IceUtil::Optional< ::Test::MyEnum> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::SmallStruct>
IceProxy::Test::Initial::opSmallStruct(const IceUtil::Optional< ::Test::SmallStruct>& p1, IceUtil::Optional< ::Test::SmallStruct>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opSmallStruct_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opSmallStruct_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opSmallStruct(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opSmallStruct(const IceUtil::Optional< ::Test::SmallStruct>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opSmallStruct_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opSmallStruct_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opSmallStruct_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::SmallStruct>
IceProxy::Test::Initial::end_opSmallStruct(IceUtil::Optional< ::Test::SmallStruct>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opSmallStruct_name);
    IceUtil::Optional< ::Test::SmallStruct> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::FixedStruct>
IceProxy::Test::Initial::opFixedStruct(const IceUtil::Optional< ::Test::FixedStruct>& p1, IceUtil::Optional< ::Test::FixedStruct>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opFixedStruct_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opFixedStruct_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opFixedStruct(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opFixedStruct(const IceUtil::Optional< ::Test::FixedStruct>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opFixedStruct_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opFixedStruct_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opFixedStruct_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::FixedStruct>
IceProxy::Test::Initial::end_opFixedStruct(IceUtil::Optional< ::Test::FixedStruct>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFixedStruct_name);
    IceUtil::Optional< ::Test::FixedStruct> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::VarStruct>
IceProxy::Test::Initial::opVarStruct(const IceUtil::Optional< ::Test::VarStruct>& p1, IceUtil::Optional< ::Test::VarStruct>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opVarStruct_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opVarStruct_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opVarStruct(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opVarStruct(const IceUtil::Optional< ::Test::VarStruct>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opVarStruct_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opVarStruct_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opVarStruct_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::VarStruct>
IceProxy::Test::Initial::end_opVarStruct(IceUtil::Optional< ::Test::VarStruct>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opVarStruct_name);
    IceUtil::Optional< ::Test::VarStruct> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::OneOptionalPtr>
IceProxy::Test::Initial::opOneOptional(const IceUtil::Optional< ::Test::OneOptionalPtr>& p1, IceUtil::Optional< ::Test::OneOptionalPtr>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opOneOptional_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opOneOptional_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opOneOptional(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opOneOptional(const IceUtil::Optional< ::Test::OneOptionalPtr>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opOneOptional_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opOneOptional_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opOneOptional_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::OneOptionalPtr>
IceProxy::Test::Initial::end_opOneOptional(IceUtil::Optional< ::Test::OneOptionalPtr>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opOneOptional_name);
    IceUtil::Optional< ::Test::OneOptionalPtr> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::OneOptionalPrx>
IceProxy::Test::Initial::opOneOptionalProxy(const IceUtil::Optional< ::Test::OneOptionalPrx>& p1, IceUtil::Optional< ::Test::OneOptionalPrx>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opOneOptionalProxy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opOneOptionalProxy_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opOneOptionalProxy(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opOneOptionalProxy(const IceUtil::Optional< ::Test::OneOptionalPrx>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opOneOptionalProxy_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opOneOptionalProxy_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opOneOptionalProxy_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::OneOptionalPrx>
IceProxy::Test::Initial::end_opOneOptionalProxy(IceUtil::Optional< ::Test::OneOptionalPrx>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opOneOptionalProxy_name);
    IceUtil::Optional< ::Test::OneOptionalPrx> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::ByteSeq>
IceProxy::Test::Initial::opByteSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& p1, IceUtil::Optional< ::Test::ByteSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opByteSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opByteSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opByteSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opByteSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opByteSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opByteSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opByteSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::ByteSeq>
IceProxy::Test::Initial::end_opByteSeq(IceUtil::Optional< ::Test::ByteSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opByteSeq_name);
    IceUtil::Optional< ::Test::ByteSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opByteSeq(IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& p3, IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opByteSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::BoolSeq>
IceProxy::Test::Initial::opBoolSeq(const IceUtil::Optional< ::std::pair<const bool*, const bool*> >& p1, IceUtil::Optional< ::Test::BoolSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opBoolSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opBoolSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opBoolSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opBoolSeq(const IceUtil::Optional< ::std::pair<const bool*, const bool*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opBoolSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opBoolSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opBoolSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::BoolSeq>
IceProxy::Test::Initial::end_opBoolSeq(IceUtil::Optional< ::Test::BoolSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opBoolSeq_name);
    IceUtil::Optional< ::Test::BoolSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opBoolSeq(IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray<bool>, ::std::pair<const bool*, const bool*> > >& p3, IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray<bool>, ::std::pair<const bool*, const bool*> > >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opBoolSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::ShortSeq>
IceProxy::Test::Initial::opShortSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Short*, const ::Ice::Short*> >& p1, IceUtil::Optional< ::Test::ShortSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opShortSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opShortSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opShortSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opShortSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Short*, const ::Ice::Short*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opShortSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opShortSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opShortSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::ShortSeq>
IceProxy::Test::Initial::end_opShortSeq(IceUtil::Optional< ::Test::ShortSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opShortSeq_name);
    IceUtil::Optional< ::Test::ShortSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opShortSeq(IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Short>, ::std::pair<const  ::Ice::Short*, const  ::Ice::Short*> > >& p3, IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Short>, ::std::pair<const  ::Ice::Short*, const  ::Ice::Short*> > >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opShortSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::IntSeq>
IceProxy::Test::Initial::opIntSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Int*, const ::Ice::Int*> >& p1, IceUtil::Optional< ::Test::IntSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opIntSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opIntSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opIntSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opIntSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Int*, const ::Ice::Int*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opIntSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opIntSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opIntSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::IntSeq>
IceProxy::Test::Initial::end_opIntSeq(IceUtil::Optional< ::Test::IntSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opIntSeq_name);
    IceUtil::Optional< ::Test::IntSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opIntSeq(IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Int>, ::std::pair<const  ::Ice::Int*, const  ::Ice::Int*> > >& p3, IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Int>, ::std::pair<const  ::Ice::Int*, const  ::Ice::Int*> > >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opIntSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::LongSeq>
IceProxy::Test::Initial::opLongSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Long*, const ::Ice::Long*> >& p1, IceUtil::Optional< ::Test::LongSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opLongSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opLongSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opLongSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opLongSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Long*, const ::Ice::Long*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opLongSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opLongSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opLongSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::LongSeq>
IceProxy::Test::Initial::end_opLongSeq(IceUtil::Optional< ::Test::LongSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opLongSeq_name);
    IceUtil::Optional< ::Test::LongSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opLongSeq(IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > >& p3, IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opLongSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::FloatSeq>
IceProxy::Test::Initial::opFloatSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Float*, const ::Ice::Float*> >& p1, IceUtil::Optional< ::Test::FloatSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opFloatSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opFloatSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opFloatSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opFloatSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Float*, const ::Ice::Float*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opFloatSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opFloatSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opFloatSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::FloatSeq>
IceProxy::Test::Initial::end_opFloatSeq(IceUtil::Optional< ::Test::FloatSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFloatSeq_name);
    IceUtil::Optional< ::Test::FloatSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opFloatSeq(IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Float>, ::std::pair<const  ::Ice::Float*, const  ::Ice::Float*> > >& p3, IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Float>, ::std::pair<const  ::Ice::Float*, const  ::Ice::Float*> > >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFloatSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::DoubleSeq>
IceProxy::Test::Initial::opDoubleSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Double*, const ::Ice::Double*> >& p1, IceUtil::Optional< ::Test::DoubleSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opDoubleSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opDoubleSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opDoubleSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opDoubleSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Double*, const ::Ice::Double*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opDoubleSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opDoubleSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opDoubleSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::DoubleSeq>
IceProxy::Test::Initial::end_opDoubleSeq(IceUtil::Optional< ::Test::DoubleSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opDoubleSeq_name);
    IceUtil::Optional< ::Test::DoubleSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opDoubleSeq(IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > >& p3, IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opDoubleSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::StringSeq>
IceProxy::Test::Initial::opStringSeq(const IceUtil::Optional< ::std::pair< ::Test::StringSeq::const_iterator,  ::Test::StringSeq::const_iterator> >& p1, IceUtil::Optional< ::Test::StringSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opStringSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opStringSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opStringSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opStringSeq(const IceUtil::Optional< ::std::pair< ::Test::StringSeq::const_iterator,  ::Test::StringSeq::const_iterator> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opStringSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opStringSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opStringSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::StringSeq>
IceProxy::Test::Initial::end_opStringSeq(IceUtil::Optional< ::Test::StringSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opStringSeq_name);
    IceUtil::Optional< ::Test::StringSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::SmallStructSeq>
IceProxy::Test::Initial::opSmallStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, IceUtil::Optional< ::Test::SmallStructSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opSmallStructSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opSmallStructSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opSmallStructSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opSmallStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opSmallStructSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opSmallStructSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opSmallStructSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::SmallStructSeq>
IceProxy::Test::Initial::end_opSmallStructSeq(IceUtil::Optional< ::Test::SmallStructSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opSmallStructSeq_name);
    IceUtil::Optional< ::Test::SmallStructSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opSmallStructSeq(IceUtil::Optional< ::std::vector< ::Test::SmallStruct> >& p3, IceUtil::Optional< ::std::vector< ::Test::SmallStruct> >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opSmallStructSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::SmallStructList>
IceProxy::Test::Initial::opSmallStructList(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, IceUtil::Optional< ::Test::SmallStructList>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opSmallStructList_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opSmallStructList_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opSmallStructList(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opSmallStructList(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opSmallStructList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opSmallStructList_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opSmallStructList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::SmallStructList>
IceProxy::Test::Initial::end_opSmallStructList(IceUtil::Optional< ::Test::SmallStructList>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opSmallStructList_name);
    IceUtil::Optional< ::Test::SmallStructList> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opSmallStructList(IceUtil::Optional< ::std::vector< ::Test::SmallStruct> >& p3, IceUtil::Optional< ::std::vector< ::Test::SmallStruct> >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opSmallStructList_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::FixedStructSeq>
IceProxy::Test::Initial::opFixedStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, IceUtil::Optional< ::Test::FixedStructSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opFixedStructSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opFixedStructSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opFixedStructSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opFixedStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opFixedStructSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opFixedStructSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opFixedStructSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::FixedStructSeq>
IceProxy::Test::Initial::end_opFixedStructSeq(IceUtil::Optional< ::Test::FixedStructSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFixedStructSeq_name);
    IceUtil::Optional< ::Test::FixedStructSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opFixedStructSeq(IceUtil::Optional< ::std::vector< ::Test::FixedStruct> >& p3, IceUtil::Optional< ::std::vector< ::Test::FixedStruct> >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFixedStructSeq_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::FixedStructList>
IceProxy::Test::Initial::opFixedStructList(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, IceUtil::Optional< ::Test::FixedStructList>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opFixedStructList_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opFixedStructList_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opFixedStructList(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opFixedStructList(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opFixedStructList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opFixedStructList_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opFixedStructList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::FixedStructList>
IceProxy::Test::Initial::end_opFixedStructList(IceUtil::Optional< ::Test::FixedStructList>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFixedStructList_name);
    IceUtil::Optional< ::Test::FixedStructList> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::Test::Initial::___end_opFixedStructList(IceUtil::Optional< ::std::vector< ::Test::FixedStruct> >& p3, IceUtil::Optional< ::std::vector< ::Test::FixedStruct> >& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opFixedStructList_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(1, __ret);
    __is->read(3, p3);
    __result->__endReadParams();
}

IceUtil::Optional< ::Test::VarStructSeq>
IceProxy::Test::Initial::opVarStructSeq(const IceUtil::Optional< ::std::pair< ::Test::VarStructSeq::const_iterator,  ::Test::VarStructSeq::const_iterator> >& p1, IceUtil::Optional< ::Test::VarStructSeq>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opVarStructSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opVarStructSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opVarStructSeq(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opVarStructSeq(const IceUtil::Optional< ::std::pair< ::Test::VarStructSeq::const_iterator,  ::Test::VarStructSeq::const_iterator> >& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opVarStructSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opVarStructSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opVarStructSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::VarStructSeq>
IceProxy::Test::Initial::end_opVarStructSeq(IceUtil::Optional< ::Test::VarStructSeq>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opVarStructSeq_name);
    IceUtil::Optional< ::Test::VarStructSeq> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::Serializable>
IceProxy::Test::Initial::opSerializable(const IceUtil::Optional< ::Test::Serializable>& p1, IceUtil::Optional< ::Test::Serializable>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opSerializable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opSerializable_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opSerializable(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opSerializable(const IceUtil::Optional< ::Test::Serializable>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opSerializable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opSerializable_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opSerializable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::Serializable>
IceProxy::Test::Initial::end_opSerializable(IceUtil::Optional< ::Test::Serializable>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opSerializable_name);
    IceUtil::Optional< ::Test::Serializable> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::IntIntDict>
IceProxy::Test::Initial::opIntIntDict(const IceUtil::Optional< ::Test::IntIntDict>& p1, IceUtil::Optional< ::Test::IntIntDict>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opIntIntDict_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opIntIntDict_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opIntIntDict(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opIntIntDict(const IceUtil::Optional< ::Test::IntIntDict>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opIntIntDict_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opIntIntDict_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opIntIntDict_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::IntIntDict>
IceProxy::Test::Initial::end_opIntIntDict(IceUtil::Optional< ::Test::IntIntDict>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opIntIntDict_name);
    IceUtil::Optional< ::Test::IntIntDict> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

IceUtil::Optional< ::Test::StringIntDict>
IceProxy::Test::Initial::opStringIntDict(const IceUtil::Optional< ::Test::StringIntDict>& p1, IceUtil::Optional< ::Test::StringIntDict>& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opStringIntDict_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opStringIntDict_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opStringIntDict(p1, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opStringIntDict(const IceUtil::Optional< ::Test::StringIntDict>& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opStringIntDict_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opStringIntDict_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opStringIntDict_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

IceUtil::Optional< ::Test::StringIntDict>
IceProxy::Test::Initial::end_opStringIntDict(IceUtil::Optional< ::Test::StringIntDict>& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opStringIntDict_name);
    IceUtil::Optional< ::Test::StringIntDict> __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Test::Initial::opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opClassAndUnknownOptional_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->opClassAndUnknownOptional(p, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opClassAndUnknownOptional_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opClassAndUnknownOptional_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_opClassAndUnknownOptional(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__Initial__opClassAndUnknownOptional_name);
}

void
IceProxy::Test::Initial::sendOptionalClass(bool req, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__sendOptionalClass_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->sendOptionalClass(req, o, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_sendOptionalClass(bool req, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__sendOptionalClass_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__sendOptionalClass_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(req);
        __os->write(1, o);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_sendOptionalClass(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__Initial__sendOptionalClass_name);
}

void
IceProxy::Test::Initial::returnOptionalClass(bool req, IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__returnOptionalClass_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__returnOptionalClass_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->returnOptionalClass(req, o, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_returnOptionalClass(bool req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__returnOptionalClass_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__returnOptionalClass_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__returnOptionalClass_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(req);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_returnOptionalClass(IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__returnOptionalClass_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(1, o);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::Initial::supportsRequiredParams(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__supportsRequiredParams_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__supportsRequiredParams_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->supportsRequiredParams(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_supportsRequiredParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__supportsRequiredParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__supportsRequiredParams_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__supportsRequiredParams_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::Initial::end_supportsRequiredParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__supportsRequiredParams_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::Initial::supportsJavaSerializable(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__supportsJavaSerializable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__supportsJavaSerializable_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->supportsJavaSerializable(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_supportsJavaSerializable(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__supportsJavaSerializable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__supportsJavaSerializable_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__supportsJavaSerializable_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::Initial::end_supportsJavaSerializable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__supportsJavaSerializable_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::Initial::supportsCsharpSerializable(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__supportsCsharpSerializable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__supportsCsharpSerializable_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->supportsCsharpSerializable(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_supportsCsharpSerializable(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__supportsCsharpSerializable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__supportsCsharpSerializable_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__supportsCsharpSerializable_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::Initial::end_supportsCsharpSerializable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__supportsCsharpSerializable_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Initial::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Initial);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Initial::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Initial);
}

::IceProxy::Ice::Object*
IceProxy::Test::Initial::__newInstance() const
{
    return new Initial;
}

void
IceDelegateM::Test::Initial::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::ObjectPtr
IceDelegateM::Test::Initial::pingPong(const ::Ice::ObjectPtr& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__pingPong_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(o);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::ObjectPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::opOptionalException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opOptionalException_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(1, a);
        __os->write(2, b);
        __os->write(3, o);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Test::OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::opDerivedException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opDerivedException_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(1, a);
        __os->write(2, b);
        __os->write(3, o);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Test::OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::opRequiredException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opRequiredException_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(1, a);
        __os->write(2, b);
        __os->write(3, o);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Test::OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Ice::Byte>
IceDelegateM::Test::Initial::opByte(const IceUtil::Optional< ::Ice::Byte>& p1, IceUtil::Optional< ::Ice::Byte>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opByte_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Ice::Byte> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional<bool>
IceDelegateM::Test::Initial::opBool(const IceUtil::Optional<bool>& p1, IceUtil::Optional<bool>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opBool_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional<bool> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Ice::Short>
IceDelegateM::Test::Initial::opShort(const IceUtil::Optional< ::Ice::Short>& p1, IceUtil::Optional< ::Ice::Short>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opShort_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Ice::Short> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Ice::Int>
IceDelegateM::Test::Initial::opInt(const IceUtil::Optional< ::Ice::Int>& p1, IceUtil::Optional< ::Ice::Int>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opInt_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Ice::Int> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Ice::Long>
IceDelegateM::Test::Initial::opLong(const IceUtil::Optional< ::Ice::Long>& p1, IceUtil::Optional< ::Ice::Long>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opLong_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(1, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Ice::Long> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(2, p3);
        __is->read(3, __ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Ice::Float>
IceDelegateM::Test::Initial::opFloat(const IceUtil::Optional< ::Ice::Float>& p1, IceUtil::Optional< ::Ice::Float>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opFloat_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Ice::Float> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Ice::Double>
IceDelegateM::Test::Initial::opDouble(const IceUtil::Optional< ::Ice::Double>& p1, IceUtil::Optional< ::Ice::Double>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opDouble_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Ice::Double> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::std::string>
IceDelegateM::Test::Initial::opString(const IceUtil::Optional< ::std::string>& p1, IceUtil::Optional< ::std::string>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opString_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::std::string> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::MyEnum>
IceDelegateM::Test::Initial::opMyEnum(const IceUtil::Optional< ::Test::MyEnum>& p1, IceUtil::Optional< ::Test::MyEnum>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opMyEnum_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::MyEnum> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::SmallStruct>
IceDelegateM::Test::Initial::opSmallStruct(const IceUtil::Optional< ::Test::SmallStruct>& p1, IceUtil::Optional< ::Test::SmallStruct>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opSmallStruct_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::SmallStruct> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::FixedStruct>
IceDelegateM::Test::Initial::opFixedStruct(const IceUtil::Optional< ::Test::FixedStruct>& p1, IceUtil::Optional< ::Test::FixedStruct>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opFixedStruct_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::FixedStruct> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::VarStruct>
IceDelegateM::Test::Initial::opVarStruct(const IceUtil::Optional< ::Test::VarStruct>& p1, IceUtil::Optional< ::Test::VarStruct>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opVarStruct_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::VarStruct> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::OneOptionalPtr>
IceDelegateM::Test::Initial::opOneOptional(const IceUtil::Optional< ::Test::OneOptionalPtr>& p1, IceUtil::Optional< ::Test::OneOptionalPtr>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opOneOptional_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::OneOptionalPtr> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::OneOptionalPrx>
IceDelegateM::Test::Initial::opOneOptionalProxy(const IceUtil::Optional< ::Test::OneOptionalPrx>& p1, IceUtil::Optional< ::Test::OneOptionalPrx>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opOneOptionalProxy_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::OneOptionalPrx> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::ByteSeq>
IceDelegateM::Test::Initial::opByteSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& p1, IceUtil::Optional< ::Test::ByteSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opByteSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::ByteSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::BoolSeq>
IceDelegateM::Test::Initial::opBoolSeq(const IceUtil::Optional< ::std::pair<const bool*, const bool*> >& p1, IceUtil::Optional< ::Test::BoolSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opBoolSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::BoolSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::ShortSeq>
IceDelegateM::Test::Initial::opShortSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Short*, const ::Ice::Short*> >& p1, IceUtil::Optional< ::Test::ShortSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opShortSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::ShortSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::IntSeq>
IceDelegateM::Test::Initial::opIntSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Int*, const ::Ice::Int*> >& p1, IceUtil::Optional< ::Test::IntSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opIntSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::IntSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::LongSeq>
IceDelegateM::Test::Initial::opLongSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Long*, const ::Ice::Long*> >& p1, IceUtil::Optional< ::Test::LongSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opLongSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::LongSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::FloatSeq>
IceDelegateM::Test::Initial::opFloatSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Float*, const ::Ice::Float*> >& p1, IceUtil::Optional< ::Test::FloatSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opFloatSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::FloatSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::DoubleSeq>
IceDelegateM::Test::Initial::opDoubleSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Double*, const ::Ice::Double*> >& p1, IceUtil::Optional< ::Test::DoubleSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opDoubleSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::DoubleSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::StringSeq>
IceDelegateM::Test::Initial::opStringSeq(const IceUtil::Optional< ::std::pair< ::Test::StringSeq::const_iterator,  ::Test::StringSeq::const_iterator> >& p1, IceUtil::Optional< ::Test::StringSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opStringSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::StringSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::SmallStructSeq>
IceDelegateM::Test::Initial::opSmallStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, IceUtil::Optional< ::Test::SmallStructSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opSmallStructSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::SmallStructSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::SmallStructList>
IceDelegateM::Test::Initial::opSmallStructList(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, IceUtil::Optional< ::Test::SmallStructList>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opSmallStructList_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::SmallStructList> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::FixedStructSeq>
IceDelegateM::Test::Initial::opFixedStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, IceUtil::Optional< ::Test::FixedStructSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opFixedStructSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::FixedStructSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::FixedStructList>
IceDelegateM::Test::Initial::opFixedStructList(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, IceUtil::Optional< ::Test::FixedStructList>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opFixedStructList_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::FixedStructList> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::VarStructSeq>
IceDelegateM::Test::Initial::opVarStructSeq(const IceUtil::Optional< ::std::pair< ::Test::VarStructSeq::const_iterator,  ::Test::VarStructSeq::const_iterator> >& p1, IceUtil::Optional< ::Test::VarStructSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opVarStructSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::VarStructSeq> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::Serializable>
IceDelegateM::Test::Initial::opSerializable(const IceUtil::Optional< ::Test::Serializable>& p1, IceUtil::Optional< ::Test::Serializable>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opSerializable_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::Serializable> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::IntIntDict>
IceDelegateM::Test::Initial::opIntIntDict(const IceUtil::Optional< ::Test::IntIntDict>& p1, IceUtil::Optional< ::Test::IntIntDict>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opIntIntDict_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::IntIntDict> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

IceUtil::Optional< ::Test::StringIntDict>
IceDelegateM::Test::Initial::opStringIntDict(const IceUtil::Optional< ::Test::StringIntDict>& p1, IceUtil::Optional< ::Test::StringIntDict>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opStringIntDict_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(2, p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    IceUtil::Optional< ::Test::StringIntDict> __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, __ret);
        __is->read(3, p3);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opClassAndUnknownOptional_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::Initial::sendOptionalClass(bool req, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__sendOptionalClass_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(req);
        __os->write(1, o);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::Initial::returnOptionalClass(bool req, IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__returnOptionalClass_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(1, o);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::Initial::supportsRequiredParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__supportsRequiredParams_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::Initial::supportsJavaSerializable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__supportsJavaSerializable_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::Initial::supportsCsharpSerializable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__supportsCsharpSerializable_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::Test::Initial::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->shutdown(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__shutdown_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::ObjectPtr
IceDelegateD::Test::Initial::pingPong(const ::Ice::ObjectPtr& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::ObjectPtr& __result, const ::Ice::ObjectPtr& __p_o, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_o(__p_o)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->pingPong(_m_o, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::ObjectPtr& _result;
        const ::Ice::ObjectPtr& _m_o;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__pingPong_name, ::Ice::Normal, __context);
    ::Ice::ObjectPtr __result;
    try
    {
        _DirectI __direct(__result, o, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::Initial::opOptionalException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const IceUtil::Optional< ::Ice::Int>& __p_a, const IceUtil::Optional< ::std::string>& __p_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& __p_o, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_a(__p_a),
            _m_b(__p_b),
            _m_o(__p_o)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->opOptionalException(_m_a, _m_b, _m_o, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const IceUtil::Optional< ::Ice::Int>& _m_a;
        const IceUtil::Optional< ::std::string>& _m_b;
        const IceUtil::Optional< ::Test::OneOptionalPtr>& _m_o;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opOptionalException_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(a, b, o, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Test::OptionalException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::Initial::opDerivedException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const IceUtil::Optional< ::Ice::Int>& __p_a, const IceUtil::Optional< ::std::string>& __p_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& __p_o, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_a(__p_a),
            _m_b(__p_b),
            _m_o(__p_o)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->opDerivedException(_m_a, _m_b, _m_o, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const IceUtil::Optional< ::Ice::Int>& _m_a;
        const IceUtil::Optional< ::std::string>& _m_b;
        const IceUtil::Optional< ::Test::OneOptionalPtr>& _m_o;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opDerivedException_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(a, b, o, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Test::OptionalException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::Initial::opRequiredException(const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const IceUtil::Optional< ::Ice::Int>& __p_a, const IceUtil::Optional< ::std::string>& __p_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& __p_o, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_a(__p_a),
            _m_b(__p_b),
            _m_o(__p_o)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->opRequiredException(_m_a, _m_b, _m_o, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const IceUtil::Optional< ::Ice::Int>& _m_a;
        const IceUtil::Optional< ::std::string>& _m_b;
        const IceUtil::Optional< ::Test::OneOptionalPtr>& _m_o;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opRequiredException_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(a, b, o, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Test::OptionalException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

IceUtil::Optional< ::Ice::Byte>
IceDelegateD::Test::Initial::opByte(const IceUtil::Optional< ::Ice::Byte>& p1, IceUtil::Optional< ::Ice::Byte>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Ice::Byte>& __result, const IceUtil::Optional< ::Ice::Byte>& __p_p1, IceUtil::Optional< ::Ice::Byte>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opByte(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Ice::Byte>& _result;
        const IceUtil::Optional< ::Ice::Byte>& _m_p1;
        IceUtil::Optional< ::Ice::Byte>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opByte_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Ice::Byte> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional<bool>
IceDelegateD::Test::Initial::opBool(const IceUtil::Optional<bool>& p1, IceUtil::Optional<bool>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional<bool>& __result, const IceUtil::Optional<bool>& __p_p1, IceUtil::Optional<bool>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opBool(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional<bool>& _result;
        const IceUtil::Optional<bool>& _m_p1;
        IceUtil::Optional<bool>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opBool_name, ::Ice::Normal, __context);
    IceUtil::Optional<bool> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Short>
IceDelegateD::Test::Initial::opShort(const IceUtil::Optional< ::Ice::Short>& p1, IceUtil::Optional< ::Ice::Short>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Ice::Short>& __result, const IceUtil::Optional< ::Ice::Short>& __p_p1, IceUtil::Optional< ::Ice::Short>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opShort(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Ice::Short>& _result;
        const IceUtil::Optional< ::Ice::Short>& _m_p1;
        IceUtil::Optional< ::Ice::Short>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opShort_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Ice::Short> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Int>
IceDelegateD::Test::Initial::opInt(const IceUtil::Optional< ::Ice::Int>& p1, IceUtil::Optional< ::Ice::Int>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Ice::Int>& __result, const IceUtil::Optional< ::Ice::Int>& __p_p1, IceUtil::Optional< ::Ice::Int>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opInt(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Ice::Int>& _result;
        const IceUtil::Optional< ::Ice::Int>& _m_p1;
        IceUtil::Optional< ::Ice::Int>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opInt_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Ice::Int> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Long>
IceDelegateD::Test::Initial::opLong(const IceUtil::Optional< ::Ice::Long>& p1, IceUtil::Optional< ::Ice::Long>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Ice::Long>& __result, const IceUtil::Optional< ::Ice::Long>& __p_p1, IceUtil::Optional< ::Ice::Long>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opLong(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Ice::Long>& _result;
        const IceUtil::Optional< ::Ice::Long>& _m_p1;
        IceUtil::Optional< ::Ice::Long>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opLong_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Ice::Long> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Float>
IceDelegateD::Test::Initial::opFloat(const IceUtil::Optional< ::Ice::Float>& p1, IceUtil::Optional< ::Ice::Float>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Ice::Float>& __result, const IceUtil::Optional< ::Ice::Float>& __p_p1, IceUtil::Optional< ::Ice::Float>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFloat(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Ice::Float>& _result;
        const IceUtil::Optional< ::Ice::Float>& _m_p1;
        IceUtil::Optional< ::Ice::Float>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opFloat_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Ice::Float> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Ice::Double>
IceDelegateD::Test::Initial::opDouble(const IceUtil::Optional< ::Ice::Double>& p1, IceUtil::Optional< ::Ice::Double>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Ice::Double>& __result, const IceUtil::Optional< ::Ice::Double>& __p_p1, IceUtil::Optional< ::Ice::Double>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opDouble(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Ice::Double>& _result;
        const IceUtil::Optional< ::Ice::Double>& _m_p1;
        IceUtil::Optional< ::Ice::Double>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opDouble_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Ice::Double> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::std::string>
IceDelegateD::Test::Initial::opString(const IceUtil::Optional< ::std::string>& p1, IceUtil::Optional< ::std::string>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::std::string>& __result, const IceUtil::Optional< ::std::string>& __p_p1, IceUtil::Optional< ::std::string>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opString(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::std::string>& _result;
        const IceUtil::Optional< ::std::string>& _m_p1;
        IceUtil::Optional< ::std::string>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opString_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::std::string> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::MyEnum>
IceDelegateD::Test::Initial::opMyEnum(const IceUtil::Optional< ::Test::MyEnum>& p1, IceUtil::Optional< ::Test::MyEnum>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::MyEnum>& __result, const IceUtil::Optional< ::Test::MyEnum>& __p_p1, IceUtil::Optional< ::Test::MyEnum>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opMyEnum(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::MyEnum>& _result;
        const IceUtil::Optional< ::Test::MyEnum>& _m_p1;
        IceUtil::Optional< ::Test::MyEnum>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opMyEnum_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::MyEnum> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::SmallStruct>
IceDelegateD::Test::Initial::opSmallStruct(const IceUtil::Optional< ::Test::SmallStruct>& p1, IceUtil::Optional< ::Test::SmallStruct>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::SmallStruct>& __result, const IceUtil::Optional< ::Test::SmallStruct>& __p_p1, IceUtil::Optional< ::Test::SmallStruct>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opSmallStruct(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::SmallStruct>& _result;
        const IceUtil::Optional< ::Test::SmallStruct>& _m_p1;
        IceUtil::Optional< ::Test::SmallStruct>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opSmallStruct_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::SmallStruct> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::FixedStruct>
IceDelegateD::Test::Initial::opFixedStruct(const IceUtil::Optional< ::Test::FixedStruct>& p1, IceUtil::Optional< ::Test::FixedStruct>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::FixedStruct>& __result, const IceUtil::Optional< ::Test::FixedStruct>& __p_p1, IceUtil::Optional< ::Test::FixedStruct>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFixedStruct(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::FixedStruct>& _result;
        const IceUtil::Optional< ::Test::FixedStruct>& _m_p1;
        IceUtil::Optional< ::Test::FixedStruct>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opFixedStruct_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::FixedStruct> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::VarStruct>
IceDelegateD::Test::Initial::opVarStruct(const IceUtil::Optional< ::Test::VarStruct>& p1, IceUtil::Optional< ::Test::VarStruct>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::VarStruct>& __result, const IceUtil::Optional< ::Test::VarStruct>& __p_p1, IceUtil::Optional< ::Test::VarStruct>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opVarStruct(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::VarStruct>& _result;
        const IceUtil::Optional< ::Test::VarStruct>& _m_p1;
        IceUtil::Optional< ::Test::VarStruct>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opVarStruct_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::VarStruct> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::OneOptionalPtr>
IceDelegateD::Test::Initial::opOneOptional(const IceUtil::Optional< ::Test::OneOptionalPtr>& p1, IceUtil::Optional< ::Test::OneOptionalPtr>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::OneOptionalPtr>& __result, const IceUtil::Optional< ::Test::OneOptionalPtr>& __p_p1, IceUtil::Optional< ::Test::OneOptionalPtr>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opOneOptional(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::OneOptionalPtr>& _result;
        const IceUtil::Optional< ::Test::OneOptionalPtr>& _m_p1;
        IceUtil::Optional< ::Test::OneOptionalPtr>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opOneOptional_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::OneOptionalPtr> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::OneOptionalPrx>
IceDelegateD::Test::Initial::opOneOptionalProxy(const IceUtil::Optional< ::Test::OneOptionalPrx>& p1, IceUtil::Optional< ::Test::OneOptionalPrx>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::OneOptionalPrx>& __result, const IceUtil::Optional< ::Test::OneOptionalPrx>& __p_p1, IceUtil::Optional< ::Test::OneOptionalPrx>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opOneOptionalProxy(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::OneOptionalPrx>& _result;
        const IceUtil::Optional< ::Test::OneOptionalPrx>& _m_p1;
        IceUtil::Optional< ::Test::OneOptionalPrx>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opOneOptionalProxy_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::OneOptionalPrx> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::ByteSeq>
IceDelegateD::Test::Initial::opByteSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& p1, IceUtil::Optional< ::Test::ByteSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::ByteSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& __p_p1, IceUtil::Optional< ::Test::ByteSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opByteSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::ByteSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> >& _m_p1;
        IceUtil::Optional< ::Test::ByteSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opByteSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::ByteSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::BoolSeq>
IceDelegateD::Test::Initial::opBoolSeq(const IceUtil::Optional< ::std::pair<const bool*, const bool*> >& p1, IceUtil::Optional< ::Test::BoolSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::BoolSeq>& __result, const IceUtil::Optional< ::std::pair<const bool*, const bool*> >& __p_p1, IceUtil::Optional< ::Test::BoolSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opBoolSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::BoolSeq>& _result;
        const IceUtil::Optional< ::std::pair<const bool*, const bool*> >& _m_p1;
        IceUtil::Optional< ::Test::BoolSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opBoolSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::BoolSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::ShortSeq>
IceDelegateD::Test::Initial::opShortSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Short*, const ::Ice::Short*> >& p1, IceUtil::Optional< ::Test::ShortSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::ShortSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Ice::Short*, const ::Ice::Short*> >& __p_p1, IceUtil::Optional< ::Test::ShortSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opShortSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::ShortSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Ice::Short*, const ::Ice::Short*> >& _m_p1;
        IceUtil::Optional< ::Test::ShortSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opShortSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::ShortSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::IntSeq>
IceDelegateD::Test::Initial::opIntSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Int*, const ::Ice::Int*> >& p1, IceUtil::Optional< ::Test::IntSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::IntSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Ice::Int*, const ::Ice::Int*> >& __p_p1, IceUtil::Optional< ::Test::IntSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opIntSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::IntSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Ice::Int*, const ::Ice::Int*> >& _m_p1;
        IceUtil::Optional< ::Test::IntSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opIntSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::IntSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::LongSeq>
IceDelegateD::Test::Initial::opLongSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Long*, const ::Ice::Long*> >& p1, IceUtil::Optional< ::Test::LongSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::LongSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Ice::Long*, const ::Ice::Long*> >& __p_p1, IceUtil::Optional< ::Test::LongSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opLongSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::LongSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Ice::Long*, const ::Ice::Long*> >& _m_p1;
        IceUtil::Optional< ::Test::LongSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opLongSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::LongSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::FloatSeq>
IceDelegateD::Test::Initial::opFloatSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Float*, const ::Ice::Float*> >& p1, IceUtil::Optional< ::Test::FloatSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::FloatSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Ice::Float*, const ::Ice::Float*> >& __p_p1, IceUtil::Optional< ::Test::FloatSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFloatSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::FloatSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Ice::Float*, const ::Ice::Float*> >& _m_p1;
        IceUtil::Optional< ::Test::FloatSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opFloatSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::FloatSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::DoubleSeq>
IceDelegateD::Test::Initial::opDoubleSeq(const IceUtil::Optional< ::std::pair<const ::Ice::Double*, const ::Ice::Double*> >& p1, IceUtil::Optional< ::Test::DoubleSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::DoubleSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Ice::Double*, const ::Ice::Double*> >& __p_p1, IceUtil::Optional< ::Test::DoubleSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opDoubleSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::DoubleSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Ice::Double*, const ::Ice::Double*> >& _m_p1;
        IceUtil::Optional< ::Test::DoubleSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opDoubleSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::DoubleSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::StringSeq>
IceDelegateD::Test::Initial::opStringSeq(const IceUtil::Optional< ::std::pair< ::Test::StringSeq::const_iterator,  ::Test::StringSeq::const_iterator> >& p1, IceUtil::Optional< ::Test::StringSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::StringSeq>& __result, const IceUtil::Optional< ::std::pair< ::Test::StringSeq::const_iterator,  ::Test::StringSeq::const_iterator> >& __p_p1, IceUtil::Optional< ::Test::StringSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStringSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::StringSeq>& _result;
        const IceUtil::Optional< ::std::pair< ::Test::StringSeq::const_iterator,  ::Test::StringSeq::const_iterator> >& _m_p1;
        IceUtil::Optional< ::Test::StringSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opStringSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::StringSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::SmallStructSeq>
IceDelegateD::Test::Initial::opSmallStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, IceUtil::Optional< ::Test::SmallStructSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::SmallStructSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& __p_p1, IceUtil::Optional< ::Test::SmallStructSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opSmallStructSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::SmallStructSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& _m_p1;
        IceUtil::Optional< ::Test::SmallStructSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opSmallStructSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::SmallStructSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::SmallStructList>
IceDelegateD::Test::Initial::opSmallStructList(const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& p1, IceUtil::Optional< ::Test::SmallStructList>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::SmallStructList>& __result, const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& __p_p1, IceUtil::Optional< ::Test::SmallStructList>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opSmallStructList(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::SmallStructList>& _result;
        const IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> >& _m_p1;
        IceUtil::Optional< ::Test::SmallStructList>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opSmallStructList_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::SmallStructList> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::FixedStructSeq>
IceDelegateD::Test::Initial::opFixedStructSeq(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, IceUtil::Optional< ::Test::FixedStructSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::FixedStructSeq>& __result, const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& __p_p1, IceUtil::Optional< ::Test::FixedStructSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFixedStructSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::FixedStructSeq>& _result;
        const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& _m_p1;
        IceUtil::Optional< ::Test::FixedStructSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opFixedStructSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::FixedStructSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::FixedStructList>
IceDelegateD::Test::Initial::opFixedStructList(const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& p1, IceUtil::Optional< ::Test::FixedStructList>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::FixedStructList>& __result, const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& __p_p1, IceUtil::Optional< ::Test::FixedStructList>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFixedStructList(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::FixedStructList>& _result;
        const IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> >& _m_p1;
        IceUtil::Optional< ::Test::FixedStructList>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opFixedStructList_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::FixedStructList> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::VarStructSeq>
IceDelegateD::Test::Initial::opVarStructSeq(const IceUtil::Optional< ::std::pair< ::Test::VarStructSeq::const_iterator,  ::Test::VarStructSeq::const_iterator> >& p1, IceUtil::Optional< ::Test::VarStructSeq>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::VarStructSeq>& __result, const IceUtil::Optional< ::std::pair< ::Test::VarStructSeq::const_iterator,  ::Test::VarStructSeq::const_iterator> >& __p_p1, IceUtil::Optional< ::Test::VarStructSeq>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opVarStructSeq(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::VarStructSeq>& _result;
        const IceUtil::Optional< ::std::pair< ::Test::VarStructSeq::const_iterator,  ::Test::VarStructSeq::const_iterator> >& _m_p1;
        IceUtil::Optional< ::Test::VarStructSeq>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opVarStructSeq_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::VarStructSeq> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::Serializable>
IceDelegateD::Test::Initial::opSerializable(const IceUtil::Optional< ::Test::Serializable>& p1, IceUtil::Optional< ::Test::Serializable>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::Serializable>& __result, const IceUtil::Optional< ::Test::Serializable>& __p_p1, IceUtil::Optional< ::Test::Serializable>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opSerializable(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::Serializable>& _result;
        const IceUtil::Optional< ::Test::Serializable>& _m_p1;
        IceUtil::Optional< ::Test::Serializable>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opSerializable_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::Serializable> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::IntIntDict>
IceDelegateD::Test::Initial::opIntIntDict(const IceUtil::Optional< ::Test::IntIntDict>& p1, IceUtil::Optional< ::Test::IntIntDict>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::IntIntDict>& __result, const IceUtil::Optional< ::Test::IntIntDict>& __p_p1, IceUtil::Optional< ::Test::IntIntDict>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opIntIntDict(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::IntIntDict>& _result;
        const IceUtil::Optional< ::Test::IntIntDict>& _m_p1;
        IceUtil::Optional< ::Test::IntIntDict>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opIntIntDict_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::IntIntDict> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

IceUtil::Optional< ::Test::StringIntDict>
IceDelegateD::Test::Initial::opStringIntDict(const IceUtil::Optional< ::Test::StringIntDict>& p1, IceUtil::Optional< ::Test::StringIntDict>& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(IceUtil::Optional< ::Test::StringIntDict>& __result, const IceUtil::Optional< ::Test::StringIntDict>& __p_p1, IceUtil::Optional< ::Test::StringIntDict>& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStringIntDict(_m_p1, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        IceUtil::Optional< ::Test::StringIntDict>& _result;
        const IceUtil::Optional< ::Test::StringIntDict>& _m_p1;
        IceUtil::Optional< ::Test::StringIntDict>& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opStringIntDict_name, ::Ice::Normal, __context);
    IceUtil::Optional< ::Test::StringIntDict> __result;
    try
    {
        _DirectI __direct(__result, p1, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::Initial::opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Test::APtr& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->opClassAndUnknownOptional(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Test::APtr& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opClassAndUnknownOptional_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::Initial::sendOptionalClass(bool req, const IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool __p_req, const IceUtil::Optional< ::Test::OneOptionalPtr>& __p_o, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_req(__p_req),
            _m_o(__p_o)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->sendOptionalClass(_m_req, _m_o, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool _m_req;
        const IceUtil::Optional< ::Test::OneOptionalPtr>& _m_o;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__sendOptionalClass_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(req, o, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::Initial::returnOptionalClass(bool req, IceUtil::Optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool __p_req, IceUtil::Optional< ::Test::OneOptionalPtr>& __p_o, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_req(__p_req),
            _m_o(__p_o)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->returnOptionalClass(_m_req, _m_o, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool _m_req;
        IceUtil::Optional< ::Test::OneOptionalPtr>& _m_o;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__returnOptionalClass_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(req, o, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::Test::Initial::supportsRequiredParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->supportsRequiredParams(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__supportsRequiredParams_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Test::Initial::supportsJavaSerializable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->supportsJavaSerializable(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__supportsJavaSerializable_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Test::Initial::supportsCsharpSerializable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->supportsCsharpSerializable(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__supportsCsharpSerializable_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* Test::upCast(::Test::OneOptional* p) { return p; }
::Ice::ObjectPtr
Test::OneOptional::ice_clone() const
{
    ::Ice::Object* __p = new OneOptional(*this);
    return __p;
}

namespace
{
const ::std::string __Test__OneOptional_ids[2] =
{
    "::Ice::Object",
    "::Test::OneOptional"
};

}

bool
Test::OneOptional::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__OneOptional_ids, __Test__OneOptional_ids + 2, _s);
}

::std::vector< ::std::string>
Test::OneOptional::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__OneOptional_ids[0], &__Test__OneOptional_ids[2]);
}

const ::std::string&
Test::OneOptional::ice_id(const ::Ice::Current&) const
{
    return __Test__OneOptional_ids[1];
}

const ::std::string&
Test::OneOptional::ice_staticId()
{
    return __Test__OneOptional_ids[1];
}

void
Test::OneOptional::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(1, a);
    __os->endWriteSlice();
}

void
Test::OneOptional::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(1, a);
    __is->endReadSlice();
}

namespace
{

class __F__Test__OneOptional : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::OneOptional::ice_staticId());
        return new ::Test::OneOptional;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__OneOptional_Ptr = new __F__Test__OneOptional;

class __F__Test__OneOptional__Init
{
public:

    __F__Test__OneOptional__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::OneOptional::ice_staticId(), __F__Test__OneOptional_Ptr);
    }

    ~__F__Test__OneOptional__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::OneOptional::ice_staticId());
    }
};

const __F__Test__OneOptional__Init __F__Test__OneOptional__i;

}

const ::Ice::ObjectFactoryPtr&
Test::OneOptional::ice_factory()
{
    return __F__Test__OneOptional_Ptr;
}

void 
Test::__patch(OneOptionalPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::OneOptionalPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::OneOptional::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::MultiOptional* p) { return p; }
::Ice::ObjectPtr
Test::MultiOptional::ice_clone() const
{
    ::Ice::Object* __p = new MultiOptional(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MultiOptional_ids[2] =
{
    "::Ice::Object",
    "::Test::MultiOptional"
};

}

bool
Test::MultiOptional::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MultiOptional_ids, __Test__MultiOptional_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MultiOptional::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MultiOptional_ids[0], &__Test__MultiOptional_ids[2]);
}

const ::std::string&
Test::MultiOptional::ice_id(const ::Ice::Current&) const
{
    return __Test__MultiOptional_ids[1];
}

const ::std::string&
Test::MultiOptional::ice_staticId()
{
    return __Test__MultiOptional_ids[1];
}

void
Test::MultiOptional::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::MultiOptional::__usesGC()
{
    return true;
}

void
Test::MultiOptional::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(k)
    {
        if((*k))
        {
            ::Test::upCast((*k).get())->__addObject(_c);
        }
    }
    if(oos)
    {
        {
            for(::Test::OneOptionalSeq::const_iterator _i0 = (*oos).begin(); _i0 != (*oos).end(); ++_i0)
            {
                if((*_i0))
                {
                    ::Test::upCast((*_i0).get())->__addObject(_c);
                }
            }
        }
    }
    if(iood)
    {
        {
            for(::Test::IntOneOptionalDict::const_iterator _i0 = (*iood).begin(); _i0 != (*iood).end(); ++_i0)
            {
                if((*_i0).second)
                {
                    ::Test::upCast((*_i0).second.get())->__addObject(_c);
                }
            }
        }
    }
}

void
Test::MultiOptional::__gcClear()
{
    if(k)
    {
        if((*k))
        {
            if(::Test::upCast((*k).get())->__usesGC())
            {
                ::Test::upCast((*k).get())->__decRefUnsafe();
                (*k).__clearHandleUnsafe();
            }
            else
            {
                (*k) = 0;
            }
        }
    }
    if(oos)
    {
        {
            for(::Test::OneOptionalSeq::iterator _i0 = (*oos).begin(); _i0 != (*oos).end(); ++_i0)
            {
                if((*_i0))
                {
                    if(::Test::upCast((*_i0).get())->__usesGC())
                    {
                        ::Test::upCast((*_i0).get())->__decRefUnsafe();
                        (*_i0).__clearHandleUnsafe();
                    }
                    else
                    {
                        (*_i0) = 0;
                    }
                }
            }
        }
    }
    if(iood)
    {
        {
            for(::Test::IntOneOptionalDict::iterator _i0 = (*iood).begin(); _i0 != (*iood).end(); ++_i0)
            {
                if((*_i0).second)
                {
                    if(::Test::upCast((*_i0).second.get())->__usesGC())
                    {
                        ::Test::upCast((*_i0).second.get())->__decRefUnsafe();
                        (*_i0).second.__clearHandleUnsafe();
                    }
                    else
                    {
                        (*_i0).second = 0;
                    }
                }
            }
        }
    }
}

void
Test::MultiOptional::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(1, a);
    __os->write(2, b);
    __os->write(3, c);
    __os->write(4, d);
    __os->write(5, e);
    __os->write(6, f);
    __os->write(7, g);
    __os->write(8, h);
    __os->write(9, i);
    __os->write(10, j);
    __os->write(11, k);
    __os->write(12, bs);
    __os->write(13, ss);
    __os->write(14, iid);
    __os->write(15, sid);
    __os->write(16, fs);
    __os->write(17, vs);
    __os->write(18, shs);
    __os->write(19, es);
    __os->write(20, fss);
    __os->write(21, vss);
    __os->write(22, oos);
    __os->write(23, oops);
    __os->write(24, ied);
    __os->write(25, ifsd);
    __os->write(26, ivsd);
    __os->write(27, iood);
    __os->write(28, ioopd);
    __os->write(29, bos);
    __os->write(30, ser);
    __os->endWriteSlice();
}

void
Test::MultiOptional::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(1, a);
    __is->read(2, b);
    __is->read(3, c);
    __is->read(4, d);
    __is->read(5, e);
    __is->read(6, f);
    __is->read(7, g);
    __is->read(8, h);
    __is->read(9, i);
    __is->read(10, j);
    __is->read(11, k);
    __is->read(12, bs);
    __is->read(13, ss);
    __is->read(14, iid);
    __is->read(15, sid);
    __is->read(16, fs);
    __is->read(17, vs);
    __is->read(18, shs);
    __is->read(19, es);
    __is->read(20, fss);
    __is->read(21, vss);
    __is->read(22, oos);
    __is->read(23, oops);
    __is->read(24, ied);
    __is->read(25, ifsd);
    __is->read(26, ivsd);
    __is->read(27, iood);
    __is->read(28, ioopd);
    __is->read(29, bos);
    __is->read(30, ser);
    __is->endReadSlice();
}

namespace
{

class __F__Test__MultiOptional : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MultiOptional::ice_staticId());
        return new ::Test::MultiOptional;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MultiOptional_Ptr = new __F__Test__MultiOptional;

class __F__Test__MultiOptional__Init
{
public:

    __F__Test__MultiOptional__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MultiOptional::ice_staticId(), __F__Test__MultiOptional_Ptr);
    }

    ~__F__Test__MultiOptional__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MultiOptional::ice_staticId());
    }
};

const __F__Test__MultiOptional__Init __F__Test__MultiOptional__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MultiOptional::ice_factory()
{
    return __F__Test__MultiOptional_Ptr;
}

void 
Test::__patch(MultiOptionalPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MultiOptionalPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MultiOptional::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::A* p) { return p; }
::Ice::ObjectPtr
Test::A::ice_clone() const
{
    ::Ice::Object* __p = new A(*this);
    return __p;
}

namespace
{
const ::std::string __Test__A_ids[2] =
{
    "::Ice::Object",
    "::Test::A"
};

}

bool
Test::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__A_ids, __Test__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__A_ids[0], &__Test__A_ids[2]);
}

const ::std::string&
Test::A::ice_id(const ::Ice::Current&) const
{
    return __Test__A_ids[1];
}

const ::std::string&
Test::A::ice_staticId()
{
    return __Test__A_ids[1];
}

void
Test::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(requiredA);
    __os->write(1, ma);
    __os->write(50, mb);
    __os->write(500, mc);
    __os->endWriteSlice();
}

void
Test::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(requiredA);
    __is->read(1, ma);
    __is->read(50, mb);
    __is->read(500, mc);
    __is->endReadSlice();
}

namespace
{

class __F__Test__A : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::A::ice_staticId());
        return new ::Test::A;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__A_Ptr = new __F__Test__A;

class __F__Test__A__Init
{
public:

    __F__Test__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::A::ice_staticId(), __F__Test__A_Ptr);
    }

    ~__F__Test__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::A::ice_staticId());
    }
};

const __F__Test__A__Init __F__Test__A__i;

}

const ::Ice::ObjectFactoryPtr&
Test::A::ice_factory()
{
    return __F__Test__A_Ptr;
}

void 
Test::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::B* p) { return p; }
::Ice::ObjectPtr
Test::B::ice_clone() const
{
    ::Ice::Object* __p = new B(*this);
    return __p;
}

namespace
{
const ::std::string __Test__B_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B"
};

}

bool
Test::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__B_ids, __Test__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__B_ids[0], &__Test__B_ids[3]);
}

const ::std::string&
Test::B::ice_id(const ::Ice::Current&) const
{
    return __Test__B_ids[2];
}

const ::std::string&
Test::B::ice_staticId()
{
    return __Test__B_ids[2];
}

void
Test::B::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::B::__usesGC()
{
    return true;
}

void
Test::B::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(__slicedData)
    {
        __slicedData->__addObject(_c);
    }
}

void
Test::B::__gcClear()
{
    if(__slicedData)
    {
        __slicedData->__decRefUnsafe();
        __slicedData.__clearHandleUnsafe();
    }
}

void
Test::B::__write(::IceInternal::BasicStream* __os) const
{
    __os->startWriteObject(__slicedData);
    __writeImpl(__os);
    __os->endWriteObject();
}

void
Test::B::__read(::IceInternal::BasicStream* __is)
{
    __is->startReadObject();
    __readImpl(__is);
    __slicedData = __is->endReadObject(true);
}

void
Test::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(requiredB);
    __os->write(10, md);
    __os->endWriteSlice();
    ::Test::A::__writeImpl(__os);
}

void
Test::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(requiredB);
    __is->read(10, md);
    __is->endReadSlice();
    ::Test::A::__readImpl(__is);
}

namespace
{

class __F__Test__B : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::B::ice_staticId());
        return new ::Test::B;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__B_Ptr = new __F__Test__B;

class __F__Test__B__Init
{
public:

    __F__Test__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::B::ice_staticId(), __F__Test__B_Ptr);
    }

    ~__F__Test__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::B::ice_staticId());
    }
};

const __F__Test__B__Init __F__Test__B__i;

}

const ::Ice::ObjectFactoryPtr&
Test::B::ice_factory()
{
    return __F__Test__B_Ptr;
}

void 
Test::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::C* p) { return p; }
::Ice::ObjectPtr
Test::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__C_ids[4] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B",
    "::Test::C"
};

}

bool
Test::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__C_ids, __Test__C_ids + 4, _s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__C_ids[0], &__Test__C_ids[4]);
}

const ::std::string&
Test::C::ice_id(const ::Ice::Current&) const
{
    return __Test__C_ids[3];
}

const ::std::string&
Test::C::ice_staticId()
{
    return __Test__C_ids[3];
}

void
Test::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(ss);
    __os->write(890, ms);
    __os->endWriteSlice();
    ::Test::B::__writeImpl(__os);
}

void
Test::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(ss);
    __is->read(890, ms);
    __is->endReadSlice();
    ::Test::B::__readImpl(__is);
}

namespace
{

class __F__Test__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::C::ice_staticId());
        return new ::Test::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__C_Ptr = new __F__Test__C;

class __F__Test__C__Init
{
public:

    __F__Test__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::C::ice_staticId(), __F__Test__C_Ptr);
    }

    ~__F__Test__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::C::ice_staticId());
    }
};

const __F__Test__C__Init __F__Test__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::C::ice_factory()
{
    return __F__Test__C_Ptr;
}

void 
Test::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::WD* p) { return p; }
::Ice::ObjectPtr
Test::WD::ice_clone() const
{
    ::Ice::Object* __p = new WD(*this);
    return __p;
}

namespace
{
const ::std::string __Test__WD_ids[2] =
{
    "::Ice::Object",
    "::Test::WD"
};

}

bool
Test::WD::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__WD_ids, __Test__WD_ids + 2, _s);
}

::std::vector< ::std::string>
Test::WD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__WD_ids[0], &__Test__WD_ids[2]);
}

const ::std::string&
Test::WD::ice_id(const ::Ice::Current&) const
{
    return __Test__WD_ids[1];
}

const ::std::string&
Test::WD::ice_staticId()
{
    return __Test__WD_ids[1];
}

void
Test::WD::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(1, a);
    __os->write(2, s);
    __os->endWriteSlice();
}

void
Test::WD::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(1, a);
    __is->read(2, s);
    __is->endReadSlice();
}

namespace
{

class __F__Test__WD : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::WD::ice_staticId());
        return new ::Test::WD;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__WD_Ptr = new __F__Test__WD;

class __F__Test__WD__Init
{
public:

    __F__Test__WD__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::WD::ice_staticId(), __F__Test__WD_Ptr);
    }

    ~__F__Test__WD__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::WD::ice_staticId());
    }
};

const __F__Test__WD__Init __F__Test__WD__i;

}

const ::Ice::ObjectFactoryPtr&
Test::WD::ice_factory()
{
    return __F__Test__WD_Ptr;
}

void 
Test::__patch(WDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::WDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::WD::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::OptionalWithCustom* p) { return p; }
::Ice::ObjectPtr
Test::OptionalWithCustom::ice_clone() const
{
    ::Ice::Object* __p = new OptionalWithCustom(*this);
    return __p;
}

namespace
{
const ::std::string __Test__OptionalWithCustom_ids[2] =
{
    "::Ice::Object",
    "::Test::OptionalWithCustom"
};

}

bool
Test::OptionalWithCustom::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__OptionalWithCustom_ids, __Test__OptionalWithCustom_ids + 2, _s);
}

::std::vector< ::std::string>
Test::OptionalWithCustom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__OptionalWithCustom_ids[0], &__Test__OptionalWithCustom_ids[2]);
}

const ::std::string&
Test::OptionalWithCustom::ice_id(const ::Ice::Current&) const
{
    return __Test__OptionalWithCustom_ids[1];
}

const ::std::string&
Test::OptionalWithCustom::ice_staticId()
{
    return __Test__OptionalWithCustom_ids[1];
}

void
Test::OptionalWithCustom::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(1, l);
    __os->write(2, lp);
    __os->write(3, s);
    __os->endWriteSlice();
}

void
Test::OptionalWithCustom::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(1, l);
    __is->read(2, lp);
    __is->read(3, s);
    __is->endReadSlice();
}

namespace
{

class __F__Test__OptionalWithCustom : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::OptionalWithCustom::ice_staticId());
        return new ::Test::OptionalWithCustom;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__OptionalWithCustom_Ptr = new __F__Test__OptionalWithCustom;

class __F__Test__OptionalWithCustom__Init
{
public:

    __F__Test__OptionalWithCustom__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::OptionalWithCustom::ice_staticId(), __F__Test__OptionalWithCustom_Ptr);
    }

    ~__F__Test__OptionalWithCustom__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::OptionalWithCustom::ice_staticId());
    }
};

const __F__Test__OptionalWithCustom__Init __F__Test__OptionalWithCustom__i;

}

const ::Ice::ObjectFactoryPtr&
Test::OptionalWithCustom::ice_factory()
{
    return __F__Test__OptionalWithCustom_Ptr;
}

void 
Test::__patch(OptionalWithCustomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::OptionalWithCustomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::OptionalWithCustom::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::E* p) { return p; }
::Ice::ObjectPtr
Test::E::ice_clone() const
{
    ::Ice::Object* __p = new E(*this);
    return __p;
}

namespace
{
const ::std::string __Test__E_ids[2] =
{
    "::Ice::Object",
    "::Test::E"
};

}

bool
Test::E::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__E_ids, __Test__E_ids + 2, _s);
}

::std::vector< ::std::string>
Test::E::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__E_ids[0], &__Test__E_ids[2]);
}

const ::std::string&
Test::E::ice_id(const ::Ice::Current&) const
{
    return __Test__E_ids[1];
}

const ::std::string&
Test::E::ice_staticId()
{
    return __Test__E_ids[1];
}

void
Test::E::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::E::__usesGC()
{
    return true;
}

void
Test::E::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(ae)
    {
        ::Test::upCast(ae.get())->__addObject(_c);
    }
}

void
Test::E::__gcClear()
{
    if(ae)
    {
        if(::Test::upCast(ae.get())->__usesGC())
        {
            ::Test::upCast(ae.get())->__decRefUnsafe();
            ae.__clearHandleUnsafe();
        }
        else
        {
            ae = 0;
        }
    }
}

void
Test::E::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(ae);
    __os->endWriteSlice();
}

void
Test::E::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(ae);
    __is->endReadSlice();
}

namespace
{

class __F__Test__E : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::E::ice_staticId());
        return new ::Test::E;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__E_Ptr = new __F__Test__E;

class __F__Test__E__Init
{
public:

    __F__Test__E__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::E::ice_staticId(), __F__Test__E_Ptr);
    }

    ~__F__Test__E__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::E::ice_staticId());
    }
};

const __F__Test__E__Init __F__Test__E__i;

}

const ::Ice::ObjectFactoryPtr&
Test::E::ice_factory()
{
    return __F__Test__E_Ptr;
}

void 
Test::__patch(EPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::EPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::E::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::F* p) { return p; }
::Ice::ObjectPtr
Test::F::ice_clone() const
{
    ::Ice::Object* __p = new F(*this);
    return __p;
}

namespace
{
const ::std::string __Test__F_ids[3] =
{
    "::Ice::Object",
    "::Test::E",
    "::Test::F"
};

}

bool
Test::F::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__F_ids, __Test__F_ids + 3, _s);
}

::std::vector< ::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__F_ids[0], &__Test__F_ids[3]);
}

const ::std::string&
Test::F::ice_id(const ::Ice::Current&) const
{
    return __Test__F_ids[2];
}

const ::std::string&
Test::F::ice_staticId()
{
    return __Test__F_ids[2];
}

void
Test::F::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    ::Test::E::__gcReachable(_c);
    if(af)
    {
        if((*af))
        {
            ::Test::upCast((*af).get())->__addObject(_c);
        }
    }
}

void
Test::F::__gcClear()
{
    ::Test::E::__gcClear();
    if(af)
    {
        if((*af))
        {
            if(::Test::upCast((*af).get())->__usesGC())
            {
                ::Test::upCast((*af).get())->__decRefUnsafe();
                (*af).__clearHandleUnsafe();
            }
            else
            {
                (*af) = 0;
            }
        }
    }
}

void
Test::F::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(1, af);
    __os->endWriteSlice();
    ::Test::E::__writeImpl(__os);
}

void
Test::F::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(1, af);
    __is->endReadSlice();
    ::Test::E::__readImpl(__is);
}

namespace
{

class __F__Test__F : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::F::ice_staticId());
        return new ::Test::F;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__F_Ptr = new __F__Test__F;

class __F__Test__F__Init
{
public:

    __F__Test__F__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::F::ice_staticId(), __F__Test__F_Ptr);
    }

    ~__F__Test__F__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::F::ice_staticId());
    }
};

const __F__Test__F__Init __F__Test__F__i;

}

const ::Ice::ObjectFactoryPtr&
Test::F::ice_factory()
{
    return __F__Test__F_Ptr;
}

void 
Test::__patch(FPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::FPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::F::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::Initial* p) { return p; }
::Ice::ObjectPtr
Test::Initial::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Initial_ids, __Test__Initial_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Initial_ids[0], &__Test__Initial_ids[2]);
}

const ::std::string&
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return __Test__Initial_ids[1];
}

const ::std::string&
Test::Initial::ice_staticId()
{
    return __Test__Initial_ids[1];
}

::Ice::DispatchStatus
Test::Initial::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___pingPong(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::ObjectPtr o;
    __is->read(o);
    __is->readPendingObjects();
    __inS.endReadParams();
    ::Ice::ObjectPtr __ret = pingPong(o, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opOptionalException(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> a;
    IceUtil::Optional< ::std::string> b;
    IceUtil::Optional< ::Test::OneOptionalPtr> o;
    __is->read(1, a);
    __is->read(2, b);
    __is->read(3, o);
    __inS.endReadParams();
    try
    {
        opOptionalException(a, b, o, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Test::OptionalException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Test::Initial::___opDerivedException(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> a;
    IceUtil::Optional< ::std::string> b;
    IceUtil::Optional< ::Test::OneOptionalPtr> o;
    __is->read(1, a);
    __is->read(2, b);
    __is->read(3, o);
    __inS.endReadParams();
    try
    {
        opDerivedException(a, b, o, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Test::OptionalException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Test::Initial::___opRequiredException(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> a;
    IceUtil::Optional< ::std::string> b;
    IceUtil::Optional< ::Test::OneOptionalPtr> o;
    __is->read(1, a);
    __is->read(2, b);
    __is->read(3, o);
    __inS.endReadParams();
    try
    {
        opRequiredException(a, b, o, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Test::OptionalException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Test::Initial::___opByte(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Byte> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Ice::Byte> p3;
    IceUtil::Optional< ::Ice::Byte> __ret = opByte(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opBool(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional<bool> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional<bool> p3;
    IceUtil::Optional<bool> __ret = opBool(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opShort(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Short> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Ice::Short> p3;
    IceUtil::Optional< ::Ice::Short> __ret = opShort(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opInt(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Ice::Int> p3;
    IceUtil::Optional< ::Ice::Int> __ret = opInt(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opLong(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Long> p1;
    __is->read(1, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Ice::Long> p3;
    IceUtil::Optional< ::Ice::Long> __ret = opLong(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(2, p3);
    __os->write(3, __ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opFloat(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Float> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Ice::Float> p3;
    IceUtil::Optional< ::Ice::Float> __ret = opFloat(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opDouble(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Ice::Double> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Ice::Double> p3;
    IceUtil::Optional< ::Ice::Double> __ret = opDouble(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opString(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::string> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::std::string> p3;
    IceUtil::Optional< ::std::string> __ret = opString(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opMyEnum(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::MyEnum> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::MyEnum> p3;
    IceUtil::Optional< ::Test::MyEnum> __ret = opMyEnum(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opSmallStruct(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::SmallStruct> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::SmallStruct> p3;
    IceUtil::Optional< ::Test::SmallStruct> __ret = opSmallStruct(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opFixedStruct(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::FixedStruct> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::FixedStruct> p3;
    IceUtil::Optional< ::Test::FixedStruct> __ret = opFixedStruct(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opVarStruct(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::VarStruct> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::VarStruct> p3;
    IceUtil::Optional< ::Test::VarStruct> __ret = opVarStruct(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opOneOptional(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::OneOptionalPtr> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::OneOptionalPtr> p3;
    IceUtil::Optional< ::Test::OneOptionalPtr> __ret = opOneOptional(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opOneOptionalProxy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::OneOptionalPrx> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::OneOptionalPrx> p3;
    IceUtil::Optional< ::Test::OneOptionalPrx> __ret = opOneOptionalProxy(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opByteSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> > p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::ByteSeq> p3;
    IceUtil::Optional< ::Test::ByteSeq> __ret = opByteSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opBoolSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const bool*, const bool*> > p1;
    IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray<bool>, ::std::pair<const bool*, const bool*> > > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1 = ___p1->second;
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::BoolSeq> p3;
    IceUtil::Optional< ::Test::BoolSeq> __ret = opBoolSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opShortSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Ice::Short*, const ::Ice::Short*> > p1;
    IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Short>, ::std::pair<const  ::Ice::Short*, const  ::Ice::Short*> > > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1 = ___p1->second;
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::ShortSeq> p3;
    IceUtil::Optional< ::Test::ShortSeq> __ret = opShortSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opIntSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Ice::Int*, const ::Ice::Int*> > p1;
    IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Int>, ::std::pair<const  ::Ice::Int*, const  ::Ice::Int*> > > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1 = ___p1->second;
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::IntSeq> p3;
    IceUtil::Optional< ::Test::IntSeq> __ret = opIntSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opLongSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Ice::Long*, const ::Ice::Long*> > p1;
    IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1 = ___p1->second;
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::LongSeq> p3;
    IceUtil::Optional< ::Test::LongSeq> __ret = opLongSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opFloatSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Ice::Float*, const ::Ice::Float*> > p1;
    IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Float>, ::std::pair<const  ::Ice::Float*, const  ::Ice::Float*> > > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1 = ___p1->second;
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::FloatSeq> p3;
    IceUtil::Optional< ::Test::FloatSeq> __ret = opFloatSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opDoubleSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Ice::Double*, const ::Ice::Double*> > p1;
    IceUtil::Optional< ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1 = ___p1->second;
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::DoubleSeq> p3;
    IceUtil::Optional< ::Test::DoubleSeq> __ret = opDoubleSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opStringSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair< ::Test::StringSeq::const_iterator,  ::Test::StringSeq::const_iterator> > p1;
    IceUtil::Optional< ::Test::StringSeq> ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1.__setIsSet();
        p1->first = (*___p1).begin();
        p1->second = (*___p1).end();
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::StringSeq> p3;
    IceUtil::Optional< ::Test::StringSeq> __ret = opStringSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opSmallStructSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> > p1;
    IceUtil::Optional< ::std::vector< ::Test::SmallStruct> > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1.__setIsSet();
        if(!___p1->empty())
        {
            p1->first = &(*___p1)[0];
            p1->second = p1->first + ___p1->size();
        }
        else
        {
            p1->first = p1->second = 0;
        }
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::SmallStructSeq> p3;
    IceUtil::Optional< ::Test::SmallStructSeq> __ret = opSmallStructSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opSmallStructList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*> > p1;
    IceUtil::Optional< ::std::vector< ::Test::SmallStruct> > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1.__setIsSet();
        if(!___p1->empty())
        {
            p1->first = &(*___p1)[0];
            p1->second = p1->first + ___p1->size();
        }
        else
        {
            p1->first = p1->second = 0;
        }
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::SmallStructList> p3;
    IceUtil::Optional< ::Test::SmallStructList> __ret = opSmallStructList(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opFixedStructSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> > p1;
    IceUtil::Optional< ::std::vector< ::Test::FixedStruct> > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1.__setIsSet();
        if(!___p1->empty())
        {
            p1->first = &(*___p1)[0];
            p1->second = p1->first + ___p1->size();
        }
        else
        {
            p1->first = p1->second = 0;
        }
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::FixedStructSeq> p3;
    IceUtil::Optional< ::Test::FixedStructSeq> __ret = opFixedStructSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opFixedStructList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*> > p1;
    IceUtil::Optional< ::std::vector< ::Test::FixedStruct> > ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1.__setIsSet();
        if(!___p1->empty())
        {
            p1->first = &(*___p1)[0];
            p1->second = p1->first + ___p1->size();
        }
        else
        {
            p1->first = p1->second = 0;
        }
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::FixedStructList> p3;
    IceUtil::Optional< ::Test::FixedStructList> __ret = opFixedStructList(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opVarStructSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::std::pair< ::Test::VarStructSeq::const_iterator,  ::Test::VarStructSeq::const_iterator> > p1;
    IceUtil::Optional< ::Test::VarStructSeq> ___p1;
    __is->read(2, ___p1);
    if(___p1)
    {
        p1.__setIsSet();
        p1->first = (*___p1).begin();
        p1->second = (*___p1).end();
    }
    __inS.endReadParams();
    IceUtil::Optional< ::Test::VarStructSeq> p3;
    IceUtil::Optional< ::Test::VarStructSeq> __ret = opVarStructSeq(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opSerializable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::Serializable> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::Serializable> p3;
    IceUtil::Optional< ::Test::Serializable> __ret = opSerializable(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opIntIntDict(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::IntIntDict> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::IntIntDict> p3;
    IceUtil::Optional< ::Test::IntIntDict> __ret = opIntIntDict(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opStringIntDict(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    IceUtil::Optional< ::Test::StringIntDict> p1;
    __is->read(2, p1);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::StringIntDict> p3;
    IceUtil::Optional< ::Test::StringIntDict> __ret = opStringIntDict(p1, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, __ret);
    __os->write(3, p3);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opClassAndUnknownOptional(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::APtr p;
    __is->read(p);
    __is->readPendingObjects();
    __inS.endReadParams();
    opClassAndUnknownOptional(p, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___sendOptionalClass(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool req;
    IceUtil::Optional< ::Test::OneOptionalPtr> o;
    __is->read(req);
    __is->read(1, o);
    __inS.endReadParams();
    sendOptionalClass(req, o, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___returnOptionalClass(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool req;
    __is->read(req);
    __inS.endReadParams();
    IceUtil::Optional< ::Test::OneOptionalPtr> o;
    returnOptionalClass(req, o, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(1, o);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___supportsRequiredParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = supportsRequiredParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___supportsJavaSerializable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = supportsJavaSerializable(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___supportsCsharpSerializable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = supportsCsharpSerializable(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__Initial_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolSeq",
    "opByte",
    "opByteSeq",
    "opClassAndUnknownOptional",
    "opDerivedException",
    "opDouble",
    "opDoubleSeq",
    "opFixedStruct",
    "opFixedStructList",
    "opFixedStructSeq",
    "opFloat",
    "opFloatSeq",
    "opInt",
    "opIntIntDict",
    "opIntSeq",
    "opLong",
    "opLongSeq",
    "opMyEnum",
    "opOneOptional",
    "opOneOptionalProxy",
    "opOptionalException",
    "opRequiredException",
    "opSerializable",
    "opShort",
    "opShortSeq",
    "opSmallStruct",
    "opSmallStructList",
    "opSmallStructSeq",
    "opString",
    "opStringIntDict",
    "opStringSeq",
    "opVarStruct",
    "opVarStructSeq",
    "pingPong",
    "returnOptionalClass",
    "sendOptionalClass",
    "shutdown",
    "supportsCsharpSerializable",
    "supportsJavaSerializable",
    "supportsRequiredParams"
};

}

::Ice::DispatchStatus
Test::Initial::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__Initial_all, __Test__Initial_all + 45, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__Initial_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___opBool(in, current);
        }
        case 5:
        {
            return ___opBoolSeq(in, current);
        }
        case 6:
        {
            return ___opByte(in, current);
        }
        case 7:
        {
            return ___opByteSeq(in, current);
        }
        case 8:
        {
            return ___opClassAndUnknownOptional(in, current);
        }
        case 9:
        {
            return ___opDerivedException(in, current);
        }
        case 10:
        {
            return ___opDouble(in, current);
        }
        case 11:
        {
            return ___opDoubleSeq(in, current);
        }
        case 12:
        {
            return ___opFixedStruct(in, current);
        }
        case 13:
        {
            return ___opFixedStructList(in, current);
        }
        case 14:
        {
            return ___opFixedStructSeq(in, current);
        }
        case 15:
        {
            return ___opFloat(in, current);
        }
        case 16:
        {
            return ___opFloatSeq(in, current);
        }
        case 17:
        {
            return ___opInt(in, current);
        }
        case 18:
        {
            return ___opIntIntDict(in, current);
        }
        case 19:
        {
            return ___opIntSeq(in, current);
        }
        case 20:
        {
            return ___opLong(in, current);
        }
        case 21:
        {
            return ___opLongSeq(in, current);
        }
        case 22:
        {
            return ___opMyEnum(in, current);
        }
        case 23:
        {
            return ___opOneOptional(in, current);
        }
        case 24:
        {
            return ___opOneOptionalProxy(in, current);
        }
        case 25:
        {
            return ___opOptionalException(in, current);
        }
        case 26:
        {
            return ___opRequiredException(in, current);
        }
        case 27:
        {
            return ___opSerializable(in, current);
        }
        case 28:
        {
            return ___opShort(in, current);
        }
        case 29:
        {
            return ___opShortSeq(in, current);
        }
        case 30:
        {
            return ___opSmallStruct(in, current);
        }
        case 31:
        {
            return ___opSmallStructList(in, current);
        }
        case 32:
        {
            return ___opSmallStructSeq(in, current);
        }
        case 33:
        {
            return ___opString(in, current);
        }
        case 34:
        {
            return ___opStringIntDict(in, current);
        }
        case 35:
        {
            return ___opStringSeq(in, current);
        }
        case 36:
        {
            return ___opVarStruct(in, current);
        }
        case 37:
        {
            return ___opVarStructSeq(in, current);
        }
        case 38:
        {
            return ___pingPong(in, current);
        }
        case 39:
        {
            return ___returnOptionalClass(in, current);
        }
        case 40:
        {
            return ___sendOptionalClass(in, current);
        }
        case 41:
        {
            return ___shutdown(in, current);
        }
        case 42:
        {
            return ___supportsCsharpSerializable(in, current);
        }
        case 43:
        {
            return ___supportsJavaSerializable(in, current);
        }
        case 44:
        {
            return ___supportsRequiredParams(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::Initial::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::Initial::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(InitialPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::InitialPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Initial::ice_staticId(), v);
    }
}
