// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class Empty;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Empty>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Empty*);

class Thrower;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Thrower>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Thrower*);

class WrongOperation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::WrongOperation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::WrongOperation*);

}

}

namespace Test
{

class Empty;
bool operator==(const Empty&, const Empty&);
bool operator<(const Empty&, const Empty&);
::Ice::Object* upCast(::Test::Empty*);
typedef ::IceInternal::Handle< ::Test::Empty> EmptyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Empty> EmptyPrx;
void __patch(EmptyPtr&, const ::Ice::ObjectPtr&);

class Thrower;
bool operator==(const Thrower&, const Thrower&);
bool operator<(const Thrower&, const Thrower&);
::Ice::Object* upCast(::Test::Thrower*);
typedef ::IceInternal::Handle< ::Test::Thrower> ThrowerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Thrower> ThrowerPrx;
void __patch(ThrowerPtr&, const ::Ice::ObjectPtr&);

class WrongOperation;
bool operator==(const WrongOperation&, const WrongOperation&);
bool operator<(const WrongOperation&, const WrongOperation&);
::Ice::Object* upCast(::Test::WrongOperation*);
typedef ::IceInternal::Handle< ::Test::WrongOperation> WrongOperationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::WrongOperation> WrongOperationPrx;
void __patch(WrongOperationPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class A : public ::Ice::UserException
{
public:

    A() {}
    explicit A(::Ice::Int);
    virtual ~A() throw();

    virtual ::std::string ice_name() const;
    virtual A* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int aMem;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static A __A_init;

class B : public ::Test::A
{
public:

    B() {}
    B(::Ice::Int, ::Ice::Int);
    virtual ~B() throw();

    virtual ::std::string ice_name() const;
    virtual B* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int bMem;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::A::__writeImpl;
    using ::Test::A::__readImpl;
    #endif
};

class C : public ::Test::B
{
public:

    C() {}
    C(::Ice::Int, ::Ice::Int, ::Ice::Int);
    virtual ~C() throw();

    virtual ::std::string ice_name() const;
    virtual C* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int cMem;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::B::__writeImpl;
    using ::Test::B::__readImpl;
    #endif
};

class D : public ::Ice::UserException
{
public:

    D() {}
    explicit D(::Ice::Int);
    virtual ~D() throw();

    virtual ::std::string ice_name() const;
    virtual D* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int dMem;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class E : public ::Ice::UserException
{
public:

    E() {}
    explicit E(const ::std::string&);
    virtual ~E() throw();

    virtual ::std::string ice_name() const;
    virtual E* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string data;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class F : public ::Ice::UserException
{
public:

    F() {}
    explicit F(const ::std::string&);
    virtual ~F() throw();

    virtual ::std::string ice_name() const;
    virtual void ice_print(::std::ostream&) const;
    virtual F* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string data;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class G : public ::Ice::LocalException
{
public:

    G(const char*, int);
    G(const char*, int, const ::std::string&);
    virtual ~G() throw();

    virtual ::std::string ice_name() const;
    virtual G* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string data;
};

class H : public ::Ice::LocalException
{
public:

    H(const char*, int);
    H(const char*, int, const ::std::string&);
    virtual ~H() throw();

    virtual ::std::string ice_name() const;
    virtual void ice_print(::std::ostream&) const;
    virtual H* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string data;
};

namespace Mod
{

class A : public ::Test::A
{
public:

    A() {}
    A(::Ice::Int, ::Ice::Int);
    virtual ~A() throw();

    virtual ::std::string ice_name() const;
    virtual A* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int a2Mem;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::A::__writeImpl;
    using ::Test::A::__readImpl;
    #endif
};

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::A>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::B>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::C>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::E>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::F>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::Mod::A>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test
{

class AMI_Thrower_shutdown : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_shutdown> AMI_Thrower_shutdownPtr;

class AMI_Thrower_supportsUndeclaredExceptions : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_supportsUndeclaredExceptions> AMI_Thrower_supportsUndeclaredExceptionsPtr;

class AMI_Thrower_supportsAssertException : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_supportsAssertException> AMI_Thrower_supportsAssertExceptionPtr;

class AMI_Thrower_throwAasA : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwAasA> AMI_Thrower_throwAasAPtr;

class AMI_Thrower_throwAorDasAorD : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwAorDasAorD> AMI_Thrower_throwAorDasAorDPtr;

class AMI_Thrower_throwBasA : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwBasA> AMI_Thrower_throwBasAPtr;

class AMI_Thrower_throwCasA : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwCasA> AMI_Thrower_throwCasAPtr;

class AMI_Thrower_throwBasB : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwBasB> AMI_Thrower_throwBasBPtr;

class AMI_Thrower_throwCasB : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwCasB> AMI_Thrower_throwCasBPtr;

class AMI_Thrower_throwCasC : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwCasC> AMI_Thrower_throwCasCPtr;

class AMI_Thrower_throwModA : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwModA> AMI_Thrower_throwModAPtr;

class AMI_Thrower_throwUndeclaredA : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwUndeclaredA> AMI_Thrower_throwUndeclaredAPtr;

class AMI_Thrower_throwUndeclaredB : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwUndeclaredB> AMI_Thrower_throwUndeclaredBPtr;

class AMI_Thrower_throwUndeclaredC : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwUndeclaredC> AMI_Thrower_throwUndeclaredCPtr;

class AMI_Thrower_throwLocalException : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwLocalException> AMI_Thrower_throwLocalExceptionPtr;

class AMI_Thrower_throwNonIceException : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwNonIceException> AMI_Thrower_throwNonIceExceptionPtr;

class AMI_Thrower_throwAssertException : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwAssertException> AMI_Thrower_throwAssertExceptionPtr;

class AMI_Thrower_throwMemoryLimitException : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::Ice::ByteSeq&) = 0;

    void __response(const ::Ice::ByteSeq& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwMemoryLimitException> AMI_Thrower_throwMemoryLimitExceptionPtr;

class AMI_Thrower_throwLocalExceptionIdempotent : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwLocalExceptionIdempotent> AMI_Thrower_throwLocalExceptionIdempotentPtr;

class AMI_Thrower_throwAfterResponse : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwAfterResponse> AMI_Thrower_throwAfterResponsePtr;

class AMI_Thrower_throwAfterException : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_Thrower_throwAfterException> AMI_Thrower_throwAfterExceptionPtr;

class AMI_WrongOperation_noSuchOperation : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::Test::AMI_WrongOperation_noSuchOperation> AMI_WrongOperation_noSuchOperationPtr;

}

namespace Test
{

class Callback_Thrower_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_shutdown_Base> Callback_Thrower_shutdownPtr;

class Callback_Thrower_supportsUndeclaredExceptions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_supportsUndeclaredExceptions_Base> Callback_Thrower_supportsUndeclaredExceptionsPtr;

class Callback_Thrower_supportsAssertException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_supportsAssertException_Base> Callback_Thrower_supportsAssertExceptionPtr;

class Callback_Thrower_throwAasA_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwAasA_Base> Callback_Thrower_throwAasAPtr;

class Callback_Thrower_throwAorDasAorD_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwAorDasAorD_Base> Callback_Thrower_throwAorDasAorDPtr;

class Callback_Thrower_throwBasA_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwBasA_Base> Callback_Thrower_throwBasAPtr;

class Callback_Thrower_throwCasA_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwCasA_Base> Callback_Thrower_throwCasAPtr;

class Callback_Thrower_throwBasB_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwBasB_Base> Callback_Thrower_throwBasBPtr;

class Callback_Thrower_throwCasB_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwCasB_Base> Callback_Thrower_throwCasBPtr;

class Callback_Thrower_throwCasC_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwCasC_Base> Callback_Thrower_throwCasCPtr;

class Callback_Thrower_throwModA_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwModA_Base> Callback_Thrower_throwModAPtr;

class Callback_Thrower_throwUndeclaredA_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwUndeclaredA_Base> Callback_Thrower_throwUndeclaredAPtr;

class Callback_Thrower_throwUndeclaredB_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwUndeclaredB_Base> Callback_Thrower_throwUndeclaredBPtr;

class Callback_Thrower_throwUndeclaredC_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwUndeclaredC_Base> Callback_Thrower_throwUndeclaredCPtr;

class Callback_Thrower_throwLocalException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwLocalException_Base> Callback_Thrower_throwLocalExceptionPtr;

class Callback_Thrower_throwNonIceException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwNonIceException_Base> Callback_Thrower_throwNonIceExceptionPtr;

class Callback_Thrower_throwAssertException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwAssertException_Base> Callback_Thrower_throwAssertExceptionPtr;

class Callback_Thrower_throwMemoryLimitException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwMemoryLimitException_Base> Callback_Thrower_throwMemoryLimitExceptionPtr;

class Callback_Thrower_throwLocalExceptionIdempotent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwLocalExceptionIdempotent_Base> Callback_Thrower_throwLocalExceptionIdempotentPtr;

class Callback_Thrower_throwAfterResponse_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwAfterResponse_Base> Callback_Thrower_throwAfterResponsePtr;

class Callback_Thrower_throwAfterException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Thrower_throwAfterException_Base> Callback_Thrower_throwAfterExceptionPtr;

class Callback_WrongOperation_noSuchOperation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WrongOperation_noSuchOperation_Base> Callback_WrongOperation_noSuchOperationPtr;

}

namespace IceProxy
{

namespace Test
{

class Empty : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Empty> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_secure(bool __secure) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_twoway() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_oneway() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_batchOneway() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_datagram() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_batchDatagram() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_compress(bool __compress) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Thrower : virtual public ::IceProxy::Ice::Object
{
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Thrower_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool shutdown_async(const ::Test::AMI_Thrower_shutdownPtr&);
    bool shutdown_async(const ::Test::AMI_Thrower_shutdownPtr&, const ::Ice::Context&);

    bool supportsUndeclaredExceptions()
    {
        return supportsUndeclaredExceptions(0);
    }
    bool supportsUndeclaredExceptions(const ::Ice::Context& __ctx)
    {
        return supportsUndeclaredExceptions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_supportsUndeclaredExceptions(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_supportsUndeclaredExceptions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_supportsUndeclaredExceptions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_supportsUndeclaredExceptions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_supportsUndeclaredExceptions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_supportsUndeclaredExceptions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_supportsUndeclaredExceptions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_supportsUndeclaredExceptions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_supportsUndeclaredExceptions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_supportsUndeclaredExceptions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_supportsUndeclaredExceptions(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_supportsUndeclaredExceptions()
    {
        return begin_supportsUndeclaredExceptions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsUndeclaredExceptions(const ::Ice::Context& __ctx)
    {
        return begin_supportsUndeclaredExceptions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsUndeclaredExceptions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsUndeclaredExceptions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsUndeclaredExceptions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsUndeclaredExceptions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsUndeclaredExceptions(const ::Test::Callback_Thrower_supportsUndeclaredExceptionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsUndeclaredExceptions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsUndeclaredExceptions(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_supportsUndeclaredExceptionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsUndeclaredExceptions(&__ctx, __del, __cookie);
    }

    bool end_supportsUndeclaredExceptions(const ::Ice::AsyncResultPtr&);
    
private:

    bool supportsUndeclaredExceptions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_supportsUndeclaredExceptions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool supportsUndeclaredExceptions_async(const ::Test::AMI_Thrower_supportsUndeclaredExceptionsPtr&);
    bool supportsUndeclaredExceptions_async(const ::Test::AMI_Thrower_supportsUndeclaredExceptionsPtr&, const ::Ice::Context&);

    bool supportsAssertException()
    {
        return supportsAssertException(0);
    }
    bool supportsAssertException(const ::Ice::Context& __ctx)
    {
        return supportsAssertException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_supportsAssertException(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_supportsAssertException(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_supportsAssertException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_supportsAssertException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_supportsAssertException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_supportsAssertException(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_supportsAssertException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_supportsAssertException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_supportsAssertException(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_supportsAssertException(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_supportsAssertException(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_supportsAssertException()
    {
        return begin_supportsAssertException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsAssertException(const ::Ice::Context& __ctx)
    {
        return begin_supportsAssertException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsAssertException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsAssertException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsAssertException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsAssertException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsAssertException(const ::Test::Callback_Thrower_supportsAssertExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsAssertException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsAssertException(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_supportsAssertExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_supportsAssertException(&__ctx, __del, __cookie);
    }

    bool end_supportsAssertException(const ::Ice::AsyncResultPtr&);
    
private:

    bool supportsAssertException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_supportsAssertException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool supportsAssertException_async(const ::Test::AMI_Thrower_supportsAssertExceptionPtr&);
    bool supportsAssertException_async(const ::Test::AMI_Thrower_supportsAssertExceptionPtr&, const ::Ice::Context&);

    void throwAasA(::Ice::Int a)
    {
        throwAasA(a, 0);
    }
    void throwAasA(::Ice::Int a, const ::Ice::Context& __ctx)
    {
        throwAasA(a, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwAasA(::Ice::Int a, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwAasA(a, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwAasA(::Ice::Int a, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAasA(a, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwAasA(::Ice::Int a, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwAasA(a, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwAasA(::Ice::Int a, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAasA(a, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwAasA(::Ice::Int a, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwAasA(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwAasA(a, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwAasA(::Ice::Int a)
    {
        return begin_throwAasA(a, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAasA(::Ice::Int a, const ::Ice::Context& __ctx)
    {
        return begin_throwAasA(a, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAasA(::Ice::Int a, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAasA(a, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAasA(::Ice::Int a, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAasA(a, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAasA(::Ice::Int a, const ::Test::Callback_Thrower_throwAasAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAasA(a, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAasA(::Ice::Int a, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwAasAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAasA(a, &__ctx, __del, __cookie);
    }

    void end_throwAasA(const ::Ice::AsyncResultPtr&);
    
private:

    void throwAasA(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwAasA(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwAasA_async(const ::Test::AMI_Thrower_throwAasAPtr&, ::Ice::Int);
    bool throwAasA_async(const ::Test::AMI_Thrower_throwAasAPtr&, ::Ice::Int, const ::Ice::Context&);

    void throwAorDasAorD(::Ice::Int a)
    {
        throwAorDasAorD(a, 0);
    }
    void throwAorDasAorD(::Ice::Int a, const ::Ice::Context& __ctx)
    {
        throwAorDasAorD(a, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwAorDasAorD(::Ice::Int a, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwAorDasAorD(a, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwAorDasAorD(::Ice::Int a, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAorDasAorD(a, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwAorDasAorD(::Ice::Int a, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwAorDasAorD(a, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwAorDasAorD(::Ice::Int a, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAorDasAorD(a, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwAorDasAorD(::Ice::Int a, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwAorDasAorD(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwAorDasAorD(a, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwAorDasAorD(::Ice::Int a)
    {
        return begin_throwAorDasAorD(a, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAorDasAorD(::Ice::Int a, const ::Ice::Context& __ctx)
    {
        return begin_throwAorDasAorD(a, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAorDasAorD(::Ice::Int a, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAorDasAorD(a, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAorDasAorD(::Ice::Int a, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAorDasAorD(a, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAorDasAorD(::Ice::Int a, const ::Test::Callback_Thrower_throwAorDasAorDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAorDasAorD(a, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAorDasAorD(::Ice::Int a, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwAorDasAorDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAorDasAorD(a, &__ctx, __del, __cookie);
    }

    void end_throwAorDasAorD(const ::Ice::AsyncResultPtr&);
    
private:

    void throwAorDasAorD(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwAorDasAorD(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwAorDasAorD_async(const ::Test::AMI_Thrower_throwAorDasAorDPtr&, ::Ice::Int);
    bool throwAorDasAorD_async(const ::Test::AMI_Thrower_throwAorDasAorDPtr&, ::Ice::Int, const ::Ice::Context&);

    void throwBasA(::Ice::Int a, ::Ice::Int b)
    {
        throwBasA(a, b, 0);
    }
    void throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx)
    {
        throwBasA(a, b, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwBasA(a, b, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwBasA(a, b, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwBasA(a, b, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwBasA(a, b, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwBasA(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwBasA(a, b, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwBasA(::Ice::Int a, ::Ice::Int b)
    {
        return begin_throwBasA(a, b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx)
    {
        return begin_throwBasA(a, b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasA(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasA(a, b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Test::Callback_Thrower_throwBasAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasA(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwBasA(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwBasAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasA(a, b, &__ctx, __del, __cookie);
    }

    void end_throwBasA(const ::Ice::AsyncResultPtr&);
    
private:

    void throwBasA(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwBasA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwBasA_async(const ::Test::AMI_Thrower_throwBasAPtr&, ::Ice::Int, ::Ice::Int);
    bool throwBasA_async(const ::Test::AMI_Thrower_throwBasAPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        throwCasA(a, b, c, 0);
    }
    void throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        throwCasA(a, b, c, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwCasA(a, b, c, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwCasA(a, b, c, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwCasA(a, b, c, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwCasA(a, b, c, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwCasA(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwCasA(a, b, c, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        return begin_throwCasA(a, b, c, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        return begin_throwCasA(a, b, c, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasA(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasA(a, b, c, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Test::Callback_Thrower_throwCasAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasA(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasA(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwCasAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasA(a, b, c, &__ctx, __del, __cookie);
    }

    void end_throwCasA(const ::Ice::AsyncResultPtr&);
    
private:

    void throwCasA(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwCasA(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwCasA_async(const ::Test::AMI_Thrower_throwCasAPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int);
    bool throwCasA_async(const ::Test::AMI_Thrower_throwCasAPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwBasB(::Ice::Int a, ::Ice::Int b)
    {
        throwBasB(a, b, 0);
    }
    void throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx)
    {
        throwBasB(a, b, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwBasB(a, b, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwBasB(a, b, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwBasB(a, b, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwBasB(a, b, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwBasB(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwBasB(a, b, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwBasB(::Ice::Int a, ::Ice::Int b)
    {
        return begin_throwBasB(a, b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx)
    {
        return begin_throwBasB(a, b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasB(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasB(a, b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Test::Callback_Thrower_throwBasBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasB(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwBasB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwBasBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwBasB(a, b, &__ctx, __del, __cookie);
    }

    void end_throwBasB(const ::Ice::AsyncResultPtr&);
    
private:

    void throwBasB(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwBasB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwBasB_async(const ::Test::AMI_Thrower_throwBasBPtr&, ::Ice::Int, ::Ice::Int);
    bool throwBasB_async(const ::Test::AMI_Thrower_throwBasBPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        throwCasB(a, b, c, 0);
    }
    void throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        throwCasB(a, b, c, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwCasB(a, b, c, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwCasB(a, b, c, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwCasB(a, b, c, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwCasB(a, b, c, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwCasB(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwCasB(a, b, c, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        return begin_throwCasB(a, b, c, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        return begin_throwCasB(a, b, c, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasB(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasB(a, b, c, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Test::Callback_Thrower_throwCasBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasB(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasB(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwCasBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasB(a, b, c, &__ctx, __del, __cookie);
    }

    void end_throwCasB(const ::Ice::AsyncResultPtr&);
    
private:

    void throwCasB(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwCasB(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwCasB_async(const ::Test::AMI_Thrower_throwCasBPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int);
    bool throwCasB_async(const ::Test::AMI_Thrower_throwCasBPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        throwCasC(a, b, c, 0);
    }
    void throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        throwCasC(a, b, c, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwCasC(a, b, c, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwCasC(a, b, c, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwCasC(a, b, c, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwCasC(a, b, c, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwCasC(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwCasC(a, b, c, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        return begin_throwCasC(a, b, c, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        return begin_throwCasC(a, b, c, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasC(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasC(a, b, c, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Test::Callback_Thrower_throwCasCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasC(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwCasC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwCasCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwCasC(a, b, c, &__ctx, __del, __cookie);
    }

    void end_throwCasC(const ::Ice::AsyncResultPtr&);
    
private:

    void throwCasC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwCasC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwCasC_async(const ::Test::AMI_Thrower_throwCasCPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int);
    bool throwCasC_async(const ::Test::AMI_Thrower_throwCasCPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwModA(::Ice::Int a, ::Ice::Int a2)
    {
        throwModA(a, a2, 0);
    }
    void throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::Context& __ctx)
    {
        throwModA(a, a2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwModA(a, a2, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwModA(a, a2, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwModA(a, a2, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwModA(a, a2, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwModA(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwModA(a, a2, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwModA(::Ice::Int a, ::Ice::Int a2)
    {
        return begin_throwModA(a, a2, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::Context& __ctx)
    {
        return begin_throwModA(a, a2, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwModA(a, a2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwModA(a, a2, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Test::Callback_Thrower_throwModAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwModA(a, a2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwModA(::Ice::Int a, ::Ice::Int a2, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwModAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwModA(a, a2, &__ctx, __del, __cookie);
    }

    void end_throwModA(const ::Ice::AsyncResultPtr&);
    
private:

    void throwModA(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwModA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwModA_async(const ::Test::AMI_Thrower_throwModAPtr&, ::Ice::Int, ::Ice::Int);
    bool throwModA_async(const ::Test::AMI_Thrower_throwModAPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwUndeclaredA(::Ice::Int a)
    {
        throwUndeclaredA(a, 0);
    }
    void throwUndeclaredA(::Ice::Int a, const ::Ice::Context& __ctx)
    {
        throwUndeclaredA(a, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredA(::Ice::Int a, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwUndeclaredA(a, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredA(::Ice::Int a, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwUndeclaredA(a, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredA(::Ice::Int a, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwUndeclaredA(a, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredA(::Ice::Int a, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwUndeclaredA(a, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwUndeclaredA(::Ice::Int a)
    {
        return begin_throwUndeclaredA(a, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredA(::Ice::Int a, const ::Ice::Context& __ctx)
    {
        return begin_throwUndeclaredA(a, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredA(::Ice::Int a, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredA(a, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredA(::Ice::Int a, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredA(a, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredA(::Ice::Int a, const ::Test::Callback_Thrower_throwUndeclaredAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredA(a, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredA(::Ice::Int a, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwUndeclaredAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredA(a, &__ctx, __del, __cookie);
    }

    void end_throwUndeclaredA(const ::Ice::AsyncResultPtr&);
    
private:

    void throwUndeclaredA(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwUndeclaredA(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwUndeclaredA_async(const ::Test::AMI_Thrower_throwUndeclaredAPtr&, ::Ice::Int);
    bool throwUndeclaredA_async(const ::Test::AMI_Thrower_throwUndeclaredAPtr&, ::Ice::Int, const ::Ice::Context&);

    void throwUndeclaredB(::Ice::Int a, ::Ice::Int b)
    {
        throwUndeclaredB(a, b, 0);
    }
    void throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx)
    {
        throwUndeclaredB(a, b, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwUndeclaredB(a, b, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwUndeclaredB(a, b, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwUndeclaredB(a, b, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwUndeclaredB(a, b, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b)
    {
        return begin_throwUndeclaredB(a, b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx)
    {
        return begin_throwUndeclaredB(a, b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredB(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredB(a, b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Test::Callback_Thrower_throwUndeclaredBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredB(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredB(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwUndeclaredBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredB(a, b, &__ctx, __del, __cookie);
    }

    void end_throwUndeclaredB(const ::Ice::AsyncResultPtr&);
    
private:

    void throwUndeclaredB(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwUndeclaredB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwUndeclaredB_async(const ::Test::AMI_Thrower_throwUndeclaredBPtr&, ::Ice::Int, ::Ice::Int);
    bool throwUndeclaredB_async(const ::Test::AMI_Thrower_throwUndeclaredBPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        throwUndeclaredC(a, b, c, 0);
    }
    void throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        throwUndeclaredC(a, b, c, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwUndeclaredC(a, b, c, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwUndeclaredC(a, b, c, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwUndeclaredC(a, b, c, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwUndeclaredC(a, b, c, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c)
    {
        return begin_throwUndeclaredC(a, b, c, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx)
    {
        return begin_throwUndeclaredC(a, b, c, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredC(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredC(a, b, c, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Test::Callback_Thrower_throwUndeclaredCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredC(a, b, c, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwUndeclaredC(::Ice::Int a, ::Ice::Int b, ::Ice::Int c, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwUndeclaredCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwUndeclaredC(a, b, c, &__ctx, __del, __cookie);
    }

    void end_throwUndeclaredC(const ::Ice::AsyncResultPtr&);
    
private:

    void throwUndeclaredC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwUndeclaredC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwUndeclaredC_async(const ::Test::AMI_Thrower_throwUndeclaredCPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int);
    bool throwUndeclaredC_async(const ::Test::AMI_Thrower_throwUndeclaredCPtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&);

    void throwLocalException()
    {
        throwLocalException(0);
    }
    void throwLocalException(const ::Ice::Context& __ctx)
    {
        throwLocalException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwLocalException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwLocalException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwLocalException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwLocalException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwLocalException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwLocalException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwLocalException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwLocalException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwLocalException()
    {
        return begin_throwLocalException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwLocalException(const ::Ice::Context& __ctx)
    {
        return begin_throwLocalException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwLocalException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwLocalException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwLocalException(const ::Test::Callback_Thrower_throwLocalExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwLocalException(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwLocalExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalException(&__ctx, __del, __cookie);
    }

    void end_throwLocalException(const ::Ice::AsyncResultPtr&);
    
private:

    void throwLocalException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwLocalException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwLocalException_async(const ::Test::AMI_Thrower_throwLocalExceptionPtr&);
    bool throwLocalException_async(const ::Test::AMI_Thrower_throwLocalExceptionPtr&, const ::Ice::Context&);

    void throwNonIceException()
    {
        throwNonIceException(0);
    }
    void throwNonIceException(const ::Ice::Context& __ctx)
    {
        throwNonIceException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwNonIceException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwNonIceException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwNonIceException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwNonIceException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwNonIceException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwNonIceException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwNonIceException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwNonIceException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwNonIceException()
    {
        return begin_throwNonIceException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwNonIceException(const ::Ice::Context& __ctx)
    {
        return begin_throwNonIceException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwNonIceException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwNonIceException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNonIceException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwNonIceException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNonIceException(const ::Test::Callback_Thrower_throwNonIceExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwNonIceException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNonIceException(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwNonIceExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwNonIceException(&__ctx, __del, __cookie);
    }

    void end_throwNonIceException(const ::Ice::AsyncResultPtr&);
    
private:

    void throwNonIceException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwNonIceException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwNonIceException_async(const ::Test::AMI_Thrower_throwNonIceExceptionPtr&);
    bool throwNonIceException_async(const ::Test::AMI_Thrower_throwNonIceExceptionPtr&, const ::Ice::Context&);

    void throwAssertException()
    {
        throwAssertException(0);
    }
    void throwAssertException(const ::Ice::Context& __ctx)
    {
        throwAssertException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwAssertException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwAssertException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwAssertException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAssertException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwAssertException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwAssertException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwAssertException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAssertException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwAssertException()
    {
        return begin_throwAssertException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAssertException(const ::Ice::Context& __ctx)
    {
        return begin_throwAssertException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAssertException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAssertException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAssertException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAssertException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAssertException(const ::Test::Callback_Thrower_throwAssertExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAssertException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAssertException(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwAssertExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAssertException(&__ctx, __del, __cookie);
    }

    void end_throwAssertException(const ::Ice::AsyncResultPtr&);
    
private:

    void throwAssertException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwAssertException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwAssertException_async(const ::Test::AMI_Thrower_throwAssertExceptionPtr&);
    bool throwAssertException_async(const ::Test::AMI_Thrower_throwAssertExceptionPtr&, const ::Ice::Context&);

    ::Ice::ByteSeq throwMemoryLimitException(const ::Ice::ByteSeq& seq)
    {
        return throwMemoryLimitException(seq, 0);
    }
    ::Ice::ByteSeq throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx)
    {
        return throwMemoryLimitException(seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwMemoryLimitException(seq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwMemoryLimitException(seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwMemoryLimitException(seq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwMemoryLimitException(seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                ::Ice::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_throwMemoryLimitException(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ByteSeq&)> _response;
        };
        return begin_throwMemoryLimitException(seq, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq)
    {
        return begin_throwMemoryLimitException(seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_throwMemoryLimitException(seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwMemoryLimitException(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwMemoryLimitException(seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Test::Callback_Thrower_throwMemoryLimitExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwMemoryLimitException(seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwMemoryLimitException(const ::Ice::ByteSeq& seq, const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwMemoryLimitExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwMemoryLimitException(seq, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_throwMemoryLimitException(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq throwMemoryLimitException(const ::Ice::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwMemoryLimitException(const ::Ice::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwMemoryLimitException_async(const ::Test::AMI_Thrower_throwMemoryLimitExceptionPtr&, const ::Ice::ByteSeq&);
    bool throwMemoryLimitException_async(const ::Test::AMI_Thrower_throwMemoryLimitExceptionPtr&, const ::Ice::ByteSeq&, const ::Ice::Context&);

    void throwLocalExceptionIdempotent()
    {
        throwLocalExceptionIdempotent(0);
    }
    void throwLocalExceptionIdempotent(const ::Ice::Context& __ctx)
    {
        throwLocalExceptionIdempotent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwLocalExceptionIdempotent(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwLocalExceptionIdempotent(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwLocalExceptionIdempotent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwLocalExceptionIdempotent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwLocalExceptionIdempotent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwLocalExceptionIdempotent(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwLocalExceptionIdempotent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwLocalExceptionIdempotent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwLocalExceptionIdempotent()
    {
        return begin_throwLocalExceptionIdempotent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwLocalExceptionIdempotent(const ::Ice::Context& __ctx)
    {
        return begin_throwLocalExceptionIdempotent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwLocalExceptionIdempotent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalExceptionIdempotent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwLocalExceptionIdempotent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalExceptionIdempotent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwLocalExceptionIdempotent(const ::Test::Callback_Thrower_throwLocalExceptionIdempotentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalExceptionIdempotent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwLocalExceptionIdempotent(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwLocalExceptionIdempotentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwLocalExceptionIdempotent(&__ctx, __del, __cookie);
    }

    void end_throwLocalExceptionIdempotent(const ::Ice::AsyncResultPtr&);
    
private:

    void throwLocalExceptionIdempotent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwLocalExceptionIdempotent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwLocalExceptionIdempotent_async(const ::Test::AMI_Thrower_throwLocalExceptionIdempotentPtr&);
    bool throwLocalExceptionIdempotent_async(const ::Test::AMI_Thrower_throwLocalExceptionIdempotentPtr&, const ::Ice::Context&);

    void throwAfterResponse()
    {
        throwAfterResponse(0);
    }
    void throwAfterResponse(const ::Ice::Context& __ctx)
    {
        throwAfterResponse(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwAfterResponse(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwAfterResponse(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_throwAfterResponse(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAfterResponse(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwAfterResponse(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_throwAfterResponse(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwAfterResponse(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAfterResponse(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_throwAfterResponse()
    {
        return begin_throwAfterResponse(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAfterResponse(const ::Ice::Context& __ctx)
    {
        return begin_throwAfterResponse(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAfterResponse(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterResponse(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAfterResponse(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterResponse(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAfterResponse(const ::Test::Callback_Thrower_throwAfterResponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterResponse(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAfterResponse(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwAfterResponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterResponse(&__ctx, __del, __cookie);
    }

    void end_throwAfterResponse(const ::Ice::AsyncResultPtr&);
    
private:

    void throwAfterResponse(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwAfterResponse(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwAfterResponse_async(const ::Test::AMI_Thrower_throwAfterResponsePtr&);
    bool throwAfterResponse_async(const ::Test::AMI_Thrower_throwAfterResponsePtr&, const ::Ice::Context&);

    void throwAfterException()
    {
        throwAfterException(0);
    }
    void throwAfterException(const ::Ice::Context& __ctx)
    {
        throwAfterException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_throwAfterException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwAfterException(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwAfterException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAfterException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_throwAfterException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_throwAfterException(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_throwAfterException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_throwAfterException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_throwAfterException(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_throwAfterException(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_throwAfterException(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_throwAfterException()
    {
        return begin_throwAfterException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAfterException(const ::Ice::Context& __ctx)
    {
        return begin_throwAfterException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwAfterException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAfterException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAfterException(const ::Test::Callback_Thrower_throwAfterExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_throwAfterException(const ::Ice::Context& __ctx, const ::Test::Callback_Thrower_throwAfterExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_throwAfterException(&__ctx, __del, __cookie);
    }

    void end_throwAfterException(const ::Ice::AsyncResultPtr&);
    
private:

    void throwAfterException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_throwAfterException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool throwAfterException_async(const ::Test::AMI_Thrower_throwAfterExceptionPtr&);
    bool throwAfterException_async(const ::Test::AMI_Thrower_throwAfterExceptionPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<Thrower> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_secure(bool __secure) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_twoway() const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_oneway() const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_batchOneway() const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_datagram() const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_batchDatagram() const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_compress(bool __compress) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Thrower> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Thrower*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class WrongOperation : virtual public ::IceProxy::Ice::Object
{
public:

    void noSuchOperation()
    {
        noSuchOperation(0);
    }
    void noSuchOperation(const ::Ice::Context& __ctx)
    {
        noSuchOperation(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_noSuchOperation(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_noSuchOperation(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_noSuchOperation(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_noSuchOperation(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_noSuchOperation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_noSuchOperation(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_noSuchOperation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_noSuchOperation(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_noSuchOperation()
    {
        return begin_noSuchOperation(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_noSuchOperation(const ::Ice::Context& __ctx)
    {
        return begin_noSuchOperation(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_noSuchOperation(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_noSuchOperation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_noSuchOperation(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_noSuchOperation(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_noSuchOperation(const ::Test::Callback_WrongOperation_noSuchOperationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_noSuchOperation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_noSuchOperation(const ::Ice::Context& __ctx, const ::Test::Callback_WrongOperation_noSuchOperationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_noSuchOperation(&__ctx, __del, __cookie);
    }

    void end_noSuchOperation(const ::Ice::AsyncResultPtr&);
    
private:

    void noSuchOperation(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_noSuchOperation(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool noSuchOperation_async(const ::Test::AMI_WrongOperation_noSuchOperationPtr&);
    bool noSuchOperation_async(const ::Test::AMI_WrongOperation_noSuchOperationPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_secure(bool __secure) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_twoway() const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_oneway() const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_batchOneway() const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_datagram() const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_batchDatagram() const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_compress(bool __compress) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_timeout(int __timeout) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WrongOperation> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<WrongOperation*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class Empty : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Thrower : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool supportsUndeclaredExceptions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool supportsAssertException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwAasA(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwAorDasAorD(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwBasA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwCasA(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwBasB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwCasB(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwCasC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwModA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwUndeclaredA(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwUndeclaredB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwUndeclaredC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwNonIceException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwAssertException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::ByteSeq throwMemoryLimitException(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwLocalExceptionIdempotent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwAfterResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void throwAfterException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class WrongOperation : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void noSuchOperation(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class Empty : virtual public ::IceDelegate::Test::Empty,
              virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Thrower : virtual public ::IceDelegate::Test::Thrower,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool supportsUndeclaredExceptions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool supportsAssertException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAasA(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAorDasAorD(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwBasA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwCasA(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwBasB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwCasB(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwCasC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwModA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwUndeclaredA(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwUndeclaredB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwUndeclaredC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwNonIceException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAssertException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq throwMemoryLimitException(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwLocalExceptionIdempotent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAfterResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAfterException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class WrongOperation : virtual public ::IceDelegate::Test::WrongOperation,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void noSuchOperation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class Empty : virtual public ::IceDelegate::Test::Empty,
              virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Thrower : virtual public ::IceDelegate::Test::Thrower,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool supportsUndeclaredExceptions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool supportsAssertException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAasA(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAorDasAorD(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwBasA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwCasA(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwBasB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwCasB(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwCasC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwModA(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwUndeclaredA(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwUndeclaredB(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwUndeclaredC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwNonIceException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAssertException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq throwMemoryLimitException(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwLocalExceptionIdempotent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAfterResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void throwAfterException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class WrongOperation : virtual public ::IceDelegate::Test::WrongOperation,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void noSuchOperation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class Empty : virtual public ::Ice::Object
{
public:

    typedef EmptyPrx ProxyType;
    typedef EmptyPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Empty& l, const Empty& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Empty& l, const Empty& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Thrower : virtual public ::Ice::Object
{
public:

    typedef ThrowerPrx ProxyType;
    typedef ThrowerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool supportsUndeclaredExceptions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___supportsUndeclaredExceptions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool supportsAssertException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___supportsAssertException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwAasA(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwAasA(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwAorDasAorD(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwAorDasAorD(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwBasA(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwBasA(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwCasA(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwCasA(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwBasB(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwBasB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwCasB(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwCasB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwCasC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwCasC(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwModA(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwModA(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwUndeclaredA(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwUndeclaredA(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwUndeclaredB(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwUndeclaredB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwUndeclaredC(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwUndeclaredC(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwLocalException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwLocalException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwNonIceException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwNonIceException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwAssertException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwAssertException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::ByteSeq throwMemoryLimitException(const ::Ice::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwMemoryLimitException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwLocalExceptionIdempotent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwLocalExceptionIdempotent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwAfterResponse(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwAfterResponse(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void throwAfterException(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___throwAfterException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Thrower& l, const Thrower& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Thrower& l, const Thrower& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class WrongOperation : virtual public ::Ice::Object
{
public:

    typedef WrongOperationPrx ProxyType;
    typedef WrongOperationPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void noSuchOperation(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___noSuchOperation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const WrongOperation& l, const WrongOperation& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WrongOperation& l, const WrongOperation& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_Thrower_shutdown : public Callback_Thrower_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_shutdown : public Callback_Thrower_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_shutdownPtr
newCallback_Thrower_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_supportsUndeclaredExceptions : public Callback_Thrower_supportsUndeclaredExceptions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Thrower_supportsUndeclaredExceptions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_supportsUndeclaredExceptions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Thrower_supportsUndeclaredExceptionsPtr
newCallback_Thrower_supportsUndeclaredExceptions(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_supportsUndeclaredExceptions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_supportsUndeclaredExceptionsPtr
newCallback_Thrower_supportsUndeclaredExceptions(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_supportsUndeclaredExceptions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_supportsUndeclaredExceptions : public Callback_Thrower_supportsUndeclaredExceptions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Thrower_supportsUndeclaredExceptions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_supportsUndeclaredExceptions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_supportsUndeclaredExceptionsPtr
newCallback_Thrower_supportsUndeclaredExceptions(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_supportsUndeclaredExceptions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_supportsUndeclaredExceptionsPtr
newCallback_Thrower_supportsUndeclaredExceptions(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_supportsUndeclaredExceptions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_supportsAssertException : public Callback_Thrower_supportsAssertException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Thrower_supportsAssertException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_supportsAssertException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Thrower_supportsAssertExceptionPtr
newCallback_Thrower_supportsAssertException(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_supportsAssertException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_supportsAssertExceptionPtr
newCallback_Thrower_supportsAssertException(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_supportsAssertException<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_supportsAssertException : public Callback_Thrower_supportsAssertException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Thrower_supportsAssertException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_supportsAssertException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_supportsAssertExceptionPtr
newCallback_Thrower_supportsAssertException(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_supportsAssertException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_supportsAssertExceptionPtr
newCallback_Thrower_supportsAssertException(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_supportsAssertException<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwAasA : public Callback_Thrower_throwAasA_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwAasA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwAasA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAasA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAasA<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAasA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAasA<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwAasA : public Callback_Thrower_throwAasA_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwAasA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwAasA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAasA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAasA<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAasA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAasAPtr
newCallback_Thrower_throwAasA(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAasA<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwAorDasAorD : public Callback_Thrower_throwAorDasAorD_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwAorDasAorD(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwAorDasAorD(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAorDasAorD<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAorDasAorD<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAorDasAorD<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAorDasAorD<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwAorDasAorD : public Callback_Thrower_throwAorDasAorD_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwAorDasAorD(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwAorDasAorD(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAorDasAorD<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAorDasAorD<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAorDasAorD<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAorDasAorDPtr
newCallback_Thrower_throwAorDasAorD(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAorDasAorD<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwBasA : public Callback_Thrower_throwBasA_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwBasA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwBasA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasA<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasA<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwBasA : public Callback_Thrower_throwBasA_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwBasA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwBasA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasA<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwBasAPtr
newCallback_Thrower_throwBasA(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasA<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwCasA : public Callback_Thrower_throwCasA_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwCasA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwCasA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasA<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasA<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwCasA : public Callback_Thrower_throwCasA_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwCasA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwCasA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasA<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasAPtr
newCallback_Thrower_throwCasA(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasA<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwBasB : public Callback_Thrower_throwBasB_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwBasB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwBasB(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasB<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwBasB<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwBasB : public Callback_Thrower_throwBasB_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwBasB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwBasB(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasB<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwBasBPtr
newCallback_Thrower_throwBasB(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwBasB<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwCasB : public Callback_Thrower_throwCasB_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwCasB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwCasB(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasB<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasB<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwCasB : public Callback_Thrower_throwCasB_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwCasB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwCasB(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasB<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasBPtr
newCallback_Thrower_throwCasB(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasB<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwCasC : public Callback_Thrower_throwCasC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwCasC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwCasC(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasC<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwCasC<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwCasC : public Callback_Thrower_throwCasC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwCasC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwCasC(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasC<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwCasCPtr
newCallback_Thrower_throwCasC(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwCasC<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwModA : public Callback_Thrower_throwModA_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwModA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwModA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwModA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwModA<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwModA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwModA<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwModA : public Callback_Thrower_throwModA_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwModA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwModA(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwModA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwModA<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwModA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwModAPtr
newCallback_Thrower_throwModA(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwModA<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwUndeclaredA : public Callback_Thrower_throwUndeclaredA_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwUndeclaredA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredA<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredA<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwUndeclaredA : public Callback_Thrower_throwUndeclaredA_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwUndeclaredA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredA<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredAPtr
newCallback_Thrower_throwUndeclaredA(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredA<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwUndeclaredB : public Callback_Thrower_throwUndeclaredB_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwUndeclaredB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredB<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredB<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwUndeclaredB : public Callback_Thrower_throwUndeclaredB_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwUndeclaredB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredB<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredBPtr
newCallback_Thrower_throwUndeclaredB(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredB<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwUndeclaredC : public Callback_Thrower_throwUndeclaredC_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwUndeclaredC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredC<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwUndeclaredC<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwUndeclaredC : public Callback_Thrower_throwUndeclaredC_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwUndeclaredC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredC<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwUndeclaredCPtr
newCallback_Thrower_throwUndeclaredC(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwUndeclaredC<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwLocalException : public Callback_Thrower_throwLocalException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwLocalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwLocalException : public Callback_Thrower_throwLocalException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwLocalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwLocalExceptionPtr
newCallback_Thrower_throwLocalException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwNonIceException : public Callback_Thrower_throwNonIceException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwNonIceException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwNonIceException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwNonIceException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwNonIceException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwNonIceException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwNonIceException : public Callback_Thrower_throwNonIceException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwNonIceException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwNonIceException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwNonIceException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwNonIceException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwNonIceExceptionPtr
newCallback_Thrower_throwNonIceException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwNonIceException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwAssertException : public Callback_Thrower_throwAssertException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwAssertException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAssertException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAssertException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAssertException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAssertException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwAssertException : public Callback_Thrower_throwAssertException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwAssertException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAssertException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAssertException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAssertException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAssertExceptionPtr
newCallback_Thrower_throwAssertException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAssertException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwMemoryLimitException : public Callback_Thrower_throwMemoryLimitException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_Thrower_throwMemoryLimitException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_throwMemoryLimitException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwMemoryLimitExceptionPtr
newCallback_Thrower_throwMemoryLimitException(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwMemoryLimitException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwMemoryLimitExceptionPtr
newCallback_Thrower_throwMemoryLimitException(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwMemoryLimitException<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwMemoryLimitException : public Callback_Thrower_throwMemoryLimitException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_Thrower_throwMemoryLimitException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_throwMemoryLimitException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwMemoryLimitExceptionPtr
newCallback_Thrower_throwMemoryLimitException(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwMemoryLimitException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwMemoryLimitExceptionPtr
newCallback_Thrower_throwMemoryLimitException(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwMemoryLimitException<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwLocalExceptionIdempotent : public Callback_Thrower_throwLocalExceptionIdempotent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwLocalExceptionIdempotent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalExceptionIdempotent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalExceptionIdempotent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalExceptionIdempotent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwLocalExceptionIdempotent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwLocalExceptionIdempotent : public Callback_Thrower_throwLocalExceptionIdempotent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwLocalExceptionIdempotent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalExceptionIdempotent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalExceptionIdempotent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalExceptionIdempotent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwLocalExceptionIdempotentPtr
newCallback_Thrower_throwLocalExceptionIdempotent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwLocalExceptionIdempotent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwAfterResponse : public Callback_Thrower_throwAfterResponse_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwAfterResponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterResponse<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterResponse<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterResponse<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterResponse<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwAfterResponse : public Callback_Thrower_throwAfterResponse_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwAfterResponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterResponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterResponse<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterResponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAfterResponsePtr
newCallback_Thrower_throwAfterResponse(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterResponse<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Thrower_throwAfterException : public Callback_Thrower_throwAfterException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Thrower_throwAfterException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwAfterException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Thrower_throwAfterException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Thrower_throwAfterException : public Callback_Thrower_throwAfterException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Thrower_throwAfterException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ThrowerPrx __proxy = ::Test::ThrowerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_throwAfterException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Thrower_throwAfterExceptionPtr
newCallback_Thrower_throwAfterException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Thrower_throwAfterException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WrongOperation_noSuchOperation : public Callback_WrongOperation_noSuchOperation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WrongOperation_noSuchOperation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WrongOperation_noSuchOperation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WrongOperation_noSuchOperation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WrongOperation_noSuchOperation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WrongOperation_noSuchOperation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WrongOperation_noSuchOperation : public Callback_WrongOperation_noSuchOperation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WrongOperation_noSuchOperation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WrongOperation_noSuchOperation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WrongOperation_noSuchOperation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WrongOperation_noSuchOperation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WrongOperation_noSuchOperationPtr
newCallback_WrongOperation_noSuchOperation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WrongOperation_noSuchOperation<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
