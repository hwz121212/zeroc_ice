// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ServerPrivateAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ServerPrivateAMD_h__
#define __ServerPrivateAMD_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <TestAMD.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class SBSUnknownDerived;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::SBSUnknownDerived>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::SBSUnknownDerived*);

class SUnknown;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::SUnknown>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::SUnknown*);

class D2;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::D2>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::D2*);

class D4;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::D4>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::D4*);

class MyClass;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::MyClass*);

class PSUnknown;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::PSUnknown>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::PSUnknown*);

class PSUnknown2;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::PSUnknown2>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::PSUnknown2*);

}

}

namespace Test
{

class SBSUnknownDerived;
bool operator==(const SBSUnknownDerived&, const SBSUnknownDerived&);
bool operator<(const SBSUnknownDerived&, const SBSUnknownDerived&);
::Ice::Object* upCast(::Test::SBSUnknownDerived*);
typedef ::IceInternal::Handle< ::Test::SBSUnknownDerived> SBSUnknownDerivedPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::SBSUnknownDerived> SBSUnknownDerivedPrx;
void __patch(SBSUnknownDerivedPtr&, const ::Ice::ObjectPtr&);

class SUnknown;
bool operator==(const SUnknown&, const SUnknown&);
bool operator<(const SUnknown&, const SUnknown&);
::Ice::Object* upCast(::Test::SUnknown*);
typedef ::IceInternal::Handle< ::Test::SUnknown> SUnknownPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::SUnknown> SUnknownPrx;
void __patch(SUnknownPtr&, const ::Ice::ObjectPtr&);

class D2;
bool operator==(const D2&, const D2&);
bool operator<(const D2&, const D2&);
::Ice::Object* upCast(::Test::D2*);
typedef ::IceInternal::Handle< ::Test::D2> D2Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::D2> D2Prx;
void __patch(D2Ptr&, const ::Ice::ObjectPtr&);

class D4;
bool operator==(const D4&, const D4&);
bool operator<(const D4&, const D4&);
::Ice::Object* upCast(::Test::D4*);
typedef ::IceInternal::Handle< ::Test::D4> D4Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::D4> D4Prx;
void __patch(D4Ptr&, const ::Ice::ObjectPtr&);

class MyClass;
bool operator==(const MyClass&, const MyClass&);
bool operator<(const MyClass&, const MyClass&);
::Ice::Object* upCast(::Test::MyClass*);
typedef ::IceInternal::Handle< ::Test::MyClass> MyClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass> MyClassPrx;
void __patch(MyClassPtr&, const ::Ice::ObjectPtr&);

class PSUnknown;
bool operator==(const PSUnknown&, const PSUnknown&);
bool operator<(const PSUnknown&, const PSUnknown&);
::Ice::Object* upCast(::Test::PSUnknown*);
typedef ::IceInternal::Handle< ::Test::PSUnknown> PSUnknownPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::PSUnknown> PSUnknownPrx;
void __patch(PSUnknownPtr&, const ::Ice::ObjectPtr&);

class PSUnknown2;
bool operator==(const PSUnknown2&, const PSUnknown2&);
bool operator<(const PSUnknown2&, const PSUnknown2&);
::Ice::Object* upCast(::Test::PSUnknown2*);
typedef ::IceInternal::Handle< ::Test::PSUnknown2> PSUnknown2Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::PSUnknown2> PSUnknown2Prx;
void __patch(PSUnknown2Ptr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class UnknownDerivedException : public ::Test::BaseException
{
public:

    UnknownDerivedException() {}
    UnknownDerivedException(const ::std::string&, const ::Test::BPtr&, const ::std::string&, const ::Test::D2Ptr&);
    virtual ~UnknownDerivedException() throw();

    virtual ::std::string ice_name() const;
    virtual UnknownDerivedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string sude;
    ::Test::D2Ptr pd2;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::BaseException::__writeImpl;
    using ::Test::BaseException::__readImpl;
    #endif
};

static UnknownDerivedException __UnknownDerivedException_init;

class PSUnknownException : public ::Test::PreservedException
{
public:

    PSUnknownException() {}
    explicit PSUnknownException(const ::Test::PSUnknown2Ptr&);
    virtual ~PSUnknownException() throw();

    virtual ::std::string ice_name() const;
    virtual PSUnknownException* ice_clone() const;
    virtual void ice_throw() const;

    virtual bool __usesClasses() const;

    ::Test::PSUnknown2Ptr p;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::PreservedException::__writeImpl;
    using ::Test::PreservedException::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::UnknownDerivedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::PSUnknownException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace IceAsync
{

}

namespace Test
{

}

namespace IceProxy
{

namespace Test
{

class SBSUnknownDerived : virtual public ::IceProxy::Test::SBase
{
public:
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_secure(bool __secure) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_twoway() const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_oneway() const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_batchOneway() const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_datagram() const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_batchDatagram() const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_compress(bool __compress) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SBSUnknownDerived> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SBSUnknownDerived*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SUnknown : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<SUnknown> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_secure(bool __secure) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_twoway() const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_oneway() const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_batchOneway() const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_datagram() const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_batchDatagram() const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_compress(bool __compress) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SUnknown> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SUnknown*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class D2 : virtual public ::IceProxy::Test::B
{
public:
    
    ::IceInternal::ProxyHandle<D2> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_secure(bool __secure) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_twoway() const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_oneway() const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_batchOneway() const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_datagram() const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_batchDatagram() const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_compress(bool __compress) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_timeout(int __timeout) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D2> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<D2*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class D4 : virtual public ::IceProxy::Test::B
{
public:
    
    ::IceInternal::ProxyHandle<D4> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_secure(bool __secure) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_twoway() const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_oneway() const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_batchOneway() const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_datagram() const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_batchDatagram() const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_compress(bool __compress) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_timeout(int __timeout) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D4> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<D4*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MyClass : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<MyClass> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_secure(bool __secure) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_twoway() const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_oneway() const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_batchOneway() const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_datagram() const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_batchDatagram() const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_compress(bool __compress) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MyClass> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MyClass*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PSUnknown : virtual public ::IceProxy::Test::Preserved
{
public:
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_secure(bool __secure) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_twoway() const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_oneway() const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_batchOneway() const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_datagram() const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_batchDatagram() const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_compress(bool __compress) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PSUnknown*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PSUnknown2 : virtual public ::IceProxy::Test::Preserved
{
public:
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_secure(bool __secure) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_twoway() const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_oneway() const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_batchOneway() const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_datagram() const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_batchDatagram() const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_compress(bool __compress) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PSUnknown2> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PSUnknown2*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class SBSUnknownDerived : virtual public ::IceDelegate::Test::SBase
{
public:
};

class SUnknown : virtual public ::IceDelegate::Ice::Object
{
public:
};

class D2 : virtual public ::IceDelegate::Test::B
{
public:
};

class D4 : virtual public ::IceDelegate::Test::B
{
public:
};

class MyClass : virtual public ::IceDelegate::Ice::Object
{
public:
};

class PSUnknown : virtual public ::IceDelegate::Test::Preserved
{
public:
};

class PSUnknown2 : virtual public ::IceDelegate::Test::Preserved
{
public:
};

}

}

namespace IceDelegateM
{

namespace Test
{

class SBSUnknownDerived : virtual public ::IceDelegate::Test::SBSUnknownDerived,
                          virtual public ::IceDelegateM::Test::SBase
{
public:
};

class SUnknown : virtual public ::IceDelegate::Test::SUnknown,
                 virtual public ::IceDelegateM::Ice::Object
{
public:
};

class D2 : virtual public ::IceDelegate::Test::D2,
           virtual public ::IceDelegateM::Test::B
{
public:
};

class D4 : virtual public ::IceDelegate::Test::D4,
           virtual public ::IceDelegateM::Test::B
{
public:
};

class MyClass : virtual public ::IceDelegate::Test::MyClass,
                virtual public ::IceDelegateM::Ice::Object
{
public:
};

class PSUnknown : virtual public ::IceDelegate::Test::PSUnknown,
                  virtual public ::IceDelegateM::Test::Preserved
{
public:
};

class PSUnknown2 : virtual public ::IceDelegate::Test::PSUnknown2,
                   virtual public ::IceDelegateM::Test::Preserved
{
public:
};

}

}

namespace IceDelegateD
{

namespace Test
{

class SBSUnknownDerived : virtual public ::IceDelegate::Test::SBSUnknownDerived,
                          virtual public ::IceDelegateD::Test::SBase
{
public:
};

class SUnknown : virtual public ::IceDelegate::Test::SUnknown,
                 virtual public ::IceDelegateD::Ice::Object
{
public:
};

class D2 : virtual public ::IceDelegate::Test::D2,
           virtual public ::IceDelegateD::Test::B
{
public:
};

class D4 : virtual public ::IceDelegate::Test::D4,
           virtual public ::IceDelegateD::Test::B
{
public:
};

class MyClass : virtual public ::IceDelegate::Test::MyClass,
                virtual public ::IceDelegateD::Ice::Object
{
public:
};

class PSUnknown : virtual public ::IceDelegate::Test::PSUnknown,
                  virtual public ::IceDelegateD::Test::Preserved
{
public:
};

class PSUnknown2 : virtual public ::IceDelegate::Test::PSUnknown2,
                   virtual public ::IceDelegateD::Test::Preserved
{
public:
};

}

}

namespace Test
{

class SBSUnknownDerived : public ::Test::SBase
{
public:

    typedef SBSUnknownDerivedPrx ProxyType;
    typedef SBSUnknownDerivedPtr PointerType;

    SBSUnknownDerived()
    {
    }

    SBSUnknownDerived(const ::std::string& __ice_sb, const ::std::string& __ice_sbsud) :
        ::Test::SBase(__ice_sb)
        ,
        sbsud(__ice_sbsud)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::SBase::__writeImpl;
    using ::Test::SBase::__readImpl;
    #endif

public:

    ::std::string sbsud;

protected:

    virtual ~SBSUnknownDerived() {}

    friend class SBSUnknownDerived__staticInit;
};

class SBSUnknownDerived__staticInit
{
public:

    ::Test::SBSUnknownDerived _init;
};

static SBSUnknownDerived__staticInit _SBSUnknownDerived_init;

inline bool operator==(const SBSUnknownDerived& l, const SBSUnknownDerived& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SBSUnknownDerived& l, const SBSUnknownDerived& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SUnknown : virtual public ::Ice::Object
{
public:

    typedef SUnknownPrx ProxyType;
    typedef SUnknownPtr PointerType;

    SUnknown()
    {
    }

    explicit SUnknown(const ::std::string& __ice_su) :
        su(__ice_su)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string su;

protected:

    virtual ~SUnknown() {}
};

inline bool operator==(const SUnknown& l, const SUnknown& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SUnknown& l, const SUnknown& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class D2 : public ::Test::B
{
public:

    typedef D2Prx ProxyType;
    typedef D2Ptr PointerType;

    D2()
    {
    }

    D2(const ::std::string& __ice_sb, const ::Test::BPtr& __ice_pb, const ::std::string& __ice_sd2, const ::Test::BPtr& __ice_pd2) :
        ::Test::B(__ice_sb, __ice_pb)
        ,
        sd2(__ice_sd2),
        pd2(__ice_pd2)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::B::__writeImpl;
    using ::Test::B::__readImpl;
    #endif

public:

    ::std::string sd2;

    ::Test::BPtr pd2;

protected:

    virtual ~D2() {}
};

inline bool operator==(const D2& l, const D2& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const D2& l, const D2& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class D4 : public ::Test::B
{
public:

    typedef D4Prx ProxyType;
    typedef D4Ptr PointerType;

    D4()
    {
    }

    D4(const ::std::string& __ice_sb, const ::Test::BPtr& __ice_pb, const ::Test::BPtr& __ice_p1, const ::Test::BPtr& __ice_p2) :
        ::Test::B(__ice_sb, __ice_pb)
        ,
        p1(__ice_p1),
        p2(__ice_p2)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::B::__writeImpl;
    using ::Test::B::__readImpl;
    #endif

public:

    ::Test::BPtr p1;

    ::Test::BPtr p2;

protected:

    virtual ~D4() {}
};

inline bool operator==(const D4& l, const D4& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const D4& l, const D4& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MyClass : virtual public ::Ice::Object
{
public:

    typedef MyClassPrx ProxyType;
    typedef MyClassPtr PointerType;

    MyClass()
    {
    }

    explicit MyClass(::Ice::Int __ice_i) :
        i(__ice_i)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int i;

protected:

    virtual ~MyClass() {}
};

inline bool operator==(const MyClass& l, const MyClass& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MyClass& l, const MyClass& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PSUnknown : public ::Test::Preserved
{
public:

    typedef PSUnknownPrx ProxyType;
    typedef PSUnknownPtr PointerType;

    PSUnknown()
    {
    }

    PSUnknown(::Ice::Int __ice_pi, const ::std::string& __ice_ps, const ::std::string& __ice_psu, const ::Test::PNodePtr& __ice_graph, const ::Test::MyClassPtr& __ice_cl) :
        ::Test::Preserved(__ice_pi, __ice_ps)
        ,
        psu(__ice_psu),
        graph(__ice_graph),
        cl(__ice_cl)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Preserved::__writeImpl;
    using ::Test::Preserved::__readImpl;
    #endif

public:

    ::std::string psu;

    ::Test::PNodePtr graph;

    ::Test::MyClassPtr cl;

protected:

    virtual ~PSUnknown() {}
};

inline bool operator==(const PSUnknown& l, const PSUnknown& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PSUnknown& l, const PSUnknown& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PSUnknown2 : public ::Test::Preserved
{
public:

    typedef PSUnknown2Prx ProxyType;
    typedef PSUnknown2Ptr PointerType;

    PSUnknown2()
    {
    }

    PSUnknown2(::Ice::Int __ice_pi, const ::std::string& __ice_ps, const ::Test::PBasePtr& __ice_pb) :
        ::Test::Preserved(__ice_pi, __ice_ps)
        ,
        pb(__ice_pb)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Preserved::__writeImpl;
    using ::Test::Preserved::__readImpl;
    #endif

public:

    ::Test::PBasePtr pb;

protected:

    virtual ~PSUnknown2() {}
};

inline bool operator==(const PSUnknown2& l, const PSUnknown2& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PSUnknown2& l, const PSUnknown2& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

}

#endif
