// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ClientPrivate_h__
#define __ClientPrivate_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Test.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class D3;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::D3>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::D3*);

class PCUnknown;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::PCUnknown>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::PCUnknown*);

class PCDerived;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::PCDerived>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::PCDerived*);

class PCDerived2;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::PCDerived2>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::PCDerived2*);

class PCDerived3;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::PCDerived3>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::PCDerived3*);

class CompactPCDerived;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::CompactPCDerived>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::CompactPCDerived*);

}

}

namespace Test
{

class D3;
bool operator==(const D3&, const D3&);
bool operator<(const D3&, const D3&);
::Ice::Object* upCast(::Test::D3*);
typedef ::IceInternal::Handle< ::Test::D3> D3Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::D3> D3Prx;
void __patch(D3Ptr&, const ::Ice::ObjectPtr&);

class PCUnknown;
bool operator==(const PCUnknown&, const PCUnknown&);
bool operator<(const PCUnknown&, const PCUnknown&);
::Ice::Object* upCast(::Test::PCUnknown*);
typedef ::IceInternal::Handle< ::Test::PCUnknown> PCUnknownPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::PCUnknown> PCUnknownPrx;
void __patch(PCUnknownPtr&, const ::Ice::ObjectPtr&);

class PCDerived;
bool operator==(const PCDerived&, const PCDerived&);
bool operator<(const PCDerived&, const PCDerived&);
::Ice::Object* upCast(::Test::PCDerived*);
typedef ::IceInternal::Handle< ::Test::PCDerived> PCDerivedPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::PCDerived> PCDerivedPrx;
void __patch(PCDerivedPtr&, const ::Ice::ObjectPtr&);

class PCDerived2;
bool operator==(const PCDerived2&, const PCDerived2&);
bool operator<(const PCDerived2&, const PCDerived2&);
::Ice::Object* upCast(::Test::PCDerived2*);
typedef ::IceInternal::Handle< ::Test::PCDerived2> PCDerived2Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::PCDerived2> PCDerived2Prx;
void __patch(PCDerived2Ptr&, const ::Ice::ObjectPtr&);

class PCDerived3;
bool operator==(const PCDerived3&, const PCDerived3&);
bool operator<(const PCDerived3&, const PCDerived3&);
::Ice::Object* upCast(::Test::PCDerived3*);
typedef ::IceInternal::Handle< ::Test::PCDerived3> PCDerived3Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::PCDerived3> PCDerived3Prx;
void __patch(PCDerived3Ptr&, const ::Ice::ObjectPtr&);

class CompactPCDerived;
bool operator==(const CompactPCDerived&, const CompactPCDerived&);
bool operator<(const CompactPCDerived&, const CompactPCDerived&);
::Ice::Object* upCast(::Test::CompactPCDerived*);
typedef ::IceInternal::Handle< ::Test::CompactPCDerived> CompactPCDerivedPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::CompactPCDerived> CompactPCDerivedPrx;
void __patch(CompactPCDerivedPtr&, const ::Ice::ObjectPtr&);

}

namespace IceAsync
{

}

namespace Test
{

}

namespace IceProxy
{

namespace Test
{

class D3 : virtual public ::IceProxy::Test::B
{
public:
    
    ::IceInternal::ProxyHandle<D3> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_secure(bool __secure) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_twoway() const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_oneway() const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_batchOneway() const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_datagram() const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_batchDatagram() const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_compress(bool __compress) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_timeout(int __timeout) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D3> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<D3*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PCUnknown : virtual public ::IceProxy::Test::PBase
{
public:
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_secure(bool __secure) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_twoway() const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_oneway() const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_batchOneway() const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_datagram() const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_batchDatagram() const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_compress(bool __compress) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCUnknown> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PCUnknown*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PCDerived : virtual public ::IceProxy::Test::PDerived
{
public:
    
    ::IceInternal::ProxyHandle<PCDerived> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_secure(bool __secure) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_twoway() const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_oneway() const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_batchOneway() const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_datagram() const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_batchDatagram() const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_compress(bool __compress) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PCDerived*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PCDerived2 : virtual public ::IceProxy::Test::PCDerived
{
public:
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_secure(bool __secure) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_twoway() const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_oneway() const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_batchOneway() const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_datagram() const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_batchDatagram() const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_compress(bool __compress) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived2> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PCDerived2*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PCDerived3 : virtual public ::IceProxy::Test::PCDerived2
{
public:
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_secure(bool __secure) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_twoway() const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_oneway() const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_batchOneway() const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_datagram() const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_batchDatagram() const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_compress(bool __compress) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PCDerived3> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PCDerived3*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CompactPCDerived : virtual public ::IceProxy::Test::CompactPDerived
{
public:
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_secure(bool __secure) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_twoway() const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_oneway() const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_batchOneway() const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_datagram() const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_batchDatagram() const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_compress(bool __compress) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CompactPCDerived> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CompactPCDerived*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class D3 : virtual public ::IceDelegate::Test::B
{
public:
};

class PCUnknown : virtual public ::IceDelegate::Test::PBase
{
public:
};

class PCDerived : virtual public ::IceDelegate::Test::PDerived
{
public:
};

class PCDerived2 : virtual public ::IceDelegate::Test::PCDerived
{
public:
};

class PCDerived3 : virtual public ::IceDelegate::Test::PCDerived2
{
public:
};

class CompactPCDerived : virtual public ::IceDelegate::Test::CompactPDerived
{
public:
};

}

}

namespace IceDelegateM
{

namespace Test
{

class D3 : virtual public ::IceDelegate::Test::D3,
           virtual public ::IceDelegateM::Test::B
{
public:
};

class PCUnknown : virtual public ::IceDelegate::Test::PCUnknown,
                  virtual public ::IceDelegateM::Test::PBase
{
public:
};

class PCDerived : virtual public ::IceDelegate::Test::PCDerived,
                  virtual public ::IceDelegateM::Test::PDerived
{
public:
};

class PCDerived2 : virtual public ::IceDelegate::Test::PCDerived2,
                   virtual public ::IceDelegateM::Test::PCDerived
{
public:
};

class PCDerived3 : virtual public ::IceDelegate::Test::PCDerived3,
                   virtual public ::IceDelegateM::Test::PCDerived2
{
public:
};

class CompactPCDerived : virtual public ::IceDelegate::Test::CompactPCDerived,
                         virtual public ::IceDelegateM::Test::CompactPDerived
{
public:
};

}

}

namespace IceDelegateD
{

namespace Test
{

class D3 : virtual public ::IceDelegate::Test::D3,
           virtual public ::IceDelegateD::Test::B
{
public:
};

class PCUnknown : virtual public ::IceDelegate::Test::PCUnknown,
                  virtual public ::IceDelegateD::Test::PBase
{
public:
};

class PCDerived : virtual public ::IceDelegate::Test::PCDerived,
                  virtual public ::IceDelegateD::Test::PDerived
{
public:
};

class PCDerived2 : virtual public ::IceDelegate::Test::PCDerived2,
                   virtual public ::IceDelegateD::Test::PCDerived
{
public:
};

class PCDerived3 : virtual public ::IceDelegate::Test::PCDerived3,
                   virtual public ::IceDelegateD::Test::PCDerived2
{
public:
};

class CompactPCDerived : virtual public ::IceDelegate::Test::CompactPCDerived,
                         virtual public ::IceDelegateD::Test::CompactPDerived
{
public:
};

}

}

namespace Test
{

class D3 : public ::Test::B
{
public:

    typedef D3Prx ProxyType;
    typedef D3Ptr PointerType;

    D3()
    {
    }

    D3(const ::std::string& __ice_sb, const ::Test::BPtr& __ice_pb, const ::std::string& __ice_sd3, const ::Test::BPtr& __ice_pd3) :
        ::Test::B(__ice_sb, __ice_pb)
        ,
        sd3(__ice_sd3),
        pd3(__ice_pd3)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::B::__writeImpl;
    using ::Test::B::__readImpl;
    #endif

public:

    ::std::string sd3;

    ::Test::BPtr pd3;

protected:

    virtual ~D3() {}

    friend class D3__staticInit;
};

class D3__staticInit
{
public:

    ::Test::D3 _init;
};

static D3__staticInit _D3_init;

inline bool operator==(const D3& l, const D3& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const D3& l, const D3& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PCUnknown : public ::Test::PBase, public IceInternal::GCShared
{
public:

    typedef PCUnknownPrx ProxyType;
    typedef PCUnknownPtr PointerType;

    PCUnknown()
    {
    }

    PCUnknown(::Ice::Int __ice_pi, const ::std::string& __ice_pu) :
        ::Test::PBase(__ice_pi)
        ,
        pu(__ice_pu)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::PBase::__write;
    using ::Test::PBase::__read;
    #endif

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::PBase::__writeImpl;
    using ::Test::PBase::__readImpl;
    #endif

public:

    ::std::string pu;

protected:

    virtual ~PCUnknown() {}

    ::Ice::SlicedDataPtr __slicedData;
};

inline bool operator==(const PCUnknown& l, const PCUnknown& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PCUnknown& l, const PCUnknown& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PCDerived : public ::Test::PDerived
{
public:

    typedef PCDerivedPrx ProxyType;
    typedef PCDerivedPtr PointerType;

    PCDerived()
    {
    }

    PCDerived(::Ice::Int __ice_pi, const ::std::string& __ice_ps, const ::Test::PBasePtr& __ice_pb, const ::Test::PBaseSeq& __ice_pbs) :
        ::Test::PDerived(__ice_pi, __ice_ps, __ice_pb)
        ,
        pbs(__ice_pbs)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::PDerived::__writeImpl;
    using ::Test::PDerived::__readImpl;
    #endif

public:

    ::Test::PBaseSeq pbs;

protected:

    virtual ~PCDerived() {}
};

inline bool operator==(const PCDerived& l, const PCDerived& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PCDerived& l, const PCDerived& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PCDerived2 : public ::Test::PCDerived
{
public:

    typedef PCDerived2Prx ProxyType;
    typedef PCDerived2Ptr PointerType;

    PCDerived2()
    {
    }

    PCDerived2(::Ice::Int __ice_pi, const ::std::string& __ice_ps, const ::Test::PBasePtr& __ice_pb, const ::Test::PBaseSeq& __ice_pbs, ::Ice::Int __ice_pcd2) :
        ::Test::PCDerived(__ice_pi, __ice_ps, __ice_pb, __ice_pbs)
        ,
        pcd2(__ice_pcd2)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::PCDerived::__writeImpl;
    using ::Test::PCDerived::__readImpl;
    #endif

public:

    ::Ice::Int pcd2;

protected:

    virtual ~PCDerived2() {}
};

inline bool operator==(const PCDerived2& l, const PCDerived2& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PCDerived2& l, const PCDerived2& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PCDerived3 : public ::Test::PCDerived2
{
public:

    typedef PCDerived3Prx ProxyType;
    typedef PCDerived3Ptr PointerType;

    PCDerived3()
    {
    }

    PCDerived3(::Ice::Int __ice_pi, const ::std::string& __ice_ps, const ::Test::PBasePtr& __ice_pb, const ::Test::PBaseSeq& __ice_pbs, ::Ice::Int __ice_pcd2, const ::Ice::ObjectPtr& __ice_pcd3) :
        ::Test::PCDerived2(__ice_pi, __ice_ps, __ice_pb, __ice_pbs, __ice_pcd2)
        ,
        pcd3(__ice_pcd3)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::PCDerived2::__writeImpl;
    using ::Test::PCDerived2::__readImpl;
    #endif

public:

    ::Ice::ObjectPtr pcd3;

protected:

    virtual ~PCDerived3() {}
};

inline bool operator==(const PCDerived3& l, const PCDerived3& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PCDerived3& l, const PCDerived3& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CompactPCDerived : public ::Test::CompactPDerived
{
public:

    typedef CompactPCDerivedPrx ProxyType;
    typedef CompactPCDerivedPtr PointerType;

    CompactPCDerived()
    {
    }

    CompactPCDerived(::Ice::Int __ice_pi, const ::std::string& __ice_ps, const ::Test::PBasePtr& __ice_pb, const ::Test::PBaseSeq& __ice_pbs) :
        ::Test::CompactPDerived(__ice_pi, __ice_ps, __ice_pb)
        ,
        pbs(__ice_pbs)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::CompactPDerived::__writeImpl;
    using ::Test::CompactPDerived::__readImpl;
    #endif

public:

    ::Test::PBaseSeq pbs;

protected:

    virtual ~CompactPCDerived() {}
};

inline bool operator==(const CompactPCDerived& l, const CompactPCDerived& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CompactPCDerived& l, const CompactPCDerived& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

}

#endif
