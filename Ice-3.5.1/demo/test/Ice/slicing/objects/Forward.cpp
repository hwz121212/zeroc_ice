// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Forward.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Forward.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Hidden* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Hidden>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Hidden;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Hidden::ice_staticId()
{
    return ::Test::Hidden::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Hidden::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Hidden);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Hidden::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Hidden);
}

::IceProxy::Ice::Object*
IceProxy::Test::Hidden::__newInstance() const
{
    return new Hidden;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Forward* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Forward>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Forward;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Forward::ice_staticId()
{
    return ::Test::Forward::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Forward::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Forward);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Forward::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Forward);
}

::IceProxy::Ice::Object*
IceProxy::Test::Forward::__newInstance() const
{
    return new Forward;
}

::Ice::Object* Test::upCast(::Test::Hidden* p) { return p; }
::Ice::ObjectPtr
Test::Hidden::ice_clone() const
{
    ::Ice::Object* __p = new Hidden(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Hidden_ids[2] =
{
    "::Ice::Object",
    "::Test::Hidden"
};

}

bool
Test::Hidden::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Hidden_ids, __Test__Hidden_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Hidden::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Hidden_ids[0], &__Test__Hidden_ids[2]);
}

const ::std::string&
Test::Hidden::ice_id(const ::Ice::Current&) const
{
    return __Test__Hidden_ids[1];
}

const ::std::string&
Test::Hidden::ice_staticId()
{
    return __Test__Hidden_ids[1];
}

void
Test::Hidden::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::Hidden::__usesGC()
{
    return true;
}

void
Test::Hidden::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(f)
    {
        ::Test::upCast(f.get())->__addObject(_c);
    }
}

void
Test::Hidden::__gcClear()
{
    if(f)
    {
        if(::Test::upCast(f.get())->__usesGC())
        {
            ::Test::upCast(f.get())->__decRefUnsafe();
            f.__clearHandleUnsafe();
        }
        else
        {
            f = 0;
        }
    }
}

void
Test::Hidden::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(f);
    __os->endWriteSlice();
}

void
Test::Hidden::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(f);
    __is->endReadSlice();
}

namespace
{

class __F__Test__Hidden : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Hidden::ice_staticId());
        return new ::Test::Hidden;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Hidden_Ptr = new __F__Test__Hidden;

class __F__Test__Hidden__Init
{
public:

    __F__Test__Hidden__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Hidden::ice_staticId(), __F__Test__Hidden_Ptr);
    }

    ~__F__Test__Hidden__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Hidden::ice_staticId());
    }
};

const __F__Test__Hidden__Init __F__Test__Hidden__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Hidden::ice_factory()
{
    return __F__Test__Hidden_Ptr;
}

void 
Test::__patch(HiddenPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::HiddenPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Hidden::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::Forward* p) { return p; }
::Ice::ObjectPtr
Test::Forward::ice_clone() const
{
    ::Ice::Object* __p = new Forward(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Forward_ids[2] =
{
    "::Ice::Object",
    "::Test::Forward"
};

}

bool
Test::Forward::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Forward_ids, __Test__Forward_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Forward::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Forward_ids[0], &__Test__Forward_ids[2]);
}

const ::std::string&
Test::Forward::ice_id(const ::Ice::Current&) const
{
    return __Test__Forward_ids[1];
}

const ::std::string&
Test::Forward::ice_staticId()
{
    return __Test__Forward_ids[1];
}

void
Test::Forward::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::Forward::__usesGC()
{
    return true;
}

void
Test::Forward::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(h)
    {
        ::Test::upCast(h.get())->__addObject(_c);
    }
}

void
Test::Forward::__gcClear()
{
    if(h)
    {
        if(::Test::upCast(h.get())->__usesGC())
        {
            ::Test::upCast(h.get())->__decRefUnsafe();
            h.__clearHandleUnsafe();
        }
        else
        {
            h = 0;
        }
    }
}

void
Test::Forward::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(h);
    __os->endWriteSlice();
}

void
Test::Forward::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(h);
    __is->endReadSlice();
}

namespace
{

class __F__Test__Forward : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Forward::ice_staticId());
        return new ::Test::Forward;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Forward_Ptr = new __F__Test__Forward;

class __F__Test__Forward__Init
{
public:

    __F__Test__Forward__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Forward::ice_staticId(), __F__Test__Forward_Ptr);
    }

    ~__F__Test__Forward__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Forward::ice_staticId());
    }
};

const __F__Test__Forward__Init __F__Test__Forward__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Forward::ice_factory()
{
    return __F__Test__Forward_Ptr;
}

void 
Test::__patch(ForwardPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::ForwardPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Forward::ice_staticId(), v);
    }
}
