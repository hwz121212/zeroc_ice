// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class BaseClass;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::BaseClass>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::BaseClass*);

class Relay;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Relay>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Relay*);

class TestIntf;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::TestIntf>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::TestIntf*);

}

}

namespace Test
{

class BaseClass;
bool operator==(const BaseClass&, const BaseClass&);
bool operator<(const BaseClass&, const BaseClass&);
::Ice::Object* upCast(::Test::BaseClass*);
typedef ::IceInternal::Handle< ::Test::BaseClass> BaseClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::BaseClass> BaseClassPrx;
void __patch(BaseClassPtr&, const ::Ice::ObjectPtr&);

class Relay;
bool operator==(const Relay&, const Relay&);
bool operator<(const Relay&, const Relay&);
::Ice::Object* upCast(::Test::Relay*);
typedef ::IceInternal::Handle< ::Test::Relay> RelayPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Relay> RelayPrx;
void __patch(RelayPtr&, const ::Ice::ObjectPtr&);

class TestIntf;
bool operator==(const TestIntf&, const TestIntf&);
bool operator<(const TestIntf&, const TestIntf&);
::Ice::Object* upCast(::Test::TestIntf*);
typedef ::IceInternal::Handle< ::Test::TestIntf> TestIntfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::TestIntf> TestIntfPrx;
void __patch(TestIntfPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class Base : public ::Ice::UserException
{
public:

    Base() {}
    explicit Base(const ::std::string&);
    virtual ~Base() throw();

    virtual ::std::string ice_name() const;
    virtual Base* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string b;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static Base __Base_init;

class KnownDerived : public ::Test::Base
{
public:

    KnownDerived() {}
    KnownDerived(const ::std::string&, const ::std::string&);
    virtual ~KnownDerived() throw();

    virtual ::std::string ice_name() const;
    virtual KnownDerived* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string kd;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Base::__writeImpl;
    using ::Test::Base::__readImpl;
    #endif
};

class KnownIntermediate : public ::Test::Base
{
public:

    KnownIntermediate() {}
    KnownIntermediate(const ::std::string&, const ::std::string&);
    virtual ~KnownIntermediate() throw();

    virtual ::std::string ice_name() const;
    virtual KnownIntermediate* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string ki;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Base::__writeImpl;
    using ::Test::Base::__readImpl;
    #endif
};

class KnownMostDerived : public ::Test::KnownIntermediate
{
public:

    KnownMostDerived() {}
    KnownMostDerived(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~KnownMostDerived() throw();

    virtual ::std::string ice_name() const;
    virtual KnownMostDerived* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string kmd;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::KnownIntermediate::__writeImpl;
    using ::Test::KnownIntermediate::__readImpl;
    #endif
};

class KnownPreserved : public ::Test::Base
{
public:

    KnownPreserved() {}
    KnownPreserved(const ::std::string&, const ::std::string&);
    virtual ~KnownPreserved() throw();

    virtual ::std::string ice_name() const;
    virtual KnownPreserved* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string kp;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Base::__write;
    using ::Test::Base::__read;
    #endif

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Base::__writeImpl;
    using ::Test::Base::__readImpl;
    #endif

    ::Ice::SlicedDataPtr __slicedData;
};

class KnownPreservedDerived : public ::Test::KnownPreserved
{
public:

    KnownPreservedDerived() {}
    KnownPreservedDerived(const ::std::string&, const ::std::string&, const ::std::string&);
    virtual ~KnownPreservedDerived() throw();

    virtual ::std::string ice_name() const;
    virtual KnownPreservedDerived* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string kpd;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::KnownPreserved::__writeImpl;
    using ::Test::KnownPreserved::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::Base>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::KnownDerived>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::KnownIntermediate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::KnownMostDerived>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::KnownPreserved>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::KnownPreservedDerived>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test
{

class Callback_Relay_knownPreservedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Relay_knownPreservedAsBase_Base> Callback_Relay_knownPreservedAsBasePtr;

class Callback_Relay_knownPreservedAsKnownPreserved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Relay_knownPreservedAsKnownPreserved_Base> Callback_Relay_knownPreservedAsKnownPreservedPtr;

class Callback_Relay_unknownPreservedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Relay_unknownPreservedAsBase_Base> Callback_Relay_unknownPreservedAsBasePtr;

class Callback_Relay_unknownPreservedAsKnownPreserved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Relay_unknownPreservedAsKnownPreserved_Base> Callback_Relay_unknownPreservedAsKnownPreservedPtr;

class Callback_TestIntf_baseAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_baseAsBase_Base> Callback_TestIntf_baseAsBasePtr;

class Callback_TestIntf_unknownDerivedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownDerivedAsBase_Base> Callback_TestIntf_unknownDerivedAsBasePtr;

class Callback_TestIntf_knownDerivedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownDerivedAsBase_Base> Callback_TestIntf_knownDerivedAsBasePtr;

class Callback_TestIntf_knownDerivedAsKnownDerived_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownDerivedAsKnownDerived_Base> Callback_TestIntf_knownDerivedAsKnownDerivedPtr;

class Callback_TestIntf_unknownIntermediateAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownIntermediateAsBase_Base> Callback_TestIntf_unknownIntermediateAsBasePtr;

class Callback_TestIntf_knownIntermediateAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownIntermediateAsBase_Base> Callback_TestIntf_knownIntermediateAsBasePtr;

class Callback_TestIntf_knownMostDerivedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownMostDerivedAsBase_Base> Callback_TestIntf_knownMostDerivedAsBasePtr;

class Callback_TestIntf_knownIntermediateAsKnownIntermediate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownIntermediateAsKnownIntermediate_Base> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr;

class Callback_TestIntf_knownMostDerivedAsKnownIntermediate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownMostDerivedAsKnownIntermediate_Base> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr;

class Callback_TestIntf_knownMostDerivedAsKnownMostDerived_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownMostDerivedAsKnownMostDerived_Base> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr;

class Callback_TestIntf_unknownMostDerived1AsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownMostDerived1AsBase_Base> Callback_TestIntf_unknownMostDerived1AsBasePtr;

class Callback_TestIntf_unknownMostDerived1AsKnownIntermediate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownMostDerived1AsKnownIntermediate_Base> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr;

class Callback_TestIntf_unknownMostDerived2AsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownMostDerived2AsBase_Base> Callback_TestIntf_unknownMostDerived2AsBasePtr;

class Callback_TestIntf_unknownMostDerived2AsBaseCompact_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownMostDerived2AsBaseCompact_Base> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr;

class Callback_TestIntf_knownPreservedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownPreservedAsBase_Base> Callback_TestIntf_knownPreservedAsBasePtr;

class Callback_TestIntf_knownPreservedAsKnownPreserved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_knownPreservedAsKnownPreserved_Base> Callback_TestIntf_knownPreservedAsKnownPreservedPtr;

class Callback_TestIntf_relayKnownPreservedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_relayKnownPreservedAsBase_Base> Callback_TestIntf_relayKnownPreservedAsBasePtr;

class Callback_TestIntf_relayKnownPreservedAsKnownPreserved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_relayKnownPreservedAsKnownPreserved_Base> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr;

class Callback_TestIntf_unknownPreservedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownPreservedAsBase_Base> Callback_TestIntf_unknownPreservedAsBasePtr;

class Callback_TestIntf_unknownPreservedAsKnownPreserved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_unknownPreservedAsKnownPreserved_Base> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr;

class Callback_TestIntf_relayUnknownPreservedAsBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_relayUnknownPreservedAsBase_Base> Callback_TestIntf_relayUnknownPreservedAsBasePtr;

class Callback_TestIntf_relayUnknownPreservedAsKnownPreserved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_relayUnknownPreservedAsKnownPreserved_Base> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr;

class Callback_TestIntf_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_shutdown_Base> Callback_TestIntf_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class BaseClass : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<BaseClass> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_secure(bool __secure) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_twoway() const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_oneway() const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_batchOneway() const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_datagram() const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_batchDatagram() const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_compress(bool __compress) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BaseClass> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BaseClass*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Relay : virtual public ::IceProxy::Ice::Object
{
public:

    void knownPreservedAsBase()
    {
        knownPreservedAsBase(0);
    }
    void knownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        knownPreservedAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownPreservedAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownPreservedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownPreservedAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase()
    {
        return begin_knownPreservedAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        return begin_knownPreservedAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Test::Callback_Relay_knownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_Relay_knownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(&__ctx, __del, __cookie);
    }

    void end_knownPreservedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void knownPreservedAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownPreservedAsKnownPreserved()
    {
        knownPreservedAsKnownPreserved(0);
    }
    void knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        knownPreservedAsKnownPreserved(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsKnownPreserved(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsKnownPreserved(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsKnownPreserved(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownPreservedAsKnownPreserved(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownPreservedAsKnownPreserved(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownPreservedAsKnownPreserved(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved()
    {
        return begin_knownPreservedAsKnownPreserved(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Test::Callback_Relay_knownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Test::Callback_Relay_knownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    void end_knownPreservedAsKnownPreserved(const ::Ice::AsyncResultPtr&);
    
private:

    void knownPreservedAsKnownPreserved(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownPreservedAsBase()
    {
        unknownPreservedAsBase(0);
    }
    void unknownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        unknownPreservedAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownPreservedAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownPreservedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownPreservedAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase()
    {
        return begin_unknownPreservedAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        return begin_unknownPreservedAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Test::Callback_Relay_unknownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_Relay_unknownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(&__ctx, __del, __cookie);
    }

    void end_unknownPreservedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownPreservedAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownPreservedAsKnownPreserved()
    {
        unknownPreservedAsKnownPreserved(0);
    }
    void unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        unknownPreservedAsKnownPreserved(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsKnownPreserved(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsKnownPreserved(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsKnownPreserved(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownPreservedAsKnownPreserved(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownPreservedAsKnownPreserved(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownPreservedAsKnownPreserved(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved()
    {
        return begin_unknownPreservedAsKnownPreserved(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Test::Callback_Relay_unknownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Test::Callback_Relay_unknownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    void end_unknownPreservedAsKnownPreserved(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownPreservedAsKnownPreserved(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Relay> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_secure(bool __secure) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_twoway() const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_oneway() const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_batchOneway() const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_datagram() const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_batchDatagram() const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_compress(bool __compress) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Relay> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Relay*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TestIntf : virtual public ::IceProxy::Ice::Object
{
public:

    void baseAsBase()
    {
        baseAsBase(0);
    }
    void baseAsBase(const ::Ice::Context& __ctx)
    {
        baseAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_baseAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_baseAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_baseAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_baseAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_baseAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_baseAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_baseAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_baseAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_baseAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_baseAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_baseAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_baseAsBase()
    {
        return begin_baseAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_baseAsBase(const ::Ice::Context& __ctx)
    {
        return begin_baseAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_baseAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_baseAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_baseAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_baseAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_baseAsBase(const ::Test::Callback_TestIntf_baseAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_baseAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_baseAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_baseAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_baseAsBase(&__ctx, __del, __cookie);
    }

    void end_baseAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void baseAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_baseAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownDerivedAsBase()
    {
        unknownDerivedAsBase(0);
    }
    void unknownDerivedAsBase(const ::Ice::Context& __ctx)
    {
        unknownDerivedAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownDerivedAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownDerivedAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownDerivedAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownDerivedAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownDerivedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownDerivedAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownDerivedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownDerivedAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownDerivedAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownDerivedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownDerivedAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownDerivedAsBase()
    {
        return begin_unknownDerivedAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownDerivedAsBase(const ::Ice::Context& __ctx)
    {
        return begin_unknownDerivedAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownDerivedAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownDerivedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownDerivedAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownDerivedAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownDerivedAsBase(const ::Test::Callback_TestIntf_unknownDerivedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownDerivedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownDerivedAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownDerivedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownDerivedAsBase(&__ctx, __del, __cookie);
    }

    void end_unknownDerivedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownDerivedAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownDerivedAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownDerivedAsBase()
    {
        knownDerivedAsBase(0);
    }
    void knownDerivedAsBase(const ::Ice::Context& __ctx)
    {
        knownDerivedAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownDerivedAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownDerivedAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownDerivedAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownDerivedAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownDerivedAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownDerivedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownDerivedAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownDerivedAsBase()
    {
        return begin_knownDerivedAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsBase(const ::Ice::Context& __ctx)
    {
        return begin_knownDerivedAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsBase(const ::Test::Callback_TestIntf_knownDerivedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownDerivedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsBase(&__ctx, __del, __cookie);
    }

    void end_knownDerivedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void knownDerivedAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownDerivedAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownDerivedAsKnownDerived()
    {
        knownDerivedAsKnownDerived(0);
    }
    void knownDerivedAsKnownDerived(const ::Ice::Context& __ctx)
    {
        knownDerivedAsKnownDerived(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsKnownDerived(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownDerivedAsKnownDerived(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsKnownDerived(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownDerivedAsKnownDerived(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsKnownDerived(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownDerivedAsKnownDerived(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownDerivedAsKnownDerived(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownDerivedAsKnownDerived(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownDerivedAsKnownDerived(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownDerivedAsKnownDerived(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownDerivedAsKnownDerived(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownDerivedAsKnownDerived()
    {
        return begin_knownDerivedAsKnownDerived(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsKnownDerived(const ::Ice::Context& __ctx)
    {
        return begin_knownDerivedAsKnownDerived(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsKnownDerived(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsKnownDerived(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsKnownDerived(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsKnownDerived(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsKnownDerived(const ::Test::Callback_TestIntf_knownDerivedAsKnownDerivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsKnownDerived(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownDerivedAsKnownDerived(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownDerivedAsKnownDerivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownDerivedAsKnownDerived(&__ctx, __del, __cookie);
    }

    void end_knownDerivedAsKnownDerived(const ::Ice::AsyncResultPtr&);
    
private:

    void knownDerivedAsKnownDerived(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownDerivedAsKnownDerived(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownIntermediateAsBase()
    {
        unknownIntermediateAsBase(0);
    }
    void unknownIntermediateAsBase(const ::Ice::Context& __ctx)
    {
        unknownIntermediateAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownIntermediateAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownIntermediateAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownIntermediateAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownIntermediateAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownIntermediateAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownIntermediateAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownIntermediateAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownIntermediateAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownIntermediateAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownIntermediateAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownIntermediateAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownIntermediateAsBase()
    {
        return begin_unknownIntermediateAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownIntermediateAsBase(const ::Ice::Context& __ctx)
    {
        return begin_unknownIntermediateAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownIntermediateAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownIntermediateAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownIntermediateAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownIntermediateAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownIntermediateAsBase(const ::Test::Callback_TestIntf_unknownIntermediateAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownIntermediateAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownIntermediateAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownIntermediateAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownIntermediateAsBase(&__ctx, __del, __cookie);
    }

    void end_unknownIntermediateAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownIntermediateAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownIntermediateAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownIntermediateAsBase()
    {
        knownIntermediateAsBase(0);
    }
    void knownIntermediateAsBase(const ::Ice::Context& __ctx)
    {
        knownIntermediateAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownIntermediateAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownIntermediateAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownIntermediateAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownIntermediateAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownIntermediateAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownIntermediateAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownIntermediateAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownIntermediateAsBase()
    {
        return begin_knownIntermediateAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsBase(const ::Ice::Context& __ctx)
    {
        return begin_knownIntermediateAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsBase(const ::Test::Callback_TestIntf_knownIntermediateAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownIntermediateAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsBase(&__ctx, __del, __cookie);
    }

    void end_knownIntermediateAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void knownIntermediateAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownIntermediateAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownMostDerivedAsBase()
    {
        knownMostDerivedAsBase(0);
    }
    void knownMostDerivedAsBase(const ::Ice::Context& __ctx)
    {
        knownMostDerivedAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownMostDerivedAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownMostDerivedAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownMostDerivedAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownMostDerivedAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownMostDerivedAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownMostDerivedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownMostDerivedAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsBase()
    {
        return begin_knownMostDerivedAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsBase(const ::Ice::Context& __ctx)
    {
        return begin_knownMostDerivedAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsBase(const ::Test::Callback_TestIntf_knownMostDerivedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownMostDerivedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsBase(&__ctx, __del, __cookie);
    }

    void end_knownMostDerivedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void knownMostDerivedAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownMostDerivedAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownIntermediateAsKnownIntermediate()
    {
        knownIntermediateAsKnownIntermediate(0);
    }
    void knownIntermediateAsKnownIntermediate(const ::Ice::Context& __ctx)
    {
        knownIntermediateAsKnownIntermediate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsKnownIntermediate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownIntermediateAsKnownIntermediate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsKnownIntermediate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownIntermediateAsKnownIntermediate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsKnownIntermediate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownIntermediateAsKnownIntermediate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownIntermediateAsKnownIntermediate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownIntermediateAsKnownIntermediate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownIntermediateAsKnownIntermediate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownIntermediateAsKnownIntermediate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownIntermediateAsKnownIntermediate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownIntermediateAsKnownIntermediate()
    {
        return begin_knownIntermediateAsKnownIntermediate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsKnownIntermediate(const ::Ice::Context& __ctx)
    {
        return begin_knownIntermediateAsKnownIntermediate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsKnownIntermediate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsKnownIntermediate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsKnownIntermediate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsKnownIntermediate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsKnownIntermediate(const ::Test::Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsKnownIntermediate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownIntermediateAsKnownIntermediate(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownIntermediateAsKnownIntermediate(&__ctx, __del, __cookie);
    }

    void end_knownIntermediateAsKnownIntermediate(const ::Ice::AsyncResultPtr&);
    
private:

    void knownIntermediateAsKnownIntermediate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownIntermediateAsKnownIntermediate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownMostDerivedAsKnownIntermediate()
    {
        knownMostDerivedAsKnownIntermediate(0);
    }
    void knownMostDerivedAsKnownIntermediate(const ::Ice::Context& __ctx)
    {
        knownMostDerivedAsKnownIntermediate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownIntermediate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownMostDerivedAsKnownIntermediate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownIntermediate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownMostDerivedAsKnownIntermediate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownIntermediate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownMostDerivedAsKnownIntermediate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownIntermediate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownMostDerivedAsKnownIntermediate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownMostDerivedAsKnownIntermediate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownMostDerivedAsKnownIntermediate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownMostDerivedAsKnownIntermediate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownIntermediate()
    {
        return begin_knownMostDerivedAsKnownIntermediate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownIntermediate(const ::Ice::Context& __ctx)
    {
        return begin_knownMostDerivedAsKnownIntermediate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownIntermediate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownIntermediate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownIntermediate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownIntermediate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownIntermediate(const ::Test::Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownIntermediate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownIntermediate(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownIntermediate(&__ctx, __del, __cookie);
    }

    void end_knownMostDerivedAsKnownIntermediate(const ::Ice::AsyncResultPtr&);
    
private:

    void knownMostDerivedAsKnownIntermediate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownIntermediate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownMostDerivedAsKnownMostDerived()
    {
        knownMostDerivedAsKnownMostDerived(0);
    }
    void knownMostDerivedAsKnownMostDerived(const ::Ice::Context& __ctx)
    {
        knownMostDerivedAsKnownMostDerived(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownMostDerived(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownMostDerivedAsKnownMostDerived(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownMostDerived(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownMostDerivedAsKnownMostDerived(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownMostDerived(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownMostDerivedAsKnownMostDerived(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownMostDerivedAsKnownMostDerived(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownMostDerivedAsKnownMostDerived(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownMostDerivedAsKnownMostDerived(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownMostDerivedAsKnownMostDerived(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownMostDerivedAsKnownMostDerived(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownMostDerived()
    {
        return begin_knownMostDerivedAsKnownMostDerived(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownMostDerived(const ::Ice::Context& __ctx)
    {
        return begin_knownMostDerivedAsKnownMostDerived(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownMostDerived(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownMostDerived(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownMostDerived(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownMostDerived(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownMostDerived(const ::Test::Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownMostDerived(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownMostDerived(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownMostDerivedAsKnownMostDerived(&__ctx, __del, __cookie);
    }

    void end_knownMostDerivedAsKnownMostDerived(const ::Ice::AsyncResultPtr&);
    
private:

    void knownMostDerivedAsKnownMostDerived(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownMostDerivedAsKnownMostDerived(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownMostDerived1AsBase()
    {
        unknownMostDerived1AsBase(0);
    }
    void unknownMostDerived1AsBase(const ::Ice::Context& __ctx)
    {
        unknownMostDerived1AsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived1AsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived1AsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived1AsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived1AsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownMostDerived1AsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownMostDerived1AsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownMostDerived1AsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsBase()
    {
        return begin_unknownMostDerived1AsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsBase(const ::Ice::Context& __ctx)
    {
        return begin_unknownMostDerived1AsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsBase(const ::Test::Callback_TestIntf_unknownMostDerived1AsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownMostDerived1AsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsBase(&__ctx, __del, __cookie);
    }

    void end_unknownMostDerived1AsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownMostDerived1AsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownMostDerived1AsKnownIntermediate()
    {
        unknownMostDerived1AsKnownIntermediate(0);
    }
    void unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& __ctx)
    {
        unknownMostDerived1AsKnownIntermediate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsKnownIntermediate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived1AsKnownIntermediate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsKnownIntermediate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived1AsKnownIntermediate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived1AsKnownIntermediate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived1AsKnownIntermediate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownMostDerived1AsKnownIntermediate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownMostDerived1AsKnownIntermediate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsKnownIntermediate()
    {
        return begin_unknownMostDerived1AsKnownIntermediate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& __ctx)
    {
        return begin_unknownMostDerived1AsKnownIntermediate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsKnownIntermediate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsKnownIntermediate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsKnownIntermediate(const ::Test::Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsKnownIntermediate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived1AsKnownIntermediate(&__ctx, __del, __cookie);
    }

    void end_unknownMostDerived1AsKnownIntermediate(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownMostDerived1AsKnownIntermediate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownMostDerived1AsKnownIntermediate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownMostDerived2AsBase()
    {
        unknownMostDerived2AsBase(0);
    }
    void unknownMostDerived2AsBase(const ::Ice::Context& __ctx)
    {
        unknownMostDerived2AsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived2AsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived2AsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived2AsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived2AsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownMostDerived2AsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownMostDerived2AsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownMostDerived2AsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBase()
    {
        return begin_unknownMostDerived2AsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBase(const ::Ice::Context& __ctx)
    {
        return begin_unknownMostDerived2AsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBase(const ::Test::Callback_TestIntf_unknownMostDerived2AsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownMostDerived2AsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBase(&__ctx, __del, __cookie);
    }

    void end_unknownMostDerived2AsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownMostDerived2AsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownMostDerived2AsBaseCompact()
    {
        unknownMostDerived2AsBaseCompact(0);
    }
    void unknownMostDerived2AsBaseCompact(const ::Ice::Context& __ctx)
    {
        unknownMostDerived2AsBaseCompact(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBaseCompact(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived2AsBaseCompact(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBaseCompact(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived2AsBaseCompact(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBaseCompact(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownMostDerived2AsBaseCompact(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownMostDerived2AsBaseCompact(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownMostDerived2AsBaseCompact(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownMostDerived2AsBaseCompact(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownMostDerived2AsBaseCompact(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownMostDerived2AsBaseCompact(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBaseCompact()
    {
        return begin_unknownMostDerived2AsBaseCompact(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBaseCompact(const ::Ice::Context& __ctx)
    {
        return begin_unknownMostDerived2AsBaseCompact(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBaseCompact(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBaseCompact(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBaseCompact(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBaseCompact(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBaseCompact(const ::Test::Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBaseCompact(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBaseCompact(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownMostDerived2AsBaseCompact(&__ctx, __del, __cookie);
    }

    void end_unknownMostDerived2AsBaseCompact(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownMostDerived2AsBaseCompact(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownMostDerived2AsBaseCompact(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownPreservedAsBase()
    {
        knownPreservedAsBase(0);
    }
    void knownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        knownPreservedAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownPreservedAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownPreservedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownPreservedAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase()
    {
        return begin_knownPreservedAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        return begin_knownPreservedAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Test::Callback_TestIntf_knownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsBase(&__ctx, __del, __cookie);
    }

    void end_knownPreservedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void knownPreservedAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownPreservedAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void knownPreservedAsKnownPreserved()
    {
        knownPreservedAsKnownPreserved(0);
    }
    void knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        knownPreservedAsKnownPreserved(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsKnownPreserved(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsKnownPreserved(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_knownPreservedAsKnownPreserved(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_knownPreservedAsKnownPreserved(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_knownPreservedAsKnownPreserved(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_knownPreservedAsKnownPreserved(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved()
    {
        return begin_knownPreservedAsKnownPreserved(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Test::Callback_TestIntf_knownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_knownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_knownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    void end_knownPreservedAsKnownPreserved(const ::Ice::AsyncResultPtr&);
    
private:

    void knownPreservedAsKnownPreserved(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_knownPreservedAsKnownPreserved(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void relayKnownPreservedAsBase(const ::Test::RelayPrx& r)
    {
        relayKnownPreservedAsBase(r, 0);
    }
    void relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        relayKnownPreservedAsBase(r, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayKnownPreservedAsBase(r, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayKnownPreservedAsBase(r, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayKnownPreservedAsBase(r, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayKnownPreservedAsBase(r, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_relayKnownPreservedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_relayKnownPreservedAsBase(r, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r)
    {
        return begin_relayKnownPreservedAsBase(r, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        return begin_relayKnownPreservedAsBase(r, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsBase(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsBase(r, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Test::Callback_TestIntf_relayKnownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsBase(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_relayKnownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsBase(r, &__ctx, __del, __cookie);
    }

    void end_relayKnownPreservedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void relayKnownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r)
    {
        relayKnownPreservedAsKnownPreserved(r, 0);
    }
    void relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        relayKnownPreservedAsKnownPreserved(r, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayKnownPreservedAsKnownPreserved(r, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayKnownPreservedAsKnownPreserved(r, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_relayKnownPreservedAsKnownPreserved(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_relayKnownPreservedAsKnownPreserved(r, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r)
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Test::Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayKnownPreservedAsKnownPreserved(r, &__ctx, __del, __cookie);
    }

    void end_relayKnownPreservedAsKnownPreserved(const ::Ice::AsyncResultPtr&);
    
private:

    void relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownPreservedAsBase()
    {
        unknownPreservedAsBase(0);
    }
    void unknownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        unknownPreservedAsBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownPreservedAsBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownPreservedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownPreservedAsBase(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase()
    {
        return begin_unknownPreservedAsBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context& __ctx)
    {
        return begin_unknownPreservedAsBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Test::Callback_TestIntf_unknownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsBase(&__ctx, __del, __cookie);
    }

    void end_unknownPreservedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownPreservedAsBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownPreservedAsBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unknownPreservedAsKnownPreserved()
    {
        unknownPreservedAsKnownPreserved(0);
    }
    void unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        unknownPreservedAsKnownPreserved(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsKnownPreserved(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsKnownPreserved(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unknownPreservedAsKnownPreserved(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unknownPreservedAsKnownPreserved(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unknownPreservedAsKnownPreserved(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unknownPreservedAsKnownPreserved(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved()
    {
        return begin_unknownPreservedAsKnownPreserved(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx)
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Test::Callback_TestIntf_unknownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_unknownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unknownPreservedAsKnownPreserved(&__ctx, __del, __cookie);
    }

    void end_unknownPreservedAsKnownPreserved(const ::Ice::AsyncResultPtr&);
    
private:

    void unknownPreservedAsKnownPreserved(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unknownPreservedAsKnownPreserved(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void relayUnknownPreservedAsBase(const ::Test::RelayPrx& r)
    {
        relayUnknownPreservedAsBase(r, 0);
    }
    void relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        relayUnknownPreservedAsBase(r, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayUnknownPreservedAsBase(r, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayUnknownPreservedAsBase(r, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayUnknownPreservedAsBase(r, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayUnknownPreservedAsBase(r, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_relayUnknownPreservedAsBase(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_relayUnknownPreservedAsBase(r, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r)
    {
        return begin_relayUnknownPreservedAsBase(r, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        return begin_relayUnknownPreservedAsBase(r, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsBase(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsBase(r, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Test::Callback_TestIntf_relayUnknownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsBase(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_relayUnknownPreservedAsBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsBase(r, &__ctx, __del, __cookie);
    }

    void end_relayUnknownPreservedAsBase(const ::Ice::AsyncResultPtr&);
    
private:

    void relayUnknownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r)
    {
        relayUnknownPreservedAsKnownPreserved(r, 0);
    }
    void relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        relayUnknownPreservedAsKnownPreserved(r, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayUnknownPreservedAsKnownPreserved(r, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_relayUnknownPreservedAsKnownPreserved(r, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_relayUnknownPreservedAsKnownPreserved(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_relayUnknownPreservedAsKnownPreserved(r, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r)
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx)
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Test::Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx& r, const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_relayUnknownPreservedAsKnownPreserved(r, &__ctx, __del, __cookie);
    }

    void end_relayUnknownPreservedAsKnownPreserved(const ::Ice::AsyncResultPtr&);
    
private:

    void relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_TestIntf_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_TestIntf_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TestIntf> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_secure(bool __secure) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_twoway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_oneway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_batchOneway() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_datagram() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_batchDatagram() const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_compress(bool __compress) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TestIntf> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TestIntf*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class BaseClass : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Relay : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void knownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class TestIntf : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void baseAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownDerivedAsKnownDerived(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownIntermediateAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownIntermediateAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownMostDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownIntermediateAsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownMostDerivedAsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownMostDerivedAsKnownMostDerived(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownMostDerived1AsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownMostDerived1AsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownMostDerived2AsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownMostDerived2AsBaseCompact(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void relayKnownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void relayUnknownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class BaseClass : virtual public ::IceDelegate::Test::BaseClass,
                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Relay : virtual public ::IceDelegate::Test::Relay,
              virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void knownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestIntf : virtual public ::IceDelegate::Test::TestIntf,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void baseAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownDerivedAsKnownDerived(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownIntermediateAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownIntermediateAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownMostDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownIntermediateAsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownMostDerivedAsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownMostDerivedAsKnownMostDerived(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived1AsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived1AsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived2AsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived2AsBaseCompact(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayKnownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayUnknownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class BaseClass : virtual public ::IceDelegate::Test::BaseClass,
                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Relay : virtual public ::IceDelegate::Test::Relay,
              virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void knownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TestIntf : virtual public ::IceDelegate::Test::TestIntf,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void baseAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownDerivedAsKnownDerived(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownIntermediateAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownIntermediateAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownMostDerivedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownIntermediateAsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownMostDerivedAsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownMostDerivedAsKnownMostDerived(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived1AsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived1AsKnownIntermediate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived2AsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownMostDerived2AsBaseCompact(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayKnownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsBase(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayUnknownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class BaseClass : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef BaseClassPrx ProxyType;
    typedef BaseClassPtr PointerType;

    BaseClass()
    {
    }

    explicit BaseClass(const ::std::string& __ice_bc) :
        bc(__ice_bc)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__write;
    using ::Ice::Object::__read;
    #endif

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string bc;

protected:

    virtual ~BaseClass() {}

    friend class BaseClass__staticInit;

    ::Ice::SlicedDataPtr __slicedData;
};

class BaseClass__staticInit
{
public:

    ::Test::BaseClass _init;
};

static BaseClass__staticInit _BaseClass_init;

inline bool operator==(const BaseClass& l, const BaseClass& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BaseClass& l, const BaseClass& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Relay : virtual public ::Ice::Object
{
public:

    typedef RelayPrx ProxyType;
    typedef RelayPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void knownPreservedAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownPreservedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownPreservedAsKnownPreserved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownPreservedAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownPreservedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownPreservedAsKnownPreserved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Relay& l, const Relay& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Relay& l, const Relay& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TestIntf : virtual public ::Ice::Object
{
public:

    typedef TestIntfPrx ProxyType;
    typedef TestIntfPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void baseAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___baseAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownDerivedAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownDerivedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownDerivedAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownDerivedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownDerivedAsKnownDerived(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownDerivedAsKnownDerived(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownIntermediateAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownIntermediateAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownIntermediateAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownIntermediateAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownMostDerivedAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownMostDerivedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownIntermediateAsKnownIntermediate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownIntermediateAsKnownIntermediate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownMostDerivedAsKnownIntermediate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownMostDerivedAsKnownIntermediate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownMostDerivedAsKnownMostDerived(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownMostDerivedAsKnownMostDerived(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownMostDerived1AsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownMostDerived1AsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownMostDerived1AsKnownIntermediate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownMostDerived1AsKnownIntermediate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownMostDerived2AsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownMostDerived2AsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownMostDerived2AsBaseCompact(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownMostDerived2AsBaseCompact(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownPreservedAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownPreservedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void knownPreservedAsKnownPreserved(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___knownPreservedAsKnownPreserved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void relayKnownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___relayKnownPreservedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void relayKnownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___relayKnownPreservedAsKnownPreserved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownPreservedAsBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownPreservedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unknownPreservedAsKnownPreserved(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unknownPreservedAsKnownPreserved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void relayUnknownPreservedAsBase(const ::Test::RelayPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___relayUnknownPreservedAsBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void relayUnknownPreservedAsKnownPreserved(const ::Test::RelayPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___relayUnknownPreservedAsKnownPreserved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TestIntf& l, const TestIntf& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TestIntf& l, const TestIntf& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_Relay_knownPreservedAsBase : public Callback_Relay_knownPreservedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Relay_knownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Relay_knownPreservedAsBase : public Callback_Relay_knownPreservedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Relay_knownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_knownPreservedAsBasePtr
newCallback_Relay_knownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Relay_knownPreservedAsKnownPreserved : public Callback_Relay_knownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Relay_knownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_knownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Relay_knownPreservedAsKnownPreserved : public Callback_Relay_knownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Relay_knownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_knownPreservedAsKnownPreservedPtr
newCallback_Relay_knownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_knownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Relay_unknownPreservedAsBase : public Callback_Relay_unknownPreservedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Relay_unknownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Relay_unknownPreservedAsBase : public Callback_Relay_unknownPreservedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Relay_unknownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_unknownPreservedAsBasePtr
newCallback_Relay_unknownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Relay_unknownPreservedAsKnownPreserved : public Callback_Relay_unknownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Relay_unknownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Relay_unknownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Relay_unknownPreservedAsKnownPreserved : public Callback_Relay_unknownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Relay_unknownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RelayPrx __proxy = ::Test::RelayPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Relay_unknownPreservedAsKnownPreservedPtr
newCallback_Relay_unknownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Relay_unknownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_baseAsBase : public Callback_TestIntf_baseAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_baseAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_baseAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_baseAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_baseAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_baseAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_baseAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_baseAsBase : public Callback_TestIntf_baseAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_baseAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_baseAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_baseAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_baseAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_baseAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_baseAsBasePtr
newCallback_TestIntf_baseAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_baseAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownDerivedAsBase : public Callback_TestIntf_unknownDerivedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownDerivedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownDerivedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownDerivedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownDerivedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownDerivedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownDerivedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownDerivedAsBase : public Callback_TestIntf_unknownDerivedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownDerivedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownDerivedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownDerivedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownDerivedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownDerivedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownDerivedAsBasePtr
newCallback_TestIntf_unknownDerivedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownDerivedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownDerivedAsBase : public Callback_TestIntf_knownDerivedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownDerivedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownDerivedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownDerivedAsBase : public Callback_TestIntf_knownDerivedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownDerivedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownDerivedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownDerivedAsBasePtr
newCallback_TestIntf_knownDerivedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownDerivedAsKnownDerived : public Callback_TestIntf_knownDerivedAsKnownDerived_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownDerivedAsKnownDerived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownDerivedAsKnownDerived(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsKnownDerived<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsKnownDerived<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsKnownDerived<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownDerivedAsKnownDerived<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownDerivedAsKnownDerived : public Callback_TestIntf_knownDerivedAsKnownDerived_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownDerivedAsKnownDerived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownDerivedAsKnownDerived(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsKnownDerived<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsKnownDerived<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsKnownDerived<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownDerivedAsKnownDerivedPtr
newCallback_TestIntf_knownDerivedAsKnownDerived(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownDerivedAsKnownDerived<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownIntermediateAsBase : public Callback_TestIntf_unknownIntermediateAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownIntermediateAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownIntermediateAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownIntermediateAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownIntermediateAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownIntermediateAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownIntermediateAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownIntermediateAsBase : public Callback_TestIntf_unknownIntermediateAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownIntermediateAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownIntermediateAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownIntermediateAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownIntermediateAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownIntermediateAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownIntermediateAsBasePtr
newCallback_TestIntf_unknownIntermediateAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownIntermediateAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownIntermediateAsBase : public Callback_TestIntf_knownIntermediateAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownIntermediateAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownIntermediateAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownIntermediateAsBase : public Callback_TestIntf_knownIntermediateAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownIntermediateAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownIntermediateAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsBasePtr
newCallback_TestIntf_knownIntermediateAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownMostDerivedAsBase : public Callback_TestIntf_knownMostDerivedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownMostDerivedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownMostDerivedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownMostDerivedAsBase : public Callback_TestIntf_knownMostDerivedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownMostDerivedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownMostDerivedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsBasePtr
newCallback_TestIntf_knownMostDerivedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownIntermediateAsKnownIntermediate : public Callback_TestIntf_knownIntermediateAsKnownIntermediate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownIntermediateAsKnownIntermediate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownIntermediateAsKnownIntermediate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsKnownIntermediate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsKnownIntermediate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsKnownIntermediate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownIntermediateAsKnownIntermediate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownIntermediateAsKnownIntermediate : public Callback_TestIntf_knownIntermediateAsKnownIntermediate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownIntermediateAsKnownIntermediate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownIntermediateAsKnownIntermediate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsKnownIntermediate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsKnownIntermediate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsKnownIntermediate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownIntermediateAsKnownIntermediatePtr
newCallback_TestIntf_knownIntermediateAsKnownIntermediate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownIntermediateAsKnownIntermediate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownMostDerivedAsKnownIntermediate : public Callback_TestIntf_knownMostDerivedAsKnownIntermediate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownMostDerivedAsKnownIntermediate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownMostDerivedAsKnownIntermediate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownIntermediate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownIntermediate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownIntermediate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownIntermediate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownMostDerivedAsKnownIntermediate : public Callback_TestIntf_knownMostDerivedAsKnownIntermediate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownMostDerivedAsKnownIntermediate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownMostDerivedAsKnownIntermediate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownIntermediate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownIntermediate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownIntermediate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownIntermediatePtr
newCallback_TestIntf_knownMostDerivedAsKnownIntermediate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownIntermediate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownMostDerivedAsKnownMostDerived : public Callback_TestIntf_knownMostDerivedAsKnownMostDerived_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownMostDerivedAsKnownMostDerived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownMostDerivedAsKnownMostDerived(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownMostDerived<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownMostDerived<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownMostDerived<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownMostDerivedAsKnownMostDerived<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownMostDerivedAsKnownMostDerived : public Callback_TestIntf_knownMostDerivedAsKnownMostDerived_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownMostDerivedAsKnownMostDerived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownMostDerivedAsKnownMostDerived(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownMostDerived<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownMostDerived<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownMostDerived<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownMostDerivedAsKnownMostDerivedPtr
newCallback_TestIntf_knownMostDerivedAsKnownMostDerived(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownMostDerivedAsKnownMostDerived<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownMostDerived1AsBase : public Callback_TestIntf_unknownMostDerived1AsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownMostDerived1AsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived1AsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownMostDerived1AsBase : public Callback_TestIntf_unknownMostDerived1AsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownMostDerived1AsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived1AsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsBasePtr
newCallback_TestIntf_unknownMostDerived1AsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownMostDerived1AsKnownIntermediate : public Callback_TestIntf_unknownMostDerived1AsKnownIntermediate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownMostDerived1AsKnownIntermediate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived1AsKnownIntermediate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsKnownIntermediate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsKnownIntermediate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsKnownIntermediate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived1AsKnownIntermediate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownMostDerived1AsKnownIntermediate : public Callback_TestIntf_unknownMostDerived1AsKnownIntermediate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownMostDerived1AsKnownIntermediate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived1AsKnownIntermediate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsKnownIntermediate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsKnownIntermediate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsKnownIntermediate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived1AsKnownIntermediatePtr
newCallback_TestIntf_unknownMostDerived1AsKnownIntermediate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived1AsKnownIntermediate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownMostDerived2AsBase : public Callback_TestIntf_unknownMostDerived2AsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownMostDerived2AsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived2AsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownMostDerived2AsBase : public Callback_TestIntf_unknownMostDerived2AsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownMostDerived2AsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived2AsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBasePtr
newCallback_TestIntf_unknownMostDerived2AsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownMostDerived2AsBaseCompact : public Callback_TestIntf_unknownMostDerived2AsBaseCompact_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownMostDerived2AsBaseCompact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived2AsBaseCompact(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBaseCompact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBaseCompact<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBaseCompact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownMostDerived2AsBaseCompact<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownMostDerived2AsBaseCompact : public Callback_TestIntf_unknownMostDerived2AsBaseCompact_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownMostDerived2AsBaseCompact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownMostDerived2AsBaseCompact(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBaseCompact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBaseCompact<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBaseCompact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownMostDerived2AsBaseCompactPtr
newCallback_TestIntf_unknownMostDerived2AsBaseCompact(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownMostDerived2AsBaseCompact<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownPreservedAsBase : public Callback_TestIntf_knownPreservedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownPreservedAsBase : public Callback_TestIntf_knownPreservedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownPreservedAsBasePtr
newCallback_TestIntf_knownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_knownPreservedAsKnownPreserved : public Callback_TestIntf_knownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_knownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_knownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_knownPreservedAsKnownPreserved : public Callback_TestIntf_knownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_knownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_knownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_knownPreservedAsKnownPreservedPtr
newCallback_TestIntf_knownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_knownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_relayKnownPreservedAsBase : public Callback_TestIntf_relayKnownPreservedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_relayKnownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayKnownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_relayKnownPreservedAsBase : public Callback_TestIntf_relayKnownPreservedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_relayKnownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayKnownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsBasePtr
newCallback_TestIntf_relayKnownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_relayKnownPreservedAsKnownPreserved : public Callback_TestIntf_relayKnownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_relayKnownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayKnownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayKnownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_relayKnownPreservedAsKnownPreserved : public Callback_TestIntf_relayKnownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_relayKnownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayKnownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayKnownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayKnownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayKnownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownPreservedAsBase : public Callback_TestIntf_unknownPreservedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownPreservedAsBase : public Callback_TestIntf_unknownPreservedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsBasePtr
newCallback_TestIntf_unknownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_unknownPreservedAsKnownPreserved : public Callback_TestIntf_unknownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_unknownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_unknownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_unknownPreservedAsKnownPreserved : public Callback_TestIntf_unknownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_unknownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unknownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_unknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_unknownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_unknownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_relayUnknownPreservedAsBase : public Callback_TestIntf_relayUnknownPreservedAsBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_relayUnknownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayUnknownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_relayUnknownPreservedAsBase : public Callback_TestIntf_relayUnknownPreservedAsBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_relayUnknownPreservedAsBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayUnknownPreservedAsBase(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsBasePtr
newCallback_TestIntf_relayUnknownPreservedAsBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_relayUnknownPreservedAsKnownPreserved : public Callback_TestIntf_relayUnknownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_relayUnknownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayUnknownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsKnownPreserved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_relayUnknownPreservedAsKnownPreserved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_relayUnknownPreservedAsKnownPreserved : public Callback_TestIntf_relayUnknownPreservedAsKnownPreserved_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_relayUnknownPreservedAsKnownPreserved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::TestIntfPrx __proxy = ::Test::TestIntfPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_relayUnknownPreservedAsKnownPreserved(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsKnownPreserved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_relayUnknownPreservedAsKnownPreservedPtr
newCallback_TestIntf_relayUnknownPreservedAsKnownPreserved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_relayUnknownPreservedAsKnownPreserved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TestIntf_shutdown : public Callback_TestIntf_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TestIntf_shutdown : public Callback_TestIntf_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TestIntf_shutdownPtr
newCallback_TestIntf_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
