// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class Base;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Base>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Base*);

class AbstractBase;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::AbstractBase>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::AbstractBase*);

class B;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::B>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::B*);

class C;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::C>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::C*);

class A;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::A>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::A*);

class D;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::D>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::D*);

class E;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::E>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::E*);

class F;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::F>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::F*);

class I;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::I>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::I*);

class J;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::J>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::J*);

class H;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::H>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::H*);

class CompactExt;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::CompactExt>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::CompactExt*);

class Compact;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Compact>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Compact*);

class Initial;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Initial*);

class Empty;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Empty>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Empty*);

class AlsoEmpty;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::AlsoEmpty>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::AlsoEmpty*);

class UnexpectedObjectExceptionTest;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::UnexpectedObjectExceptionTest>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::UnexpectedObjectExceptionTest*);

class COneMember;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::COneMember>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::COneMember*);

class CTwoMembers;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::CTwoMembers>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::CTwoMembers*);

}

}

namespace Test
{

class Base;
bool operator==(const Base&, const Base&);
bool operator<(const Base&, const Base&);
::Ice::Object* upCast(::Test::Base*);
typedef ::IceInternal::Handle< ::Test::Base> BasePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Base> BasePrx;
void __patch(BasePtr&, const ::Ice::ObjectPtr&);

class AbstractBase;
bool operator==(const AbstractBase&, const AbstractBase&);
bool operator<(const AbstractBase&, const AbstractBase&);
::Ice::Object* upCast(::Test::AbstractBase*);
typedef ::IceInternal::Handle< ::Test::AbstractBase> AbstractBasePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::AbstractBase> AbstractBasePrx;
void __patch(AbstractBasePtr&, const ::Ice::ObjectPtr&);

class B;
bool operator==(const B&, const B&);
bool operator<(const B&, const B&);
::Ice::Object* upCast(::Test::B*);
typedef ::IceInternal::Handle< ::Test::B> BPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::B> BPrx;
void __patch(BPtr&, const ::Ice::ObjectPtr&);

class C;
bool operator==(const C&, const C&);
bool operator<(const C&, const C&);
::Ice::Object* upCast(::Test::C*);
typedef ::IceInternal::Handle< ::Test::C> CPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::C> CPrx;
void __patch(CPtr&, const ::Ice::ObjectPtr&);

class A;
bool operator==(const A&, const A&);
bool operator<(const A&, const A&);
::Ice::Object* upCast(::Test::A*);
typedef ::IceInternal::Handle< ::Test::A> APtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::A> APrx;
void __patch(APtr&, const ::Ice::ObjectPtr&);

class D;
bool operator==(const D&, const D&);
bool operator<(const D&, const D&);
::Ice::Object* upCast(::Test::D*);
typedef ::IceInternal::Handle< ::Test::D> DPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::D> DPrx;
void __patch(DPtr&, const ::Ice::ObjectPtr&);

class E;
bool operator==(const E&, const E&);
bool operator<(const E&, const E&);
::Ice::Object* upCast(::Test::E*);
typedef ::IceInternal::Handle< ::Test::E> EPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::E> EPrx;
void __patch(EPtr&, const ::Ice::ObjectPtr&);

class F;
bool operator==(const F&, const F&);
bool operator<(const F&, const F&);
::Ice::Object* upCast(::Test::F*);
typedef ::IceInternal::Handle< ::Test::F> FPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::F> FPrx;
void __patch(FPtr&, const ::Ice::ObjectPtr&);

class I;
bool operator==(const I&, const I&);
bool operator<(const I&, const I&);
::Ice::Object* upCast(::Test::I*);
typedef ::IceInternal::Handle< ::Test::I> IPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::I> IPrx;
void __patch(IPtr&, const ::Ice::ObjectPtr&);

class J;
bool operator==(const J&, const J&);
bool operator<(const J&, const J&);
::Ice::Object* upCast(::Test::J*);
typedef ::IceInternal::Handle< ::Test::J> JPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::J> JPrx;
void __patch(JPtr&, const ::Ice::ObjectPtr&);

class H;
bool operator==(const H&, const H&);
bool operator<(const H&, const H&);
::Ice::Object* upCast(::Test::H*);
typedef ::IceInternal::Handle< ::Test::H> HPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::H> HPrx;
void __patch(HPtr&, const ::Ice::ObjectPtr&);

class CompactExt;
bool operator==(const CompactExt&, const CompactExt&);
bool operator<(const CompactExt&, const CompactExt&);
::Ice::Object* upCast(::Test::CompactExt*);
typedef ::IceInternal::Handle< ::Test::CompactExt> CompactExtPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::CompactExt> CompactExtPrx;
void __patch(CompactExtPtr&, const ::Ice::ObjectPtr&);

class Compact;
bool operator==(const Compact&, const Compact&);
bool operator<(const Compact&, const Compact&);
::Ice::Object* upCast(::Test::Compact*);
typedef ::IceInternal::Handle< ::Test::Compact> CompactPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Compact> CompactPrx;
void __patch(CompactPtr&, const ::Ice::ObjectPtr&);

class Initial;
bool operator==(const Initial&, const Initial&);
bool operator<(const Initial&, const Initial&);
::Ice::Object* upCast(::Test::Initial*);
typedef ::IceInternal::Handle< ::Test::Initial> InitialPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial> InitialPrx;
void __patch(InitialPtr&, const ::Ice::ObjectPtr&);

class Empty;
bool operator==(const Empty&, const Empty&);
bool operator<(const Empty&, const Empty&);
::Ice::Object* upCast(::Test::Empty*);
typedef ::IceInternal::Handle< ::Test::Empty> EmptyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Empty> EmptyPrx;
void __patch(EmptyPtr&, const ::Ice::ObjectPtr&);

class AlsoEmpty;
bool operator==(const AlsoEmpty&, const AlsoEmpty&);
bool operator<(const AlsoEmpty&, const AlsoEmpty&);
::Ice::Object* upCast(::Test::AlsoEmpty*);
typedef ::IceInternal::Handle< ::Test::AlsoEmpty> AlsoEmptyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::AlsoEmpty> AlsoEmptyPrx;
void __patch(AlsoEmptyPtr&, const ::Ice::ObjectPtr&);

class UnexpectedObjectExceptionTest;
bool operator==(const UnexpectedObjectExceptionTest&, const UnexpectedObjectExceptionTest&);
bool operator<(const UnexpectedObjectExceptionTest&, const UnexpectedObjectExceptionTest&);
::Ice::Object* upCast(::Test::UnexpectedObjectExceptionTest*);
typedef ::IceInternal::Handle< ::Test::UnexpectedObjectExceptionTest> UnexpectedObjectExceptionTestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::UnexpectedObjectExceptionTest> UnexpectedObjectExceptionTestPrx;
void __patch(UnexpectedObjectExceptionTestPtr&, const ::Ice::ObjectPtr&);

class COneMember;
bool operator==(const COneMember&, const COneMember&);
bool operator<(const COneMember&, const COneMember&);
::Ice::Object* upCast(::Test::COneMember*);
typedef ::IceInternal::Handle< ::Test::COneMember> COneMemberPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::COneMember> COneMemberPrx;
void __patch(COneMemberPtr&, const ::Ice::ObjectPtr&);

class CTwoMembers;
bool operator==(const CTwoMembers&, const CTwoMembers&);
bool operator<(const CTwoMembers&, const CTwoMembers&);
::Ice::Object* upCast(::Test::CTwoMembers*);
typedef ::IceInternal::Handle< ::Test::CTwoMembers> CTwoMembersPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::CTwoMembers> CTwoMembersPrx;
void __patch(CTwoMembersPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

struct S
{
    ::std::string str;

    bool operator==(const S& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(str != __rhs.str)
        {
            return false;
        }
        return true;
    }

    bool operator<(const S& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(str < __rhs.str)
        {
            return true;
        }
        else if(__rhs.str < str)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const S& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const S& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const S& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const S& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Test::BasePtr> BaseSeq;

const ::Ice::Int CompactExtId = 789;

class EOneMember : public ::Ice::UserException
{
public:

    EOneMember() {}
    explicit EOneMember(const ::Test::EmptyPtr&);
    virtual ~EOneMember() throw();

    virtual ::std::string ice_name() const;
    virtual EOneMember* ice_clone() const;
    virtual void ice_throw() const;

    virtual bool __usesClasses() const;

    ::Test::EmptyPtr e;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static EOneMember __EOneMember_init;

class ETwoMembers : public ::Ice::UserException
{
public:

    ETwoMembers() {}
    ETwoMembers(const ::Test::EmptyPtr&, const ::Test::EmptyPtr&);
    virtual ~ETwoMembers() throw();

    virtual ::std::string ice_name() const;
    virtual ETwoMembers* ice_clone() const;
    virtual void ice_throw() const;

    virtual bool __usesClasses() const;

    ::Test::EmptyPtr e1;
    ::Test::EmptyPtr e2;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

struct SOneMember
{
    ::Test::EmptyPtr e;
};

struct STwoMembers
{
    ::Test::EmptyPtr e1;
    ::Test::EmptyPtr e2;
};

typedef ::std::map< ::Ice::Int, ::Test::COneMemberPtr> DOneMember;

typedef ::std::map< ::Ice::Int, ::Test::CTwoMembersPtr> DTwoMembers;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test::S, S>
{
    static void write(S* __os, const ::Test::S& v)
    {
        __os->write(v.str);
    }
};

template<class S>
struct StreamReader< ::Test::S, S>
{
    static void read(S* __is, ::Test::S& v)
    {
        __is->read(v.str);
    }
};

template<>
struct StreamableTraits< ::Test::EOneMember>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::ETwoMembers>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::SOneMember>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test::SOneMember, S>
{
    static void write(S* __os, const ::Test::SOneMember& v)
    {
        __os->write(v.e);
    }
};

template<class S>
struct StreamReader< ::Test::SOneMember, S>
{
    static void read(S* __is, ::Test::SOneMember& v)
    {
        __is->read(v.e);
    }
};

template<>
struct StreamableTraits< ::Test::STwoMembers>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Test::STwoMembers, S>
{
    static void write(S* __os, const ::Test::STwoMembers& v)
    {
        __os->write(v.e1);
        __os->write(v.e2);
    }
};

template<class S>
struct StreamReader< ::Test::STwoMembers, S>
{
    static void read(S* __is, ::Test::STwoMembers& v)
    {
        __is->read(v.e1);
        __is->read(v.e2);
    }
};

}

namespace Test
{

class Callback_AbstractBase_op_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AbstractBase_op_Base> Callback_AbstractBase_opPtr;

class Callback_A_postUnmarshalInvoked_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_A_postUnmarshalInvoked_Base> Callback_A_postUnmarshalInvokedPtr;

class Callback_C_postUnmarshalInvoked_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_C_postUnmarshalInvoked_Base> Callback_C_postUnmarshalInvokedPtr;

class Callback_D_postUnmarshalInvoked_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_D_postUnmarshalInvoked_Base> Callback_D_postUnmarshalInvokedPtr;

class Callback_E_checkValues_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_E_checkValues_Base> Callback_E_checkValuesPtr;

class Callback_F_checkValues_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_F_checkValues_Base> Callback_F_checkValuesPtr;

class Callback_Initial_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_shutdown_Base> Callback_Initial_shutdownPtr;

class Callback_Initial_getB1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getB1_Base> Callback_Initial_getB1Ptr;

class Callback_Initial_getB2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getB2_Base> Callback_Initial_getB2Ptr;

class Callback_Initial_getC_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getC_Base> Callback_Initial_getCPtr;

class Callback_Initial_getD_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getD_Base> Callback_Initial_getDPtr;

class Callback_Initial_getE_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getE_Base> Callback_Initial_getEPtr;

class Callback_Initial_getF_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getF_Base> Callback_Initial_getFPtr;

class Callback_Initial_getAll_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getAll_Base> Callback_Initial_getAllPtr;

class Callback_Initial_getI_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getI_Base> Callback_Initial_getIPtr;

class Callback_Initial_getJ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getJ_Base> Callback_Initial_getJPtr;

class Callback_Initial_getH_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getH_Base> Callback_Initial_getHPtr;

class Callback_Initial_setI_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_setI_Base> Callback_Initial_setIPtr;

class Callback_Initial_opBaseSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opBaseSeq_Base> Callback_Initial_opBaseSeqPtr;

class Callback_Initial_getCompact_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getCompact_Base> Callback_Initial_getCompactPtr;

class Callback_UnexpectedObjectExceptionTest_op_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UnexpectedObjectExceptionTest_op_Base> Callback_UnexpectedObjectExceptionTest_opPtr;

}

namespace IceProxy
{

namespace Test
{

class Base : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Base> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_secure(bool __secure) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_twoway() const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_oneway() const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_batchOneway() const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_datagram() const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_batchDatagram() const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_compress(bool __compress) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Base> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Base*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AbstractBase : virtual public ::IceProxy::Test::Base
{
public:

    void op()
    {
        op(0);
    }
    void op(const ::Ice::Context& __ctx)
    {
        op(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_op(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_op(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_op()
    {
        return begin_op(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx)
    {
        return begin_op(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Test::Callback_AbstractBase_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Test::Callback_AbstractBase_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    void end_op(const ::Ice::AsyncResultPtr&);
    
private:

    void op(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_secure(bool __secure) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_twoway() const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_oneway() const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_batchOneway() const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_datagram() const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_batchDatagram() const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_compress(bool __compress) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AbstractBase> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AbstractBase*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class A : virtual public ::IceProxy::Ice::Object
{
public:

    bool postUnmarshalInvoked()
    {
        return postUnmarshalInvoked(0);
    }
    bool postUnmarshalInvoked(const ::Ice::Context& __ctx)
    {
        return postUnmarshalInvoked(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_postUnmarshalInvoked(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_postUnmarshalInvoked(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_postUnmarshalInvoked(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_postUnmarshalInvoked(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_postUnmarshalInvoked(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::APrx __proxy = ::Test::APrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_postUnmarshalInvoked(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_postUnmarshalInvoked(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked()
    {
        return begin_postUnmarshalInvoked(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx)
    {
        return begin_postUnmarshalInvoked(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Test::Callback_A_postUnmarshalInvokedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::Test::Callback_A_postUnmarshalInvokedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(&__ctx, __del, __cookie);
    }

    bool end_postUnmarshalInvoked(const ::Ice::AsyncResultPtr&);
    
private:

    bool postUnmarshalInvoked(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<A> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_secure(bool __secure) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_twoway() const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_oneway() const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_batchOneway() const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_datagram() const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_batchDatagram() const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_compress(bool __compress) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_timeout(int __timeout) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<A> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class B : virtual public ::IceProxy::Test::A
{
public:
    
    ::IceInternal::ProxyHandle<B> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_secure(bool __secure) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_twoway() const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_oneway() const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_batchOneway() const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_datagram() const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_batchDatagram() const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_compress(bool __compress) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_timeout(int __timeout) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<B> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class C : virtual public ::IceProxy::Ice::Object
{
public:

    bool postUnmarshalInvoked()
    {
        return postUnmarshalInvoked(0);
    }
    bool postUnmarshalInvoked(const ::Ice::Context& __ctx)
    {
        return postUnmarshalInvoked(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_postUnmarshalInvoked(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_postUnmarshalInvoked(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_postUnmarshalInvoked(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_postUnmarshalInvoked(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_postUnmarshalInvoked(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::CPrx __proxy = ::Test::CPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_postUnmarshalInvoked(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_postUnmarshalInvoked(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked()
    {
        return begin_postUnmarshalInvoked(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx)
    {
        return begin_postUnmarshalInvoked(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Test::Callback_C_postUnmarshalInvokedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::Test::Callback_C_postUnmarshalInvokedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(&__ctx, __del, __cookie);
    }

    bool end_postUnmarshalInvoked(const ::Ice::AsyncResultPtr&);
    
private:

    bool postUnmarshalInvoked(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<C> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_secure(bool __secure) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_twoway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_oneway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_batchOneway() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_datagram() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_batchDatagram() const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_compress(bool __compress) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_timeout(int __timeout) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<C> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<C*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class D : virtual public ::IceProxy::Ice::Object
{
public:

    bool postUnmarshalInvoked()
    {
        return postUnmarshalInvoked(0);
    }
    bool postUnmarshalInvoked(const ::Ice::Context& __ctx)
    {
        return postUnmarshalInvoked(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_postUnmarshalInvoked(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_postUnmarshalInvoked(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_postUnmarshalInvoked(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_postUnmarshalInvoked(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_postUnmarshalInvoked(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::DPrx __proxy = ::Test::DPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_postUnmarshalInvoked(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_postUnmarshalInvoked(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked()
    {
        return begin_postUnmarshalInvoked(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx)
    {
        return begin_postUnmarshalInvoked(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Test::Callback_D_postUnmarshalInvokedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context& __ctx, const ::Test::Callback_D_postUnmarshalInvokedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_postUnmarshalInvoked(&__ctx, __del, __cookie);
    }

    bool end_postUnmarshalInvoked(const ::Ice::AsyncResultPtr&);
    
private:

    bool postUnmarshalInvoked(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_postUnmarshalInvoked(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<D> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_secure(bool __secure) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_twoway() const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_oneway() const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_batchOneway() const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_datagram() const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_batchDatagram() const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_compress(bool __compress) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_timeout(int __timeout) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<D> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<D*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class E : virtual public ::IceProxy::Ice::Object
{
public:

    bool checkValues()
    {
        return checkValues(0);
    }
    bool checkValues(const ::Ice::Context& __ctx)
    {
        return checkValues(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkValues(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkValues(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkValues(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkValues(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkValues(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::EPrx __proxy = ::Test::EPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_checkValues(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_checkValues(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkValues()
    {
        return begin_checkValues(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context& __ctx)
    {
        return begin_checkValues(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Test::Callback_E_checkValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context& __ctx, const ::Test::Callback_E_checkValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(&__ctx, __del, __cookie);
    }

    bool end_checkValues(const ::Ice::AsyncResultPtr&);
    
private:

    bool checkValues(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<E> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_secure(bool __secure) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_twoway() const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_oneway() const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_batchOneway() const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_datagram() const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_batchDatagram() const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_compress(bool __compress) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_timeout(int __timeout) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<E> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<E*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class F : virtual public ::IceProxy::Ice::Object
{
public:

    bool checkValues()
    {
        return checkValues(0);
    }
    bool checkValues(const ::Ice::Context& __ctx)
    {
        return checkValues(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkValues(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkValues(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkValues(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkValues(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkValues(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkValues(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::FPrx __proxy = ::Test::FPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_checkValues(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_checkValues(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkValues()
    {
        return begin_checkValues(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context& __ctx)
    {
        return begin_checkValues(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Test::Callback_F_checkValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context& __ctx, const ::Test::Callback_F_checkValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkValues(&__ctx, __del, __cookie);
    }

    bool end_checkValues(const ::Ice::AsyncResultPtr&);
    
private:

    bool checkValues(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkValues(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<F> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_secure(bool __secure) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_twoway() const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_oneway() const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_batchOneway() const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_datagram() const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_batchDatagram() const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_compress(bool __compress) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_timeout(int __timeout) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<F> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<F*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class I : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<I> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_secure(bool __secure) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_twoway() const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_oneway() const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_batchOneway() const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_datagram() const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_batchDatagram() const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_compress(bool __compress) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_timeout(int __timeout) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<I> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<I*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class J : virtual public ::IceProxy::Test::I
{
public:
    
    ::IceInternal::ProxyHandle<J> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_secure(bool __secure) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_twoway() const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_oneway() const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_batchOneway() const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_datagram() const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_batchDatagram() const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_compress(bool __compress) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_timeout(int __timeout) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<J> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<J*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class H : virtual public ::IceProxy::Test::I
{
public:
    
    ::IceInternal::ProxyHandle<H> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_secure(bool __secure) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_twoway() const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_oneway() const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_batchOneway() const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_datagram() const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_batchDatagram() const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_compress(bool __compress) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_timeout(int __timeout) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<H> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<H*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Compact : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Compact> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_secure(bool __secure) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_twoway() const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_oneway() const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_batchOneway() const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_datagram() const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_batchDatagram() const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_compress(bool __compress) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Compact> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Compact*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CompactExt : virtual public ::IceProxy::Test::Compact
{
public:
    
    ::IceInternal::ProxyHandle<CompactExt> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_secure(bool __secure) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_twoway() const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_oneway() const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_batchOneway() const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_datagram() const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_batchDatagram() const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_compress(bool __compress) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CompactExt> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CompactExt*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Initial : virtual public ::IceProxy::Ice::Object
{
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Initial_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::BPtr getB1()
    {
        return getB1(0);
    }
    ::Test::BPtr getB1(const ::Ice::Context& __ctx)
    {
        return getB1(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getB1(const ::IceInternal::Function<void (const ::Test::BPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getB1(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getB1(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getB1(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getB1(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::BPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getB1(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getB1(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getB1(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getB1(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::BPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::BPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::BPtr __ret;
                try
                {
                    __ret = __proxy->end_getB1(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::BPtr&)> _response;
        };
        return begin_getB1(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getB1()
    {
        return begin_getB1(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getB1(const ::Ice::Context& __ctx)
    {
        return begin_getB1(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getB1(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB1(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getB1(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB1(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getB1(const ::Test::Callback_Initial_getB1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB1(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getB1(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getB1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB1(&__ctx, __del, __cookie);
    }

    ::Test::BPtr end_getB1(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::BPtr getB1(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getB1(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::BPtr getB2()
    {
        return getB2(0);
    }
    ::Test::BPtr getB2(const ::Ice::Context& __ctx)
    {
        return getB2(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getB2(const ::IceInternal::Function<void (const ::Test::BPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getB2(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getB2(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getB2(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getB2(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::BPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getB2(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getB2(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getB2(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getB2(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::BPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::BPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::BPtr __ret;
                try
                {
                    __ret = __proxy->end_getB2(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::BPtr&)> _response;
        };
        return begin_getB2(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getB2()
    {
        return begin_getB2(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getB2(const ::Ice::Context& __ctx)
    {
        return begin_getB2(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getB2(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB2(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getB2(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB2(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getB2(const ::Test::Callback_Initial_getB2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB2(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getB2(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getB2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getB2(&__ctx, __del, __cookie);
    }

    ::Test::BPtr end_getB2(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::BPtr getB2(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getB2(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::CPtr getC()
    {
        return getC(0);
    }
    ::Test::CPtr getC(const ::Ice::Context& __ctx)
    {
        return getC(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getC(const ::IceInternal::Function<void (const ::Test::CPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getC(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getC(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getC(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getC(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::CPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getC(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getC(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getC(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getC(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::CPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::CPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::CPtr __ret;
                try
                {
                    __ret = __proxy->end_getC(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::CPtr&)> _response;
        };
        return begin_getC(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getC()
    {
        return begin_getC(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getC(const ::Ice::Context& __ctx)
    {
        return begin_getC(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getC(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getC(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getC(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getC(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getC(const ::Test::Callback_Initial_getCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getC(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getC(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getC(&__ctx, __del, __cookie);
    }

    ::Test::CPtr end_getC(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::CPtr getC(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getC(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::DPtr getD()
    {
        return getD(0);
    }
    ::Test::DPtr getD(const ::Ice::Context& __ctx)
    {
        return getD(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getD(const ::IceInternal::Function<void (const ::Test::DPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getD(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getD(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getD(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getD(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::DPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getD(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getD(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getD(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getD(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::DPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::DPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::DPtr __ret;
                try
                {
                    __ret = __proxy->end_getD(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::DPtr&)> _response;
        };
        return begin_getD(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getD()
    {
        return begin_getD(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getD(const ::Ice::Context& __ctx)
    {
        return begin_getD(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getD(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getD(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getD(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getD(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getD(const ::Test::Callback_Initial_getDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getD(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getD(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getD(&__ctx, __del, __cookie);
    }

    ::Test::DPtr end_getD(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::DPtr getD(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getD(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::EPtr getE()
    {
        return getE(0);
    }
    ::Test::EPtr getE(const ::Ice::Context& __ctx)
    {
        return getE(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getE(const ::IceInternal::Function<void (const ::Test::EPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getE(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getE(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getE(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getE(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::EPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getE(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getE(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getE(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getE(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::EPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::EPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::EPtr __ret;
                try
                {
                    __ret = __proxy->end_getE(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::EPtr&)> _response;
        };
        return begin_getE(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getE()
    {
        return begin_getE(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getE(const ::Ice::Context& __ctx)
    {
        return begin_getE(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getE(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getE(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getE(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getE(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getE(const ::Test::Callback_Initial_getEPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getE(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getE(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getEPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getE(&__ctx, __del, __cookie);
    }

    ::Test::EPtr end_getE(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::EPtr getE(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getE(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::FPtr getF()
    {
        return getF(0);
    }
    ::Test::FPtr getF(const ::Ice::Context& __ctx)
    {
        return getF(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getF(const ::IceInternal::Function<void (const ::Test::FPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getF(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getF(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getF(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getF(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::FPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getF(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getF(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getF(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getF(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::FPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::FPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::FPtr __ret;
                try
                {
                    __ret = __proxy->end_getF(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::FPtr&)> _response;
        };
        return begin_getF(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getF()
    {
        return begin_getF(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getF(const ::Ice::Context& __ctx)
    {
        return begin_getF(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getF(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getF(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getF(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getF(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getF(const ::Test::Callback_Initial_getFPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getF(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getF(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getFPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getF(&__ctx, __del, __cookie);
    }

    ::Test::FPtr end_getF(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::FPtr getF(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getF(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getAll(::Test::BPtr& b1, ::Test::BPtr& b2, ::Test::CPtr& theC, ::Test::DPtr& theD)
    {
        getAll(b1, b2, theC, theD, 0);
    }
    void getAll(::Test::BPtr& b1, ::Test::BPtr& b2, ::Test::CPtr& theC, ::Test::DPtr& theD, const ::Ice::Context& __ctx)
    {
        getAll(b1, b2, theC, theD, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAll(const ::IceInternal::Function<void (const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAll(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAll(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAll(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAll(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAll(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAll(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::BPtr b1;
                ::Test::BPtr b2;
                ::Test::CPtr theC;
                ::Test::DPtr theD;
                try
                {
                    __proxy->end_getAll(b1, b2, theC, theD, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(b1, b2, theC, theD);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&)> _response;
        };
        return begin_getAll(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAll()
    {
        return begin_getAll(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::Ice::Context& __ctx)
    {
        return begin_getAll(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAll(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::Test::Callback_Initial_getAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAll(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAll(&__ctx, __del, __cookie);
    }

    void end_getAll(::Test::BPtr& b1, ::Test::BPtr& b2, ::Test::CPtr& theC, ::Test::DPtr& theD, const ::Ice::AsyncResultPtr&);
    
private:

    void getAll(::Test::BPtr&, ::Test::BPtr&, ::Test::CPtr&, ::Test::DPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAll(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::IPtr getI()
    {
        return getI(0);
    }
    ::Test::IPtr getI(const ::Ice::Context& __ctx)
    {
        return getI(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getI(const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getI(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getI(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getI(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getI(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getI(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getI(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getI(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getI(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::IPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::IPtr __ret;
                try
                {
                    __ret = __proxy->end_getI(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::IPtr&)> _response;
        };
        return begin_getI(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getI()
    {
        return begin_getI(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getI(const ::Ice::Context& __ctx)
    {
        return begin_getI(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getI(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getI(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getI(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getI(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getI(const ::Test::Callback_Initial_getIPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getI(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getI(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getIPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getI(&__ctx, __del, __cookie);
    }

    ::Test::IPtr end_getI(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::IPtr getI(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getI(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::IPtr getJ()
    {
        return getJ(0);
    }
    ::Test::IPtr getJ(const ::Ice::Context& __ctx)
    {
        return getJ(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getJ(const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJ(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJ(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJ(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getJ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getJ(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getJ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getJ(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getJ(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::IPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::IPtr __ret;
                try
                {
                    __ret = __proxy->end_getJ(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::IPtr&)> _response;
        };
        return begin_getJ(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getJ()
    {
        return begin_getJ(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJ(const ::Ice::Context& __ctx)
    {
        return begin_getJ(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJ(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJ(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJ(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJ(const ::Test::Callback_Initial_getJPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getJ(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getJPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getJ(&__ctx, __del, __cookie);
    }

    ::Test::IPtr end_getJ(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::IPtr getJ(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getJ(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::IPtr getH()
    {
        return getH(0);
    }
    ::Test::IPtr getH(const ::Ice::Context& __ctx)
    {
        return getH(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getH(const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getH(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getH(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getH(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getH(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getH(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getH(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getH(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getH(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::IPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::IPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::IPtr __ret;
                try
                {
                    __ret = __proxy->end_getH(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::IPtr&)> _response;
        };
        return begin_getH(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getH()
    {
        return begin_getH(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getH(const ::Ice::Context& __ctx)
    {
        return begin_getH(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getH(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getH(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getH(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getH(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getH(const ::Test::Callback_Initial_getHPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getH(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getH(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getHPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getH(&__ctx, __del, __cookie);
    }

    ::Test::IPtr end_getH(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::IPtr getH(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getH(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setI(const ::Test::IPtr& theI)
    {
        setI(theI, 0);
    }
    void setI(const ::Test::IPtr& theI, const ::Ice::Context& __ctx)
    {
        setI(theI, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setI(const ::Test::IPtr& theI, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setI(theI, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setI(const ::Test::IPtr& theI, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setI(theI, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setI(const ::Test::IPtr& theI, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setI(theI, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setI(const ::Test::IPtr& theI, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setI(theI, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setI(const ::Test::IPtr& theI)
    {
        return begin_setI(theI, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setI(const ::Test::IPtr& theI, const ::Ice::Context& __ctx)
    {
        return begin_setI(theI, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setI(const ::Test::IPtr& theI, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setI(theI, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setI(const ::Test::IPtr& theI, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setI(theI, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setI(const ::Test::IPtr& theI, const ::Test::Callback_Initial_setIPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setI(theI, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setI(const ::Test::IPtr& theI, const ::Ice::Context& __ctx, const ::Test::Callback_Initial_setIPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setI(theI, &__ctx, __del, __cookie);
    }

    void end_setI(const ::Ice::AsyncResultPtr&);
    
private:

    void setI(const ::Test::IPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setI(const ::Test::IPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::BaseSeq opBaseSeq(const ::Test::BaseSeq& inSeq, ::Test::BaseSeq& outSeq)
    {
        return opBaseSeq(inSeq, outSeq, 0);
    }
    ::Test::BaseSeq opBaseSeq(const ::Test::BaseSeq& inSeq, ::Test::BaseSeq& outSeq, const ::Ice::Context& __ctx)
    {
        return opBaseSeq(inSeq, outSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::IceInternal::Function<void (const ::Test::BaseSeq&, const ::Test::BaseSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opBaseSeq(inSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opBaseSeq(inSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::BaseSeq&, const ::Test::BaseSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opBaseSeq(inSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opBaseSeq(inSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::BaseSeq&, const ::Test::BaseSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::BaseSeq&, const ::Test::BaseSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::BaseSeq outSeq;
                ::Test::BaseSeq __ret;
                try
                {
                    __ret = __proxy->end_opBaseSeq(outSeq, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, outSeq);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::BaseSeq&, const ::Test::BaseSeq&)> _response;
        };
        return begin_opBaseSeq(inSeq, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opBaseSeq(const ::Test::BaseSeq& inSeq)
    {
        return begin_opBaseSeq(inSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::Context& __ctx)
    {
        return begin_opBaseSeq(inSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opBaseSeq(inSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opBaseSeq(inSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Test::Callback_Initial_opBaseSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opBaseSeq(inSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::Context& __ctx, const ::Test::Callback_Initial_opBaseSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opBaseSeq(inSeq, &__ctx, __del, __cookie);
    }

    ::Test::BaseSeq end_opBaseSeq(::Test::BaseSeq& outSeq, const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::BaseSeq opBaseSeq(const ::Test::BaseSeq&, ::Test::BaseSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opBaseSeq(const ::Test::BaseSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::CompactPtr getCompact()
    {
        return getCompact(0);
    }
    ::Test::CompactPtr getCompact(const ::Ice::Context& __ctx)
    {
        return getCompact(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCompact(const ::IceInternal::Function<void (const ::Test::CompactPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCompact(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCompact(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCompact(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCompact(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::CompactPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCompact(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCompact(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCompact(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCompact(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::CompactPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::CompactPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
                ::Test::CompactPtr __ret;
                try
                {
                    __ret = __proxy->end_getCompact(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::CompactPtr&)> _response;
        };
        return begin_getCompact(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCompact()
    {
        return begin_getCompact(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCompact(const ::Ice::Context& __ctx)
    {
        return begin_getCompact(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCompact(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCompact(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCompact(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCompact(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCompact(const ::Test::Callback_Initial_getCompactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCompact(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCompact(const ::Ice::Context& __ctx, const ::Test::Callback_Initial_getCompactPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCompact(&__ctx, __del, __cookie);
    }

    ::Test::CompactPtr end_getCompact(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::CompactPtr getCompact(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCompact(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Initial> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_secure(bool __secure) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_twoway() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_oneway() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_batchOneway() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_datagram() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_batchDatagram() const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_compress(bool __compress) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Initial> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Initial*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Empty : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Empty> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_secure(bool __secure) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_twoway() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_oneway() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_batchOneway() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_datagram() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_batchDatagram() const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_compress(bool __compress) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Empty> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Empty*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AlsoEmpty : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_secure(bool __secure) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_twoway() const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_oneway() const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_batchOneway() const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_datagram() const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_batchDatagram() const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_compress(bool __compress) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AlsoEmpty> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AlsoEmpty*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class UnexpectedObjectExceptionTest : virtual public ::IceProxy::Ice::Object
{
public:

    ::Test::EmptyPtr op()
    {
        return op(0);
    }
    ::Test::EmptyPtr op(const ::Ice::Context& __ctx)
    {
        return op(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void (const ::Test::EmptyPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_op(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::EmptyPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_op(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_op(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::EmptyPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::EmptyPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::UnexpectedObjectExceptionTestPrx __proxy = ::Test::UnexpectedObjectExceptionTestPrx::uncheckedCast(__result->getProxy());
                ::Test::EmptyPtr __ret;
                try
                {
                    __ret = __proxy->end_op(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::EmptyPtr&)> _response;
        };
        return begin_op(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_op()
    {
        return begin_op(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx)
    {
        return begin_op(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Test::Callback_UnexpectedObjectExceptionTest_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Test::Callback_UnexpectedObjectExceptionTest_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    ::Test::EmptyPtr end_op(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::EmptyPtr op(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_secure(bool __secure) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_twoway() const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_oneway() const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_batchOneway() const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_datagram() const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_batchDatagram() const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_compress(bool __compress) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_timeout(int __timeout) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UnexpectedObjectExceptionTest> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<UnexpectedObjectExceptionTest*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class COneMember : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<COneMember> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_secure(bool __secure) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_twoway() const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_oneway() const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_batchOneway() const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_datagram() const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_batchDatagram() const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_compress(bool __compress) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_timeout(int __timeout) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<COneMember> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<COneMember*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CTwoMembers : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_secure(bool __secure) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_twoway() const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_oneway() const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_batchOneway() const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_datagram() const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_batchDatagram() const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_compress(bool __compress) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CTwoMembers> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CTwoMembers*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class Base : virtual public ::IceDelegate::Ice::Object
{
public:
};

class AbstractBase : virtual public ::IceDelegate::Test::Base
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class A : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class B : virtual public ::IceDelegate::Test::A
{
public:
};

class C : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class D : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class E : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool checkValues(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class F : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool checkValues(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class I : virtual public ::IceDelegate::Ice::Object
{
public:
};

class J : virtual public ::IceDelegate::Test::I
{
public:
};

class H : virtual public ::IceDelegate::Test::I
{
public:
};

class Compact : virtual public ::IceDelegate::Ice::Object
{
public:
};

class CompactExt : virtual public ::IceDelegate::Test::Compact
{
public:
};

class Initial : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::BPtr getB1(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::BPtr getB2(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::CPtr getC(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::DPtr getD(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::EPtr getE(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::FPtr getF(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getAll(::Test::BPtr&, ::Test::BPtr&, ::Test::CPtr&, ::Test::DPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::IPtr getI(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::IPtr getJ(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::IPtr getH(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setI(const ::Test::IPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::BaseSeq opBaseSeq(const ::Test::BaseSeq&, ::Test::BaseSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::CompactPtr getCompact(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Empty : virtual public ::IceDelegate::Ice::Object
{
public:
};

class AlsoEmpty : virtual public ::IceDelegate::Ice::Object
{
public:
};

class UnexpectedObjectExceptionTest : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Test::EmptyPtr op(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class COneMember : virtual public ::IceDelegate::Ice::Object
{
public:
};

class CTwoMembers : virtual public ::IceDelegate::Ice::Object
{
public:
};

}

}

namespace IceDelegateM
{

namespace Test
{

class Base : virtual public ::IceDelegate::Test::Base,
             virtual public ::IceDelegateM::Ice::Object
{
public:
};

class AbstractBase : virtual public ::IceDelegate::Test::AbstractBase,
                     virtual public ::IceDelegateM::Test::Base
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class A : virtual public ::IceDelegate::Test::A,
          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class B : virtual public ::IceDelegate::Test::B,
          virtual public ::IceDelegateM::Test::A
{
public:
};

class C : virtual public ::IceDelegate::Test::C,
          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class D : virtual public ::IceDelegate::Test::D,
          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class E : virtual public ::IceDelegate::Test::E,
          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool checkValues(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class F : virtual public ::IceDelegate::Test::F,
          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool checkValues(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class I : virtual public ::IceDelegate::Test::I,
          virtual public ::IceDelegateM::Ice::Object
{
public:
};

class J : virtual public ::IceDelegate::Test::J,
          virtual public ::IceDelegateM::Test::I
{
public:
};

class H : virtual public ::IceDelegate::Test::H,
          virtual public ::IceDelegateM::Test::I
{
public:
};

class Compact : virtual public ::IceDelegate::Test::Compact,
                virtual public ::IceDelegateM::Ice::Object
{
public:
};

class CompactExt : virtual public ::IceDelegate::Test::CompactExt,
                   virtual public ::IceDelegateM::Test::Compact
{
public:
};

class Initial : virtual public ::IceDelegate::Test::Initial,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::BPtr getB1(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::BPtr getB2(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::CPtr getC(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::DPtr getD(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::EPtr getE(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::FPtr getF(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getAll(::Test::BPtr&, ::Test::BPtr&, ::Test::CPtr&, ::Test::DPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IPtr getI(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IPtr getJ(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IPtr getH(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setI(const ::Test::IPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::BaseSeq opBaseSeq(const ::Test::BaseSeq&, ::Test::BaseSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::CompactPtr getCompact(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Empty : virtual public ::IceDelegate::Test::Empty,
              virtual public ::IceDelegateM::Ice::Object
{
public:
};

class AlsoEmpty : virtual public ::IceDelegate::Test::AlsoEmpty,
                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class UnexpectedObjectExceptionTest : virtual public ::IceDelegate::Test::UnexpectedObjectExceptionTest,
                                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Test::EmptyPtr op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class COneMember : virtual public ::IceDelegate::Test::COneMember,
                   virtual public ::IceDelegateM::Ice::Object
{
public:
};

class CTwoMembers : virtual public ::IceDelegate::Test::CTwoMembers,
                    virtual public ::IceDelegateM::Ice::Object
{
public:
};

}

}

namespace IceDelegateD
{

namespace Test
{

class Base : virtual public ::IceDelegate::Test::Base,
             virtual public ::IceDelegateD::Ice::Object
{
public:
};

class AbstractBase : virtual public ::IceDelegate::Test::AbstractBase,
                     virtual public ::IceDelegateD::Test::Base
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class A : virtual public ::IceDelegate::Test::A,
          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class B : virtual public ::IceDelegate::Test::B,
          virtual public ::IceDelegateD::Test::A
{
public:
};

class C : virtual public ::IceDelegate::Test::C,
          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class D : virtual public ::IceDelegate::Test::D,
          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool postUnmarshalInvoked(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class E : virtual public ::IceDelegate::Test::E,
          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool checkValues(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class F : virtual public ::IceDelegate::Test::F,
          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool checkValues(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class I : virtual public ::IceDelegate::Test::I,
          virtual public ::IceDelegateD::Ice::Object
{
public:
};

class J : virtual public ::IceDelegate::Test::J,
          virtual public ::IceDelegateD::Test::I
{
public:
};

class H : virtual public ::IceDelegate::Test::H,
          virtual public ::IceDelegateD::Test::I
{
public:
};

class Compact : virtual public ::IceDelegate::Test::Compact,
                virtual public ::IceDelegateD::Ice::Object
{
public:
};

class CompactExt : virtual public ::IceDelegate::Test::CompactExt,
                   virtual public ::IceDelegateD::Test::Compact
{
public:
};

class Initial : virtual public ::IceDelegate::Test::Initial,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::BPtr getB1(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::BPtr getB2(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::CPtr getC(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::DPtr getD(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::EPtr getE(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::FPtr getF(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getAll(::Test::BPtr&, ::Test::BPtr&, ::Test::CPtr&, ::Test::DPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IPtr getI(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IPtr getJ(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::IPtr getH(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setI(const ::Test::IPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::BaseSeq opBaseSeq(const ::Test::BaseSeq&, ::Test::BaseSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::CompactPtr getCompact(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Empty : virtual public ::IceDelegate::Test::Empty,
              virtual public ::IceDelegateD::Ice::Object
{
public:
};

class AlsoEmpty : virtual public ::IceDelegate::Test::AlsoEmpty,
                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class UnexpectedObjectExceptionTest : virtual public ::IceDelegate::Test::UnexpectedObjectExceptionTest,
                                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Test::EmptyPtr op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class COneMember : virtual public ::IceDelegate::Test::COneMember,
                   virtual public ::IceDelegateD::Ice::Object
{
public:
};

class CTwoMembers : virtual public ::IceDelegate::Test::CTwoMembers,
                    virtual public ::IceDelegateD::Ice::Object
{
public:
};

}

}

namespace Test
{

class Base : virtual public ::Ice::Object
{
public:

    typedef BasePrx ProxyType;
    typedef BasePtr PointerType;

    Base()
    {
    }

    Base(const ::Test::S& __ice_theS, const ::std::string& __ice_str) :
        theS(__ice_theS),
        str(__ice_str)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Test::S theS;

    ::std::string str;

protected:

    virtual ~Base() {}

    friend class Base__staticInit;
};

class Base__staticInit
{
public:

    ::Test::Base _init;
};

static Base__staticInit _Base_init;

inline bool operator==(const Base& l, const Base& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Base& l, const Base& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AbstractBase : public ::Test::Base
{
public:

    typedef AbstractBasePrx ProxyType;
    typedef AbstractBasePtr PointerType;

    AbstractBase()
    {
    }

    AbstractBase(const ::Test::S& __ice_theS, const ::std::string& __ice_str) :
        ::Test::Base(__ice_theS, __ice_str)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___op(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Base::__writeImpl;
    using ::Test::Base::__readImpl;
    #endif
};

inline bool operator==(const AbstractBase& l, const AbstractBase& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AbstractBase& l, const AbstractBase& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class A : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef APrx ProxyType;
    typedef APtr PointerType;

    A()
    {
    }

    A(const ::Test::BPtr& __ice_theB, const ::Test::CPtr& __ice_theC, bool __ice_preMarshalInvoked) :
        theB(__ice_theB),
        theC(__ice_theC),
        preMarshalInvoked(__ice_preMarshalInvoked)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual bool postUnmarshalInvoked(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___postUnmarshalInvoked(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Test::BPtr theB;

    ::Test::CPtr theC;

    bool preMarshalInvoked;
};

inline bool operator==(const A& l, const A& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const A& l, const A& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class B : public ::Test::A
{
public:

    typedef BPrx ProxyType;
    typedef BPtr PointerType;

    B()
    {
    }

    B(const ::Test::BPtr& __ice_theB, const ::Test::CPtr& __ice_theC, bool __ice_preMarshalInvoked, const ::Test::APtr& __ice_theA) :
        ::Test::A(__ice_theB, __ice_theC, __ice_preMarshalInvoked)
        ,
        theA(__ice_theA)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::A::__writeImpl;
    using ::Test::A::__readImpl;
    #endif

public:

    ::Test::APtr theA;
};

inline bool operator==(const B& l, const B& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const B& l, const B& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class C : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef CPrx ProxyType;
    typedef CPtr PointerType;

    C()
    {
    }

    C(const ::Test::BPtr& __ice_theB, bool __ice_preMarshalInvoked) :
        theB(__ice_theB),
        preMarshalInvoked(__ice_preMarshalInvoked)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual bool postUnmarshalInvoked(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___postUnmarshalInvoked(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Test::BPtr theB;

    bool preMarshalInvoked;
};

inline bool operator==(const C& l, const C& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const C& l, const C& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class D : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef DPrx ProxyType;
    typedef DPtr PointerType;

    D()
    {
    }

    D(const ::Test::APtr& __ice_theA, const ::Test::BPtr& __ice_theB, const ::Test::CPtr& __ice_theC, bool __ice_preMarshalInvoked) :
        theA(__ice_theA),
        theB(__ice_theB),
        theC(__ice_theC),
        preMarshalInvoked(__ice_preMarshalInvoked)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual bool postUnmarshalInvoked(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___postUnmarshalInvoked(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Test::APtr theA;

    ::Test::BPtr theB;

    ::Test::CPtr theC;

    bool preMarshalInvoked;
};

inline bool operator==(const D& l, const D& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const D& l, const D& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class E : virtual public ::Ice::Object
{
public:

    typedef EPrx ProxyType;
    typedef EPtr PointerType;

    E()
    {
    }

    E(::Ice::Int __ice_i, const ::std::string& __ice_s) :
        i(__ice_i),
        s(__ice_s)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual bool checkValues(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkValues(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    ::Ice::Int i;

    ::std::string s;
};

inline bool operator==(const E& l, const E& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const E& l, const E& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class F : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef FPrx ProxyType;
    typedef FPtr PointerType;

    F()
    {
    }

    F(const ::Test::EPtr& __ice_e1, const ::Test::EPtr& __ice_e2) :
        e1(__ice_e1),
        e2(__ice_e2)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual bool checkValues(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkValues(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    ::Test::EPtr e1;

public:

    ::Test::EPtr e2;
};

inline bool operator==(const F& l, const F& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const F& l, const F& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class I : virtual public ::Ice::Object
{
public:

    typedef IPrx ProxyType;
    typedef IPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const I& l, const I& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const I& l, const I& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class J : virtual public ::Test::I
{
public:

    typedef JPrx ProxyType;
    typedef JPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const J& l, const J& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const J& l, const J& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class H : virtual public ::Test::I
{
public:

    typedef HPrx ProxyType;
    typedef HPtr PointerType;

    H()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const H& l, const H& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const H& l, const H& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Compact : virtual public ::Ice::Object
{
public:

    typedef CompactPrx ProxyType;
    typedef CompactPtr PointerType;

    Compact()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    virtual ~Compact() {}
};

inline bool operator==(const Compact& l, const Compact& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Compact& l, const Compact& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CompactExt : public ::Test::Compact
{
public:

    typedef CompactExtPrx ProxyType;
    typedef CompactExtPtr PointerType;

    CompactExt()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Compact::__writeImpl;
    using ::Test::Compact::__readImpl;
    #endif

    virtual ~CompactExt() {}
};

inline bool operator==(const CompactExt& l, const CompactExt& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CompactExt& l, const CompactExt& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Initial : virtual public ::Ice::Object
{
public:

    typedef InitialPrx ProxyType;
    typedef InitialPtr PointerType;

    Initial()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::BPtr getB1(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getB1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::BPtr getB2(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getB2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::CPtr getC(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getC(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::DPtr getD(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getD(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::EPtr getE(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getE(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::FPtr getF(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getF(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAll(::Test::BPtr&, ::Test::BPtr&, ::Test::CPtr&, ::Test::DPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAll(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::IPtr getI(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getI(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::IPtr getJ(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getJ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::IPtr getH(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getH(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setI(const ::Test::IPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setI(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::BaseSeq opBaseSeq(const ::Test::BaseSeq&, ::Test::BaseSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opBaseSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::CompactPtr getCompact(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCompact(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Initial& l, const Initial& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Initial& l, const Initial& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Empty : virtual public ::Ice::Object
{
public:

    typedef EmptyPrx ProxyType;
    typedef EmptyPtr PointerType;

    Empty()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    virtual ~Empty() {}
};

inline bool operator==(const Empty& l, const Empty& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Empty& l, const Empty& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AlsoEmpty : virtual public ::Ice::Object
{
public:

    typedef AlsoEmptyPrx ProxyType;
    typedef AlsoEmptyPtr PointerType;

    AlsoEmpty()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    virtual ~AlsoEmpty() {}
};

inline bool operator==(const AlsoEmpty& l, const AlsoEmpty& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AlsoEmpty& l, const AlsoEmpty& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class UnexpectedObjectExceptionTest : virtual public ::Ice::Object
{
public:

    typedef UnexpectedObjectExceptionTestPrx ProxyType;
    typedef UnexpectedObjectExceptionTestPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Test::EmptyPtr op(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___op(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const UnexpectedObjectExceptionTest& l, const UnexpectedObjectExceptionTest& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UnexpectedObjectExceptionTest& l, const UnexpectedObjectExceptionTest& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class COneMember : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef COneMemberPrx ProxyType;
    typedef COneMemberPtr PointerType;

    COneMember()
    {
    }

    explicit COneMember(const ::Test::EmptyPtr& __ice_e) :
        e(__ice_e)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Test::EmptyPtr e;

protected:

    virtual ~COneMember() {}
};

inline bool operator==(const COneMember& l, const COneMember& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const COneMember& l, const COneMember& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CTwoMembers : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef CTwoMembersPrx ProxyType;
    typedef CTwoMembersPtr PointerType;

    CTwoMembers()
    {
    }

    CTwoMembers(const ::Test::EmptyPtr& __ice_e1, const ::Test::EmptyPtr& __ice_e2) :
        e1(__ice_e1),
        e2(__ice_e2)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Test::EmptyPtr e1;

    ::Test::EmptyPtr e2;

protected:

    virtual ~CTwoMembers() {}
};

inline bool operator==(const CTwoMembers& l, const CTwoMembers& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CTwoMembers& l, const CTwoMembers& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_AbstractBase_op : public Callback_AbstractBase_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AbstractBase_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AbstractBase_op<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AbstractBase_op<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AbstractBase_op<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AbstractBase_op<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AbstractBase_op : public Callback_AbstractBase_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AbstractBase_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AbstractBase_op<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AbstractBase_op<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AbstractBase_op<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AbstractBase_opPtr
newCallback_AbstractBase_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AbstractBase_op<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_A_postUnmarshalInvoked : public Callback_A_postUnmarshalInvoked_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_A_postUnmarshalInvoked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::APrx __proxy = ::Test::APrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_postUnmarshalInvoked(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_A_postUnmarshalInvokedPtr
newCallback_A_postUnmarshalInvoked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_A_postUnmarshalInvoked<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_A_postUnmarshalInvokedPtr
newCallback_A_postUnmarshalInvoked(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_A_postUnmarshalInvoked<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_A_postUnmarshalInvoked : public Callback_A_postUnmarshalInvoked_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_A_postUnmarshalInvoked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::APrx __proxy = ::Test::APrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_postUnmarshalInvoked(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_A_postUnmarshalInvokedPtr
newCallback_A_postUnmarshalInvoked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_A_postUnmarshalInvoked<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_A_postUnmarshalInvokedPtr
newCallback_A_postUnmarshalInvoked(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_A_postUnmarshalInvoked<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_C_postUnmarshalInvoked : public Callback_C_postUnmarshalInvoked_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_C_postUnmarshalInvoked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CPrx __proxy = ::Test::CPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_postUnmarshalInvoked(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_C_postUnmarshalInvokedPtr
newCallback_C_postUnmarshalInvoked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C_postUnmarshalInvoked<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_C_postUnmarshalInvokedPtr
newCallback_C_postUnmarshalInvoked(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C_postUnmarshalInvoked<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_C_postUnmarshalInvoked : public Callback_C_postUnmarshalInvoked_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_C_postUnmarshalInvoked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::CPrx __proxy = ::Test::CPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_postUnmarshalInvoked(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_C_postUnmarshalInvokedPtr
newCallback_C_postUnmarshalInvoked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C_postUnmarshalInvoked<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_C_postUnmarshalInvokedPtr
newCallback_C_postUnmarshalInvoked(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C_postUnmarshalInvoked<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_D_postUnmarshalInvoked : public Callback_D_postUnmarshalInvoked_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_D_postUnmarshalInvoked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::DPrx __proxy = ::Test::DPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_postUnmarshalInvoked(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_D_postUnmarshalInvokedPtr
newCallback_D_postUnmarshalInvoked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_D_postUnmarshalInvoked<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_D_postUnmarshalInvokedPtr
newCallback_D_postUnmarshalInvoked(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_D_postUnmarshalInvoked<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_D_postUnmarshalInvoked : public Callback_D_postUnmarshalInvoked_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_D_postUnmarshalInvoked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::DPrx __proxy = ::Test::DPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_postUnmarshalInvoked(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_D_postUnmarshalInvokedPtr
newCallback_D_postUnmarshalInvoked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_D_postUnmarshalInvoked<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_D_postUnmarshalInvokedPtr
newCallback_D_postUnmarshalInvoked(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_D_postUnmarshalInvoked<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_E_checkValues : public Callback_E_checkValues_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_E_checkValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::EPrx __proxy = ::Test::EPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkValues(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_E_checkValuesPtr
newCallback_E_checkValues(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_E_checkValues<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_E_checkValuesPtr
newCallback_E_checkValues(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_E_checkValues<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_E_checkValues : public Callback_E_checkValues_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_E_checkValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::EPrx __proxy = ::Test::EPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkValues(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_E_checkValuesPtr
newCallback_E_checkValues(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_E_checkValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_E_checkValuesPtr
newCallback_E_checkValues(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_E_checkValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_F_checkValues : public Callback_F_checkValues_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_F_checkValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::FPrx __proxy = ::Test::FPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkValues(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_F_checkValuesPtr
newCallback_F_checkValues(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_F_checkValues<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_F_checkValuesPtr
newCallback_F_checkValues(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_F_checkValues<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_F_checkValues : public Callback_F_checkValues_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_F_checkValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::FPrx __proxy = ::Test::FPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkValues(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_F_checkValuesPtr
newCallback_F_checkValues(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_F_checkValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_F_checkValuesPtr
newCallback_F_checkValues(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_F_checkValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getB1 : public Callback_Initial_getB1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::BPtr&);

    CallbackNC_Initial_getB1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BPtr __ret;
        try
        {
            __ret = __proxy->end_getB1(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getB1Ptr
newCallback_Initial_getB1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getB1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getB1Ptr
newCallback_Initial_getB1(T* instance, void (T::*cb)(const ::Test::BPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getB1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getB1 : public Callback_Initial_getB1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::BPtr&, const CT&);

    Callback_Initial_getB1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BPtr __ret;
        try
        {
            __ret = __proxy->end_getB1(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getB1Ptr
newCallback_Initial_getB1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getB1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getB1Ptr
newCallback_Initial_getB1(T* instance, void (T::*cb)(const ::Test::BPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getB1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getB2 : public Callback_Initial_getB2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::BPtr&);

    CallbackNC_Initial_getB2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BPtr __ret;
        try
        {
            __ret = __proxy->end_getB2(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getB2Ptr
newCallback_Initial_getB2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getB2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getB2Ptr
newCallback_Initial_getB2(T* instance, void (T::*cb)(const ::Test::BPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getB2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getB2 : public Callback_Initial_getB2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::BPtr&, const CT&);

    Callback_Initial_getB2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BPtr __ret;
        try
        {
            __ret = __proxy->end_getB2(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getB2Ptr
newCallback_Initial_getB2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getB2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getB2Ptr
newCallback_Initial_getB2(T* instance, void (T::*cb)(const ::Test::BPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getB2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getC : public Callback_Initial_getC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::CPtr&);

    CallbackNC_Initial_getC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::CPtr __ret;
        try
        {
            __ret = __proxy->end_getC(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getCPtr
newCallback_Initial_getC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getCPtr
newCallback_Initial_getC(T* instance, void (T::*cb)(const ::Test::CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getC<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getC : public Callback_Initial_getC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::CPtr&, const CT&);

    Callback_Initial_getC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::CPtr __ret;
        try
        {
            __ret = __proxy->end_getC(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getCPtr
newCallback_Initial_getC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getCPtr
newCallback_Initial_getC(T* instance, void (T::*cb)(const ::Test::CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getC<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getD : public Callback_Initial_getD_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::DPtr&);

    CallbackNC_Initial_getD(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::DPtr __ret;
        try
        {
            __ret = __proxy->end_getD(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getDPtr
newCallback_Initial_getD(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::DPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getD<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getDPtr
newCallback_Initial_getD(T* instance, void (T::*cb)(const ::Test::DPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getD<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getD : public Callback_Initial_getD_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::DPtr&, const CT&);

    Callback_Initial_getD(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::DPtr __ret;
        try
        {
            __ret = __proxy->end_getD(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getDPtr
newCallback_Initial_getD(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::DPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getD<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getDPtr
newCallback_Initial_getD(T* instance, void (T::*cb)(const ::Test::DPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getD<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getE : public Callback_Initial_getE_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::EPtr&);

    CallbackNC_Initial_getE(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::EPtr __ret;
        try
        {
            __ret = __proxy->end_getE(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getEPtr
newCallback_Initial_getE(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::EPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getE<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getEPtr
newCallback_Initial_getE(T* instance, void (T::*cb)(const ::Test::EPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getE<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getE : public Callback_Initial_getE_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::EPtr&, const CT&);

    Callback_Initial_getE(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::EPtr __ret;
        try
        {
            __ret = __proxy->end_getE(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getEPtr
newCallback_Initial_getE(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::EPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getE<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getEPtr
newCallback_Initial_getE(T* instance, void (T::*cb)(const ::Test::EPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getE<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getF : public Callback_Initial_getF_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::FPtr&);

    CallbackNC_Initial_getF(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::FPtr __ret;
        try
        {
            __ret = __proxy->end_getF(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getFPtr
newCallback_Initial_getF(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::FPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getF<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getFPtr
newCallback_Initial_getF(T* instance, void (T::*cb)(const ::Test::FPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getF<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getF : public Callback_Initial_getF_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::FPtr&, const CT&);

    Callback_Initial_getF(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::FPtr __ret;
        try
        {
            __ret = __proxy->end_getF(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getFPtr
newCallback_Initial_getF(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::FPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getF<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getFPtr
newCallback_Initial_getF(T* instance, void (T::*cb)(const ::Test::FPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getF<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getAll : public Callback_Initial_getAll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&);

    CallbackNC_Initial_getAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BPtr b1;
        ::Test::BPtr b2;
        ::Test::CPtr theC;
        ::Test::DPtr theD;
        try
        {
            __proxy->end_getAll(b1, b2, theC, theD, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(b1, b2, theC, theD);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getAllPtr
newCallback_Initial_getAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getAllPtr
newCallback_Initial_getAll(T* instance, void (T::*cb)(const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getAll<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getAll : public Callback_Initial_getAll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&, const CT&);

    Callback_Initial_getAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BPtr b1;
        ::Test::BPtr b2;
        ::Test::CPtr theC;
        ::Test::DPtr theD;
        try
        {
            __proxy->end_getAll(b1, b2, theC, theD, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(b1, b2, theC, theD, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getAllPtr
newCallback_Initial_getAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getAllPtr
newCallback_Initial_getAll(T* instance, void (T::*cb)(const ::Test::BPtr&, const ::Test::BPtr&, const ::Test::CPtr&, const ::Test::DPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getI : public Callback_Initial_getI_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::IPtr&);

    CallbackNC_Initial_getI(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::IPtr __ret;
        try
        {
            __ret = __proxy->end_getI(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getIPtr
newCallback_Initial_getI(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::IPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getI<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getIPtr
newCallback_Initial_getI(T* instance, void (T::*cb)(const ::Test::IPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getI<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getI : public Callback_Initial_getI_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::IPtr&, const CT&);

    Callback_Initial_getI(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::IPtr __ret;
        try
        {
            __ret = __proxy->end_getI(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getIPtr
newCallback_Initial_getI(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::IPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getI<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getIPtr
newCallback_Initial_getI(T* instance, void (T::*cb)(const ::Test::IPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getI<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getJ : public Callback_Initial_getJ_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::IPtr&);

    CallbackNC_Initial_getJ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::IPtr __ret;
        try
        {
            __ret = __proxy->end_getJ(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getJPtr
newCallback_Initial_getJ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::IPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getJ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getJPtr
newCallback_Initial_getJ(T* instance, void (T::*cb)(const ::Test::IPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getJ<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getJ : public Callback_Initial_getJ_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::IPtr&, const CT&);

    Callback_Initial_getJ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::IPtr __ret;
        try
        {
            __ret = __proxy->end_getJ(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getJPtr
newCallback_Initial_getJ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::IPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getJ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getJPtr
newCallback_Initial_getJ(T* instance, void (T::*cb)(const ::Test::IPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getJ<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getH : public Callback_Initial_getH_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::IPtr&);

    CallbackNC_Initial_getH(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::IPtr __ret;
        try
        {
            __ret = __proxy->end_getH(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getHPtr
newCallback_Initial_getH(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::IPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getH<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getHPtr
newCallback_Initial_getH(T* instance, void (T::*cb)(const ::Test::IPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getH<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getH : public Callback_Initial_getH_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::IPtr&, const CT&);

    Callback_Initial_getH(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::IPtr __ret;
        try
        {
            __ret = __proxy->end_getH(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getHPtr
newCallback_Initial_getH(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::IPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getH<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getHPtr
newCallback_Initial_getH(T* instance, void (T::*cb)(const ::Test::IPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getH<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_setI : public Callback_Initial_setI_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_setI(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Initial_setIPtr
newCallback_Initial_setI(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_setI<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_setIPtr
newCallback_Initial_setI(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_setI<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Initial_setIPtr
newCallback_Initial_setI(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_setI<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_setIPtr
newCallback_Initial_setI(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_setI<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_setI : public Callback_Initial_setI_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_setI(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Initial_setIPtr
newCallback_Initial_setI(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_setI<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_setIPtr
newCallback_Initial_setI(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_setI<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_setIPtr
newCallback_Initial_setI(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_setI<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_setIPtr
newCallback_Initial_setI(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_setI<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_opBaseSeq : public Callback_Initial_opBaseSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::BaseSeq&, const ::Test::BaseSeq&);

    CallbackNC_Initial_opBaseSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BaseSeq outSeq;
        ::Test::BaseSeq __ret;
        try
        {
            __ret = __proxy->end_opBaseSeq(outSeq, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, outSeq);
        }
    }

    Response response;
};

template<class T> Callback_Initial_opBaseSeqPtr
newCallback_Initial_opBaseSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BaseSeq&, const ::Test::BaseSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBaseSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_opBaseSeqPtr
newCallback_Initial_opBaseSeq(T* instance, void (T::*cb)(const ::Test::BaseSeq&, const ::Test::BaseSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBaseSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_opBaseSeq : public Callback_Initial_opBaseSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::BaseSeq&, const ::Test::BaseSeq&, const CT&);

    Callback_Initial_opBaseSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::BaseSeq outSeq;
        ::Test::BaseSeq __ret;
        try
        {
            __ret = __proxy->end_opBaseSeq(outSeq, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, outSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_opBaseSeqPtr
newCallback_Initial_opBaseSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::BaseSeq&, const ::Test::BaseSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBaseSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_opBaseSeqPtr
newCallback_Initial_opBaseSeq(T* instance, void (T::*cb)(const ::Test::BaseSeq&, const ::Test::BaseSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBaseSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Initial_getCompact : public Callback_Initial_getCompact_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::CompactPtr&);

    CallbackNC_Initial_getCompact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::CompactPtr __ret;
        try
        {
            __ret = __proxy->end_getCompact(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Initial_getCompactPtr
newCallback_Initial_getCompact(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CompactPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getCompact<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Initial_getCompactPtr
newCallback_Initial_getCompact(T* instance, void (T::*cb)(const ::Test::CompactPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getCompact<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Initial_getCompact : public Callback_Initial_getCompact_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::CompactPtr&, const CT&);

    Callback_Initial_getCompact(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::InitialPrx __proxy = ::Test::InitialPrx::uncheckedCast(__result->getProxy());
        ::Test::CompactPtr __ret;
        try
        {
            __ret = __proxy->end_getCompact(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Initial_getCompactPtr
newCallback_Initial_getCompact(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CompactPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getCompact<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Initial_getCompactPtr
newCallback_Initial_getCompact(T* instance, void (T::*cb)(const ::Test::CompactPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getCompact<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UnexpectedObjectExceptionTest_op : public Callback_UnexpectedObjectExceptionTest_op_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::EmptyPtr&);

    CallbackNC_UnexpectedObjectExceptionTest_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::UnexpectedObjectExceptionTestPrx __proxy = ::Test::UnexpectedObjectExceptionTestPrx::uncheckedCast(__result->getProxy());
        ::Test::EmptyPtr __ret;
        try
        {
            __ret = __proxy->end_op(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_UnexpectedObjectExceptionTest_opPtr
newCallback_UnexpectedObjectExceptionTest_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::EmptyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UnexpectedObjectExceptionTest_op<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UnexpectedObjectExceptionTest_opPtr
newCallback_UnexpectedObjectExceptionTest_op(T* instance, void (T::*cb)(const ::Test::EmptyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UnexpectedObjectExceptionTest_op<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UnexpectedObjectExceptionTest_op : public Callback_UnexpectedObjectExceptionTest_op_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::EmptyPtr&, const CT&);

    Callback_UnexpectedObjectExceptionTest_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::UnexpectedObjectExceptionTestPrx __proxy = ::Test::UnexpectedObjectExceptionTestPrx::uncheckedCast(__result->getProxy());
        ::Test::EmptyPtr __ret;
        try
        {
            __ret = __proxy->end_op(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UnexpectedObjectExceptionTest_opPtr
newCallback_UnexpectedObjectExceptionTest_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::EmptyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UnexpectedObjectExceptionTest_op<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UnexpectedObjectExceptionTest_opPtr
newCallback_UnexpectedObjectExceptionTest_op(T* instance, void (T::*cb)(const ::Test::EmptyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UnexpectedObjectExceptionTest_op<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
