// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Test__AbstractBase__op_name = "op";

const ::std::string __Test__A__postUnmarshalInvoked_name = "postUnmarshalInvoked";

const ::std::string __Test__C__postUnmarshalInvoked_name = "postUnmarshalInvoked";

const ::std::string __Test__D__postUnmarshalInvoked_name = "postUnmarshalInvoked";

const ::std::string __Test__E__checkValues_name = "checkValues";

const ::std::string __Test__F__checkValues_name = "checkValues";

const ::std::string __Test__Initial__shutdown_name = "shutdown";

const ::std::string __Test__Initial__getB1_name = "getB1";

const ::std::string __Test__Initial__getB2_name = "getB2";

const ::std::string __Test__Initial__getC_name = "getC";

const ::std::string __Test__Initial__getD_name = "getD";

const ::std::string __Test__Initial__getE_name = "getE";

const ::std::string __Test__Initial__getF_name = "getF";

const ::std::string __Test__Initial__getAll_name = "getAll";

const ::std::string __Test__Initial__getI_name = "getI";

const ::std::string __Test__Initial__getJ_name = "getJ";

const ::std::string __Test__Initial__getH_name = "getH";

const ::std::string __Test__Initial__setI_name = "setI";

const ::std::string __Test__Initial__opBaseSeq_name = "opBaseSeq";

const ::std::string __Test__Initial__getCompact_name = "getCompact";

const ::std::string __Test__UnexpectedObjectExceptionTest__op_name = "op";

}

namespace
{

const char* __Test__EOneMember_name = "Test::EOneMember";

struct __F__Test__EOneMember : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::EOneMember();
    }
};

class __F__Test__EOneMember__Init
{
public:

    __F__Test__EOneMember__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::EOneMember", new __F__Test__EOneMember);
    }

    ~__F__Test__EOneMember__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::EOneMember");
    }
};

const __F__Test__EOneMember__Init __F__Test__EOneMember__i;

}

Test::EOneMember::EOneMember(const ::Test::EmptyPtr& __ice_e) :
    ::Ice::UserException(),
    e(__ice_e)
{
}

Test::EOneMember::~EOneMember() throw()
{
}

::std::string
Test::EOneMember::ice_name() const
{
    return __Test__EOneMember_name;
}

Test::EOneMember*
Test::EOneMember::ice_clone() const
{
    return new EOneMember(*this);
}

void
Test::EOneMember::ice_throw() const
{
    throw *this;
}

bool
Test::EOneMember::__usesClasses() const
{
    return true;
}

void
Test::EOneMember::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::EOneMember", -1, true);
    __os->write(e);
    __os->endWriteSlice();
}

void
Test::EOneMember::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(e);
    __is->endReadSlice();
}

namespace
{

const char* __Test__ETwoMembers_name = "Test::ETwoMembers";

struct __F__Test__ETwoMembers : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::ETwoMembers();
    }
};

class __F__Test__ETwoMembers__Init
{
public:

    __F__Test__ETwoMembers__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::ETwoMembers", new __F__Test__ETwoMembers);
    }

    ~__F__Test__ETwoMembers__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::ETwoMembers");
    }
};

const __F__Test__ETwoMembers__Init __F__Test__ETwoMembers__i;

}

Test::ETwoMembers::ETwoMembers(const ::Test::EmptyPtr& __ice_e1, const ::Test::EmptyPtr& __ice_e2) :
    ::Ice::UserException(),
    e1(__ice_e1),
    e2(__ice_e2)
{
}

Test::ETwoMembers::~ETwoMembers() throw()
{
}

::std::string
Test::ETwoMembers::ice_name() const
{
    return __Test__ETwoMembers_name;
}

Test::ETwoMembers*
Test::ETwoMembers::ice_clone() const
{
    return new ETwoMembers(*this);
}

void
Test::ETwoMembers::ice_throw() const
{
    throw *this;
}

bool
Test::ETwoMembers::__usesClasses() const
{
    return true;
}

void
Test::ETwoMembers::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::ETwoMembers", -1, true);
    __os->write(e1);
    __os->write(e2);
    __os->endWriteSlice();
}

void
Test::ETwoMembers::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(e1);
    __is->read(e2);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Base* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Base>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Base;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Base::ice_staticId()
{
    return ::Test::Base::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Base::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Base);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Base::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Base);
}

::IceProxy::Ice::Object*
IceProxy::Test::Base::__newInstance() const
{
    return new Base;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::AbstractBase* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::AbstractBase>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::AbstractBase;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::AbstractBase::op(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__AbstractBase__op_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::AbstractBase* __del = dynamic_cast< ::IceDelegate::Test::AbstractBase*>(__delBase.get());
            __del->op(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::AbstractBase::begin_op(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__AbstractBase__op_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__AbstractBase__op_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::AbstractBase::end_op(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__AbstractBase__op_name);
}

const ::std::string&
IceProxy::Test::AbstractBase::ice_staticId()
{
    return ::Test::AbstractBase::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::AbstractBase::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::AbstractBase);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::AbstractBase::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::AbstractBase);
}

::IceProxy::Ice::Object*
IceProxy::Test::AbstractBase::__newInstance() const
{
    return new AbstractBase;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::A* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::A;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::Test::A::postUnmarshalInvoked(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__A__postUnmarshalInvoked_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__A__postUnmarshalInvoked_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::A* __del = dynamic_cast< ::IceDelegate::Test::A*>(__delBase.get());
            return __del->postUnmarshalInvoked(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::A::begin_postUnmarshalInvoked(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__A__postUnmarshalInvoked_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__A__postUnmarshalInvoked_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__A__postUnmarshalInvoked_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::A::end_postUnmarshalInvoked(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__A__postUnmarshalInvoked_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::A::ice_staticId()
{
    return ::Test::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::B* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::B::ice_staticId()
{
    return ::Test::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::C* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::C;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::Test::C::postUnmarshalInvoked(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__C__postUnmarshalInvoked_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__C__postUnmarshalInvoked_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::C* __del = dynamic_cast< ::IceDelegate::Test::C*>(__delBase.get());
            return __del->postUnmarshalInvoked(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::C::begin_postUnmarshalInvoked(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__C__postUnmarshalInvoked_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__C__postUnmarshalInvoked_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__C__postUnmarshalInvoked_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::C::end_postUnmarshalInvoked(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__C__postUnmarshalInvoked_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::D* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::D;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::Test::D::postUnmarshalInvoked(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__D__postUnmarshalInvoked_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__D__postUnmarshalInvoked_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::D* __del = dynamic_cast< ::IceDelegate::Test::D*>(__delBase.get());
            return __del->postUnmarshalInvoked(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::D::begin_postUnmarshalInvoked(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__D__postUnmarshalInvoked_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__D__postUnmarshalInvoked_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__D__postUnmarshalInvoked_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::D::end_postUnmarshalInvoked(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__D__postUnmarshalInvoked_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::D::ice_staticId()
{
    return ::Test::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::D::__newInstance() const
{
    return new D;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::E* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::E>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::E;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::Test::E::checkValues(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__E__checkValues_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__E__checkValues_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::E* __del = dynamic_cast< ::IceDelegate::Test::E*>(__delBase.get());
            return __del->checkValues(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::E::begin_checkValues(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__E__checkValues_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__E__checkValues_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__E__checkValues_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::E::end_checkValues(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__E__checkValues_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::E::ice_staticId()
{
    return ::Test::E::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::E::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::E);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::E::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::E);
}

::IceProxy::Ice::Object*
IceProxy::Test::E::__newInstance() const
{
    return new E;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::F* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::F>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::F;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::Test::F::checkValues(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__F__checkValues_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__F__checkValues_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::F* __del = dynamic_cast< ::IceDelegate::Test::F*>(__delBase.get());
            return __del->checkValues(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::F::begin_checkValues(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__F__checkValues_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__F__checkValues_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__F__checkValues_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::F::end_checkValues(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__F__checkValues_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::F::ice_staticId()
{
    return ::Test::F::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::F::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::F);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::F::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::F);
}

::IceProxy::Ice::Object*
IceProxy::Test::F::__newInstance() const
{
    return new F;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::I* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::I>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::I;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::I::ice_staticId()
{
    return ::Test::I::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::I::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::I);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::I::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::I);
}

::IceProxy::Ice::Object*
IceProxy::Test::I::__newInstance() const
{
    return new I;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::J* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::J>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::J;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::J::ice_staticId()
{
    return ::Test::J::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::J::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::J);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::J::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::J);
}

::IceProxy::Ice::Object*
IceProxy::Test::J::__newInstance() const
{
    return new J;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::H* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::H>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::H;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::H::ice_staticId()
{
    return ::Test::H::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::H::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::H);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::H::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::H);
}

::IceProxy::Ice::Object*
IceProxy::Test::H::__newInstance() const
{
    return new H;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Compact* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Compact>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Compact;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Compact::ice_staticId()
{
    return ::Test::Compact::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Compact::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Compact);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Compact::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Compact);
}

::IceProxy::Ice::Object*
IceProxy::Test::Compact::__newInstance() const
{
    return new Compact;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::CompactExt* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::CompactExt>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::CompactExt;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::CompactExt::ice_staticId()
{
    return ::Test::CompactExt::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::CompactExt::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::CompactExt);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::CompactExt::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::CompactExt);
}

::IceProxy::Ice::Object*
IceProxy::Test::CompactExt::__newInstance() const
{
    return new CompactExt;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Initial* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Initial;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::Initial::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__Initial__shutdown_name);
}

::Test::BPtr
IceProxy::Test::Initial::getB1(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getB1_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getB1_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getB1(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getB1(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getB1_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getB1_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getB1_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getB1(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getB1_name);
    ::Test::BPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::BPtr
IceProxy::Test::Initial::getB2(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getB2_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getB2_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getB2(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getB2(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getB2_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getB2_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getB2_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getB2(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getB2_name);
    ::Test::BPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::CPtr
IceProxy::Test::Initial::getC(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getC_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getC_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getC(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getC(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getC_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getC_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getC_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::CPtr
IceProxy::Test::Initial::end_getC(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getC_name);
    ::Test::CPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::DPtr
IceProxy::Test::Initial::getD(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getD(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getD(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getD_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::DPtr
IceProxy::Test::Initial::end_getD(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getD_name);
    ::Test::DPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::EPtr
IceProxy::Test::Initial::getE(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getE_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getE_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getE(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getE(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getE_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getE_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getE_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::EPtr
IceProxy::Test::Initial::end_getE(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getE_name);
    ::Test::EPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::FPtr
IceProxy::Test::Initial::getF(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getF_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getF_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getF(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getF(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getF_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getF_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getF_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::FPtr
IceProxy::Test::Initial::end_getF(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getF_name);
    ::Test::FPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Test::Initial::getAll(::Test::BPtr& b1, ::Test::BPtr& b2, ::Test::CPtr& theC, ::Test::DPtr& theD, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getAll_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getAll_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->getAll(b1, b2, theC, theD, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getAll(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getAll_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getAll_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getAll_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_getAll(::Test::BPtr& b1, ::Test::BPtr& b2, ::Test::CPtr& theC, ::Test::DPtr& theD, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getAll_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(b1);
        __is->read(b2);
        __is->read(theC);
        __is->read(theD);
        __is->readPendingObjects();
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::IPtr
IceProxy::Test::Initial::getI(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getI_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getI_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getI(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getI(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getI_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getI_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getI_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::IPtr
IceProxy::Test::Initial::end_getI(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getI_name);
    ::Test::IPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::IPtr
IceProxy::Test::Initial::getJ(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getJ_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getJ_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getJ(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getJ(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getJ_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getJ_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getJ_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::IPtr
IceProxy::Test::Initial::end_getJ(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getJ_name);
    ::Test::IPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::IPtr
IceProxy::Test::Initial::getH(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getH_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getH_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getH(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getH(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getH_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getH_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getH_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::IPtr
IceProxy::Test::Initial::end_getH(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getH_name);
    ::Test::IPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Test::Initial::setI(const ::Test::IPtr& theI, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__setI_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->setI(theI, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_setI(const ::Test::IPtr& theI, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__setI_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__setI_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(theI);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_setI(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__Initial__setI_name);
}

::Test::BaseSeq
IceProxy::Test::Initial::opBaseSeq(const ::Test::BaseSeq& inSeq, ::Test::BaseSeq& outSeq, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__opBaseSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__opBaseSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->opBaseSeq(inSeq, outSeq, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_opBaseSeq(const ::Test::BaseSeq& inSeq, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__opBaseSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__opBaseSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__opBaseSeq_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(inSeq);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::BaseSeq
IceProxy::Test::Initial::end_opBaseSeq(::Test::BaseSeq& outSeq, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__opBaseSeq_name);
    ::Test::BaseSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(outSeq);
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::CompactPtr
IceProxy::Test::Initial::getCompact(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__getCompact_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__getCompact_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->getCompact(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_getCompact(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__getCompact_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__getCompact_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__getCompact_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::CompactPtr
IceProxy::Test::Initial::end_getCompact(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__getCompact_name);
    ::Test::CompactPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Initial::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Initial);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Initial::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Initial);
}

::IceProxy::Ice::Object*
IceProxy::Test::Initial::__newInstance() const
{
    return new Initial;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Empty* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Empty>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Empty;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Empty::ice_staticId()
{
    return ::Test::Empty::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Empty::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Empty);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Empty::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Empty);
}

::IceProxy::Ice::Object*
IceProxy::Test::Empty::__newInstance() const
{
    return new Empty;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::AlsoEmpty* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::AlsoEmpty>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::AlsoEmpty;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::AlsoEmpty::ice_staticId()
{
    return ::Test::AlsoEmpty::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::AlsoEmpty::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::AlsoEmpty);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::AlsoEmpty::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::AlsoEmpty);
}

::IceProxy::Ice::Object*
IceProxy::Test::AlsoEmpty::__newInstance() const
{
    return new AlsoEmpty;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::UnexpectedObjectExceptionTest* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::UnexpectedObjectExceptionTest>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::UnexpectedObjectExceptionTest;
        v->__copyFrom(proxy);
    }
}

::Test::EmptyPtr
IceProxy::Test::UnexpectedObjectExceptionTest::op(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__UnexpectedObjectExceptionTest__op_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__UnexpectedObjectExceptionTest__op_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::UnexpectedObjectExceptionTest* __del = dynamic_cast< ::IceDelegate::Test::UnexpectedObjectExceptionTest*>(__delBase.get());
            return __del->op(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::UnexpectedObjectExceptionTest::begin_op(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__UnexpectedObjectExceptionTest__op_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__UnexpectedObjectExceptionTest__op_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__UnexpectedObjectExceptionTest__op_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::EmptyPtr
IceProxy::Test::UnexpectedObjectExceptionTest::end_op(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__UnexpectedObjectExceptionTest__op_name);
    ::Test::EmptyPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    return ::Test::UnexpectedObjectExceptionTest::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::UnexpectedObjectExceptionTest::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::UnexpectedObjectExceptionTest);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::UnexpectedObjectExceptionTest::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::UnexpectedObjectExceptionTest);
}

::IceProxy::Ice::Object*
IceProxy::Test::UnexpectedObjectExceptionTest::__newInstance() const
{
    return new UnexpectedObjectExceptionTest;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::COneMember* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::COneMember>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::COneMember;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::COneMember::ice_staticId()
{
    return ::Test::COneMember::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::COneMember::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::COneMember);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::COneMember::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::COneMember);
}

::IceProxy::Ice::Object*
IceProxy::Test::COneMember::__newInstance() const
{
    return new COneMember;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::CTwoMembers* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::CTwoMembers>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::CTwoMembers;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::CTwoMembers::ice_staticId()
{
    return ::Test::CTwoMembers::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::CTwoMembers::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::CTwoMembers);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::CTwoMembers::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::CTwoMembers);
}

::IceProxy::Ice::Object*
IceProxy::Test::CTwoMembers::__newInstance() const
{
    return new CTwoMembers;
}

void
IceDelegateM::Test::AbstractBase::op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__AbstractBase__op_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateM::Test::A::postUnmarshalInvoked(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__A__postUnmarshalInvoked_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::C::postUnmarshalInvoked(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__C__postUnmarshalInvoked_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::D::postUnmarshalInvoked(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__D__postUnmarshalInvoked_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::E::checkValues(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__E__checkValues_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::F::checkValues(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__F__checkValues_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Test::BPtr
IceDelegateM::Test::Initial::getB1(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getB1_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::BPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::BPtr
IceDelegateM::Test::Initial::getB2(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getB2_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::BPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::CPtr
IceDelegateM::Test::Initial::getC(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getC_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::CPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::DPtr
IceDelegateM::Test::Initial::getD(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getD_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::DPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::EPtr
IceDelegateM::Test::Initial::getE(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getE_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::EPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::FPtr
IceDelegateM::Test::Initial::getF(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getF_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::FPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::getAll(::Test::BPtr& b1, ::Test::BPtr& b2, ::Test::CPtr& theC, ::Test::DPtr& theD, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getAll_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(b1);
        __is->read(b2);
        __is->read(theC);
        __is->read(theD);
        __is->readPendingObjects();
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::IPtr
IceDelegateM::Test::Initial::getI(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getI_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::IPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::IPtr
IceDelegateM::Test::Initial::getJ(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getJ_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::IPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::IPtr
IceDelegateM::Test::Initial::getH(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getH_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::IPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::setI(const ::Test::IPtr& theI, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__setI_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(theI);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Test::BaseSeq
IceDelegateM::Test::Initial::opBaseSeq(const ::Test::BaseSeq& inSeq, ::Test::BaseSeq& outSeq, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__opBaseSeq_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(inSeq);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::BaseSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(outSeq);
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::CompactPtr
IceDelegateM::Test::Initial::getCompact(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__getCompact_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::CompactPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::EmptyPtr
IceDelegateM::Test::UnexpectedObjectExceptionTest::op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__UnexpectedObjectExceptionTest__op_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::EmptyPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::Test::AbstractBase::op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::AbstractBase* servant = dynamic_cast< ::Test::AbstractBase*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->op(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__AbstractBase__op_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::Test::A::postUnmarshalInvoked(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::A* servant = dynamic_cast< ::Test::A*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->postUnmarshalInvoked(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__A__postUnmarshalInvoked_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Test::C::postUnmarshalInvoked(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::C* servant = dynamic_cast< ::Test::C*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->postUnmarshalInvoked(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__C__postUnmarshalInvoked_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Test::D::postUnmarshalInvoked(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::D* servant = dynamic_cast< ::Test::D*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->postUnmarshalInvoked(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__D__postUnmarshalInvoked_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Test::E::checkValues(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::E* servant = dynamic_cast< ::Test::E*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->checkValues(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__E__checkValues_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Test::F::checkValues(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::F* servant = dynamic_cast< ::Test::F*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->checkValues(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__F__checkValues_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::Initial::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->shutdown(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__shutdown_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Test::BPtr
IceDelegateD::Test::Initial::getB1(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::BPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getB1(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::BPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getB1_name, ::Ice::Normal, __context);
    ::Test::BPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::BPtr
IceDelegateD::Test::Initial::getB2(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::BPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getB2(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::BPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getB2_name, ::Ice::Normal, __context);
    ::Test::BPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::CPtr
IceDelegateD::Test::Initial::getC(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::CPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getC(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::CPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getC_name, ::Ice::Normal, __context);
    ::Test::CPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::DPtr
IceDelegateD::Test::Initial::getD(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::DPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getD(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::DPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getD_name, ::Ice::Normal, __context);
    ::Test::DPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::EPtr
IceDelegateD::Test::Initial::getE(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::EPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getE(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::EPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getE_name, ::Ice::Normal, __context);
    ::Test::EPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::FPtr
IceDelegateD::Test::Initial::getF(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::FPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getF(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::FPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getF_name, ::Ice::Normal, __context);
    ::Test::FPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::Initial::getAll(::Test::BPtr& b1, ::Test::BPtr& b2, ::Test::CPtr& theC, ::Test::DPtr& theD, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::BPtr& __p_b1, ::Test::BPtr& __p_b2, ::Test::CPtr& __p_theC, ::Test::DPtr& __p_theD, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_b1(__p_b1),
            _m_b2(__p_b2),
            _m_theC(__p_theC),
            _m_theD(__p_theD)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->getAll(_m_b1, _m_b2, _m_theC, _m_theD, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::BPtr& _m_b1;
        ::Test::BPtr& _m_b2;
        ::Test::CPtr& _m_theC;
        ::Test::DPtr& _m_theD;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getAll_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(b1, b2, theC, theD, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Test::IPtr
IceDelegateD::Test::Initial::getI(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::IPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getI(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::IPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getI_name, ::Ice::Normal, __context);
    ::Test::IPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::IPtr
IceDelegateD::Test::Initial::getJ(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::IPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getJ(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::IPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getJ_name, ::Ice::Normal, __context);
    ::Test::IPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::IPtr
IceDelegateD::Test::Initial::getH(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::IPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getH(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::IPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getH_name, ::Ice::Normal, __context);
    ::Test::IPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::Initial::setI(const ::Test::IPtr& theI, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Test::IPtr& __p_theI, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_theI(__p_theI)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setI(_m_theI, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Test::IPtr& _m_theI;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__setI_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(theI, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Test::BaseSeq
IceDelegateD::Test::Initial::opBaseSeq(const ::Test::BaseSeq& inSeq, ::Test::BaseSeq& outSeq, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::BaseSeq& __result, const ::Test::BaseSeq& __p_inSeq, ::Test::BaseSeq& __p_outSeq, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_inSeq(__p_inSeq),
            _m_outSeq(__p_outSeq)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opBaseSeq(_m_inSeq, _m_outSeq, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::BaseSeq& _result;
        const ::Test::BaseSeq& _m_inSeq;
        ::Test::BaseSeq& _m_outSeq;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__opBaseSeq_name, ::Ice::Normal, __context);
    ::Test::BaseSeq __result;
    try
    {
        _DirectI __direct(__result, inSeq, outSeq, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::CompactPtr
IceDelegateD::Test::Initial::getCompact(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::CompactPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getCompact(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::CompactPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__getCompact_name, ::Ice::Normal, __context);
    ::Test::CompactPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::EmptyPtr
IceDelegateD::Test::UnexpectedObjectExceptionTest::op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::EmptyPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::UnexpectedObjectExceptionTest* servant = dynamic_cast< ::Test::UnexpectedObjectExceptionTest*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->op(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::EmptyPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__UnexpectedObjectExceptionTest__op_name, ::Ice::Normal, __context);
    ::Test::EmptyPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* Test::upCast(::Test::Base* p) { return p; }
::Ice::ObjectPtr
Test::Base::ice_clone() const
{
    ::Ice::Object* __p = new Base(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Base_ids[2] =
{
    "::Ice::Object",
    "::Test::Base"
};

}

bool
Test::Base::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Base_ids, __Test__Base_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Base::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Base_ids[0], &__Test__Base_ids[2]);
}

const ::std::string&
Test::Base::ice_id(const ::Ice::Current&) const
{
    return __Test__Base_ids[1];
}

const ::std::string&
Test::Base::ice_staticId()
{
    return __Test__Base_ids[1];
}

void
Test::Base::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(theS);
    __os->write(str);
    __os->endWriteSlice();
}

void
Test::Base::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(theS);
    __is->read(str);
    __is->endReadSlice();
}

namespace
{

class __F__Test__Base : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Base::ice_staticId());
        return new ::Test::Base;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Base_Ptr = new __F__Test__Base;

class __F__Test__Base__Init
{
public:

    __F__Test__Base__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Base::ice_staticId(), __F__Test__Base_Ptr);
    }

    ~__F__Test__Base__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Base::ice_staticId());
    }
};

const __F__Test__Base__Init __F__Test__Base__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Base::ice_factory()
{
    return __F__Test__Base_Ptr;
}

void 
Test::__patch(BasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::BasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Base::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::AbstractBase* p) { return p; }
::Ice::ObjectPtr
Test::AbstractBase::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__AbstractBase_ids[3] =
{
    "::Ice::Object",
    "::Test::AbstractBase",
    "::Test::Base"
};

}

bool
Test::AbstractBase::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__AbstractBase_ids, __Test__AbstractBase_ids + 3, _s);
}

::std::vector< ::std::string>
Test::AbstractBase::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__AbstractBase_ids[0], &__Test__AbstractBase_ids[3]);
}

const ::std::string&
Test::AbstractBase::ice_id(const ::Ice::Current&) const
{
    return __Test__AbstractBase_ids[1];
}

const ::std::string&
Test::AbstractBase::ice_staticId()
{
    return __Test__AbstractBase_ids[1];
}

::Ice::DispatchStatus
Test::AbstractBase::___op(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    op(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__AbstractBase_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

::Ice::DispatchStatus
Test::AbstractBase::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__AbstractBase_all, __Test__AbstractBase_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__AbstractBase_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___op(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::AbstractBase::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::Test::Base::__writeImpl(__os);
}

void
Test::AbstractBase::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Test::Base::__readImpl(__is);
}

void 
Test::__patch(AbstractBasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::AbstractBasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::AbstractBase::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::A* p) { return p; }
::Ice::ObjectPtr
Test::A::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__A_ids[2] =
{
    "::Ice::Object",
    "::Test::A"
};

}

bool
Test::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__A_ids, __Test__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__A_ids[0], &__Test__A_ids[2]);
}

const ::std::string&
Test::A::ice_id(const ::Ice::Current&) const
{
    return __Test__A_ids[1];
}

const ::std::string&
Test::A::ice_staticId()
{
    return __Test__A_ids[1];
}

void
Test::A::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::A::__usesGC()
{
    return true;
}

void
Test::A::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(theB)
    {
        ::Test::upCast(theB.get())->__addObject(_c);
    }
    if(theC)
    {
        ::Test::upCast(theC.get())->__addObject(_c);
    }
}

void
Test::A::__gcClear()
{
    if(theB)
    {
        if(::Test::upCast(theB.get())->__usesGC())
        {
            ::Test::upCast(theB.get())->__decRefUnsafe();
            theB.__clearHandleUnsafe();
        }
        else
        {
            theB = 0;
        }
    }
    if(theC)
    {
        if(::Test::upCast(theC.get())->__usesGC())
        {
            ::Test::upCast(theC.get())->__decRefUnsafe();
            theC.__clearHandleUnsafe();
        }
        else
        {
            theC = 0;
        }
    }
}

::Ice::DispatchStatus
Test::A::___postUnmarshalInvoked(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = postUnmarshalInvoked(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__A_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "postUnmarshalInvoked"
};

}

::Ice::DispatchStatus
Test::A::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__A_all, __Test__A_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__A_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___postUnmarshalInvoked(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(theB);
    __os->write(theC);
    __os->write(preMarshalInvoked);
    __os->endWriteSlice();
}

void
Test::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(theB);
    __is->read(theC);
    __is->read(preMarshalInvoked);
    __is->endReadSlice();
}

void 
Test::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::B* p) { return p; }
::Ice::ObjectPtr
Test::B::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__B_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B"
};

}

bool
Test::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__B_ids, __Test__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__B_ids[0], &__Test__B_ids[3]);
}

const ::std::string&
Test::B::ice_id(const ::Ice::Current&) const
{
    return __Test__B_ids[2];
}

const ::std::string&
Test::B::ice_staticId()
{
    return __Test__B_ids[2];
}

void
Test::B::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    ::Test::A::__gcReachable(_c);
    if(theA)
    {
        ::Test::upCast(theA.get())->__addObject(_c);
    }
}

void
Test::B::__gcClear()
{
    ::Test::A::__gcClear();
    if(theA)
    {
        if(::Test::upCast(theA.get())->__usesGC())
        {
            ::Test::upCast(theA.get())->__decRefUnsafe();
            theA.__clearHandleUnsafe();
        }
        else
        {
            theA = 0;
        }
    }
}

namespace
{
const ::std::string __Test__B_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "postUnmarshalInvoked"
};

}

::Ice::DispatchStatus
Test::B::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__B_all, __Test__B_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__B_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___postUnmarshalInvoked(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(theA);
    __os->endWriteSlice();
    ::Test::A::__writeImpl(__os);
}

void
Test::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(theA);
    __is->endReadSlice();
    ::Test::A::__readImpl(__is);
}

void 
Test::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::C* p) { return p; }
::Ice::ObjectPtr
Test::C::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__C_ids[2] =
{
    "::Ice::Object",
    "::Test::C"
};

}

bool
Test::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__C_ids, __Test__C_ids + 2, _s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__C_ids[0], &__Test__C_ids[2]);
}

const ::std::string&
Test::C::ice_id(const ::Ice::Current&) const
{
    return __Test__C_ids[1];
}

const ::std::string&
Test::C::ice_staticId()
{
    return __Test__C_ids[1];
}

void
Test::C::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::C::__usesGC()
{
    return true;
}

void
Test::C::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(theB)
    {
        ::Test::upCast(theB.get())->__addObject(_c);
    }
}

void
Test::C::__gcClear()
{
    if(theB)
    {
        if(::Test::upCast(theB.get())->__usesGC())
        {
            ::Test::upCast(theB.get())->__decRefUnsafe();
            theB.__clearHandleUnsafe();
        }
        else
        {
            theB = 0;
        }
    }
}

::Ice::DispatchStatus
Test::C::___postUnmarshalInvoked(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = postUnmarshalInvoked(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__C_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "postUnmarshalInvoked"
};

}

::Ice::DispatchStatus
Test::C::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__C_all, __Test__C_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__C_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___postUnmarshalInvoked(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(theB);
    __os->write(preMarshalInvoked);
    __os->endWriteSlice();
}

void
Test::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(theB);
    __is->read(preMarshalInvoked);
    __is->endReadSlice();
}

void 
Test::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::D* p) { return p; }
::Ice::ObjectPtr
Test::D::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__D_ids[2] =
{
    "::Ice::Object",
    "::Test::D"
};

}

bool
Test::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__D_ids, __Test__D_ids + 2, _s);
}

::std::vector< ::std::string>
Test::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__D_ids[0], &__Test__D_ids[2]);
}

const ::std::string&
Test::D::ice_id(const ::Ice::Current&) const
{
    return __Test__D_ids[1];
}

const ::std::string&
Test::D::ice_staticId()
{
    return __Test__D_ids[1];
}

void
Test::D::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::D::__usesGC()
{
    return true;
}

void
Test::D::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(theA)
    {
        ::Test::upCast(theA.get())->__addObject(_c);
    }
    if(theB)
    {
        ::Test::upCast(theB.get())->__addObject(_c);
    }
    if(theC)
    {
        ::Test::upCast(theC.get())->__addObject(_c);
    }
}

void
Test::D::__gcClear()
{
    if(theA)
    {
        if(::Test::upCast(theA.get())->__usesGC())
        {
            ::Test::upCast(theA.get())->__decRefUnsafe();
            theA.__clearHandleUnsafe();
        }
        else
        {
            theA = 0;
        }
    }
    if(theB)
    {
        if(::Test::upCast(theB.get())->__usesGC())
        {
            ::Test::upCast(theB.get())->__decRefUnsafe();
            theB.__clearHandleUnsafe();
        }
        else
        {
            theB = 0;
        }
    }
    if(theC)
    {
        if(::Test::upCast(theC.get())->__usesGC())
        {
            ::Test::upCast(theC.get())->__decRefUnsafe();
            theC.__clearHandleUnsafe();
        }
        else
        {
            theC = 0;
        }
    }
}

::Ice::DispatchStatus
Test::D::___postUnmarshalInvoked(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = postUnmarshalInvoked(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__D_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "postUnmarshalInvoked"
};

}

::Ice::DispatchStatus
Test::D::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__D_all, __Test__D_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__D_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___postUnmarshalInvoked(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(theA);
    __os->write(theB);
    __os->write(theC);
    __os->write(preMarshalInvoked);
    __os->endWriteSlice();
}

void
Test::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(theA);
    __is->read(theB);
    __is->read(theC);
    __is->read(preMarshalInvoked);
    __is->endReadSlice();
}

void 
Test::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::D::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::E* p) { return p; }
::Ice::ObjectPtr
Test::E::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__E_ids[2] =
{
    "::Ice::Object",
    "::Test::E"
};

}

bool
Test::E::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__E_ids, __Test__E_ids + 2, _s);
}

::std::vector< ::std::string>
Test::E::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__E_ids[0], &__Test__E_ids[2]);
}

const ::std::string&
Test::E::ice_id(const ::Ice::Current&) const
{
    return __Test__E_ids[1];
}

const ::std::string&
Test::E::ice_staticId()
{
    return __Test__E_ids[1];
}

::Ice::DispatchStatus
Test::E::___checkValues(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = checkValues(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__E_all[] =
{
    "checkValues",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::E::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__E_all, __Test__E_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__E_all)
    {
        case 0:
        {
            return ___checkValues(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::E::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(i);
    __os->write(s);
    __os->endWriteSlice();
}

void
Test::E::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(i);
    __is->read(s);
    __is->endReadSlice();
}

void 
Test::__patch(EPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::EPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::E::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::F* p) { return p; }
::Ice::ObjectPtr
Test::F::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__F_ids[2] =
{
    "::Ice::Object",
    "::Test::F"
};

}

bool
Test::F::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__F_ids, __Test__F_ids + 2, _s);
}

::std::vector< ::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__F_ids[0], &__Test__F_ids[2]);
}

const ::std::string&
Test::F::ice_id(const ::Ice::Current&) const
{
    return __Test__F_ids[1];
}

const ::std::string&
Test::F::ice_staticId()
{
    return __Test__F_ids[1];
}

void
Test::F::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::F::__usesGC()
{
    return true;
}

void
Test::F::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(e1)
    {
        ::Test::upCast(e1.get())->__addObject(_c);
    }
    if(e2)
    {
        ::Test::upCast(e2.get())->__addObject(_c);
    }
}

void
Test::F::__gcClear()
{
    if(e1)
    {
        if(::Test::upCast(e1.get())->__usesGC())
        {
            ::Test::upCast(e1.get())->__decRefUnsafe();
            e1.__clearHandleUnsafe();
        }
        else
        {
            e1 = 0;
        }
    }
    if(e2)
    {
        if(::Test::upCast(e2.get())->__usesGC())
        {
            ::Test::upCast(e2.get())->__decRefUnsafe();
            e2.__clearHandleUnsafe();
        }
        else
        {
            e2 = 0;
        }
    }
}

::Ice::DispatchStatus
Test::F::___checkValues(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = checkValues(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__F_all[] =
{
    "checkValues",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::F::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__F_all, __Test__F_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__F_all)
    {
        case 0:
        {
            return ___checkValues(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::F::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(e1);
    __os->write(e2);
    __os->endWriteSlice();
}

void
Test::F::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(e1);
    __is->read(e2);
    __is->endReadSlice();
}

void 
Test::__patch(FPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::FPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::F::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::I* p) { return p; }

namespace
{
const ::std::string __Test__I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};

}

bool
Test::I::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__I_ids, __Test__I_ids + 2, _s);
}

::std::vector< ::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__I_ids[0], &__Test__I_ids[2]);
}

const ::std::string&
Test::I::ice_id(const ::Ice::Current&) const
{
    return __Test__I_ids[1];
}

const ::std::string&
Test::I::ice_staticId()
{
    return __Test__I_ids[1];
}

void
Test::I::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::I::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(IPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::IPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::I::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::J* p) { return p; }

namespace
{
const ::std::string __Test__J_ids[3] =
{
    "::Ice::Object",
    "::Test::I",
    "::Test::J"
};

}

bool
Test::J::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__J_ids, __Test__J_ids + 3, _s);
}

::std::vector< ::std::string>
Test::J::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__J_ids[0], &__Test__J_ids[3]);
}

const ::std::string&
Test::J::ice_id(const ::Ice::Current&) const
{
    return __Test__J_ids[2];
}

const ::std::string&
Test::J::ice_staticId()
{
    return __Test__J_ids[2];
}

void
Test::J::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::J::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(JPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::JPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::J::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::H* p) { return p; }
::Ice::ObjectPtr
Test::H::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__H_ids[3] =
{
    "::Ice::Object",
    "::Test::H",
    "::Test::I"
};

}

bool
Test::H::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__H_ids, __Test__H_ids + 3, _s);
}

::std::vector< ::std::string>
Test::H::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__H_ids[0], &__Test__H_ids[3]);
}

const ::std::string&
Test::H::ice_id(const ::Ice::Current&) const
{
    return __Test__H_ids[1];
}

const ::std::string&
Test::H::ice_staticId()
{
    return __Test__H_ids[1];
}

void
Test::H::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::H::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(HPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::HPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::H::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::Compact* p) { return p; }
::Ice::ObjectPtr
Test::Compact::ice_clone() const
{
    ::Ice::Object* __p = new Compact(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Compact_ids[2] =
{
    "::Ice::Object",
    "::Test::Compact"
};

}

bool
Test::Compact::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Compact_ids, __Test__Compact_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Compact::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Compact_ids[0], &__Test__Compact_ids[2]);
}

const ::std::string&
Test::Compact::ice_id(const ::Ice::Current&) const
{
    return __Test__Compact_ids[1];
}

const ::std::string&
Test::Compact::ice_staticId()
{
    return __Test__Compact_ids[1];
}

void
Test::Compact::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), 1, true);
    __os->endWriteSlice();
}

void
Test::Compact::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

class __F__Test__Compact : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Compact::ice_staticId());
        return new ::Test::Compact;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Compact_Ptr = new __F__Test__Compact;

class __F__Test__Compact__Init
{
public:

    __F__Test__Compact__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Compact::ice_staticId(), __F__Test__Compact_Ptr);
        ::IceInternal::factoryTable->addTypeId(1, ::Test::Compact::ice_staticId());
    }

    ~__F__Test__Compact__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Compact::ice_staticId());
        ::IceInternal::factoryTable->removeTypeId(1);
    }
};

const __F__Test__Compact__Init __F__Test__Compact__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Compact::ice_factory()
{
    return __F__Test__Compact_Ptr;
}

void 
Test::__patch(CompactPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::CompactPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Compact::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::CompactExt* p) { return p; }
::Ice::ObjectPtr
Test::CompactExt::ice_clone() const
{
    ::Ice::Object* __p = new CompactExt(*this);
    return __p;
}

namespace
{
const ::std::string __Test__CompactExt_ids[3] =
{
    "::Ice::Object",
    "::Test::Compact",
    "::Test::CompactExt"
};

}

bool
Test::CompactExt::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__CompactExt_ids, __Test__CompactExt_ids + 3, _s);
}

::std::vector< ::std::string>
Test::CompactExt::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__CompactExt_ids[0], &__Test__CompactExt_ids[3]);
}

const ::std::string&
Test::CompactExt::ice_id(const ::Ice::Current&) const
{
    return __Test__CompactExt_ids[2];
}

const ::std::string&
Test::CompactExt::ice_staticId()
{
    return __Test__CompactExt_ids[2];
}

void
Test::CompactExt::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), 789, false);
    __os->endWriteSlice();
    ::Test::Compact::__writeImpl(__os);
}

void
Test::CompactExt::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Test::Compact::__readImpl(__is);
}

namespace
{

class __F__Test__CompactExt : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::CompactExt::ice_staticId());
        return new ::Test::CompactExt;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__CompactExt_Ptr = new __F__Test__CompactExt;

class __F__Test__CompactExt__Init
{
public:

    __F__Test__CompactExt__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::CompactExt::ice_staticId(), __F__Test__CompactExt_Ptr);
        ::IceInternal::factoryTable->addTypeId(789, ::Test::CompactExt::ice_staticId());
    }

    ~__F__Test__CompactExt__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::CompactExt::ice_staticId());
        ::IceInternal::factoryTable->removeTypeId(789);
    }
};

const __F__Test__CompactExt__Init __F__Test__CompactExt__i;

}

const ::Ice::ObjectFactoryPtr&
Test::CompactExt::ice_factory()
{
    return __F__Test__CompactExt_Ptr;
}

void 
Test::__patch(CompactExtPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::CompactExtPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::CompactExt::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::Initial* p) { return p; }
::Ice::ObjectPtr
Test::Initial::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Initial_ids, __Test__Initial_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Initial_ids[0], &__Test__Initial_ids[2]);
}

const ::std::string&
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return __Test__Initial_ids[1];
}

const ::std::string&
Test::Initial::ice_staticId()
{
    return __Test__Initial_ids[1];
}

::Ice::DispatchStatus
Test::Initial::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getB1(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::BPtr __ret = getB1(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getB2(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::BPtr __ret = getB2(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getC(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::CPtr __ret = getC(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::DPtr __ret = getD(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getE(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::EPtr __ret = getE(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getF(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::FPtr __ret = getF(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getAll(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::BPtr b1;
    ::Test::BPtr b2;
    ::Test::CPtr theC;
    ::Test::DPtr theD;
    getAll(b1, b2, theC, theD, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(b1);
    __os->write(b2);
    __os->write(theC);
    __os->write(theD);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getI(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::IPtr __ret = getI(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getJ(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::IPtr __ret = getJ(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getH(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::IPtr __ret = getH(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___setI(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::IPtr theI;
    __is->read(theI);
    __is->readPendingObjects();
    __inS.endReadParams();
    setI(theI, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___opBaseSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::BaseSeq inSeq;
    __is->read(inSeq);
    __is->readPendingObjects();
    __inS.endReadParams();
    ::Test::BaseSeq outSeq;
    ::Test::BaseSeq __ret = opBaseSeq(inSeq, outSeq, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(outSeq);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___getCompact(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::CompactPtr __ret = getCompact(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__Initial_all[] =
{
    "getAll",
    "getB1",
    "getB2",
    "getC",
    "getCompact",
    "getD",
    "getE",
    "getF",
    "getH",
    "getI",
    "getJ",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBaseSeq",
    "setI",
    "shutdown"
};

}

::Ice::DispatchStatus
Test::Initial::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__Initial_all, __Test__Initial_all + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__Initial_all)
    {
        case 0:
        {
            return ___getAll(in, current);
        }
        case 1:
        {
            return ___getB1(in, current);
        }
        case 2:
        {
            return ___getB2(in, current);
        }
        case 3:
        {
            return ___getC(in, current);
        }
        case 4:
        {
            return ___getCompact(in, current);
        }
        case 5:
        {
            return ___getD(in, current);
        }
        case 6:
        {
            return ___getE(in, current);
        }
        case 7:
        {
            return ___getF(in, current);
        }
        case 8:
        {
            return ___getH(in, current);
        }
        case 9:
        {
            return ___getI(in, current);
        }
        case 10:
        {
            return ___getJ(in, current);
        }
        case 11:
        {
            return ___ice_id(in, current);
        }
        case 12:
        {
            return ___ice_ids(in, current);
        }
        case 13:
        {
            return ___ice_isA(in, current);
        }
        case 14:
        {
            return ___ice_ping(in, current);
        }
        case 15:
        {
            return ___opBaseSeq(in, current);
        }
        case 16:
        {
            return ___setI(in, current);
        }
        case 17:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::Initial::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::Initial::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(InitialPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::InitialPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Initial::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::Empty* p) { return p; }
::Ice::ObjectPtr
Test::Empty::ice_clone() const
{
    ::Ice::Object* __p = new Empty(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Empty_ids[2] =
{
    "::Ice::Object",
    "::Test::Empty"
};

}

bool
Test::Empty::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Empty_ids, __Test__Empty_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Empty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Empty_ids[0], &__Test__Empty_ids[2]);
}

const ::std::string&
Test::Empty::ice_id(const ::Ice::Current&) const
{
    return __Test__Empty_ids[1];
}

const ::std::string&
Test::Empty::ice_staticId()
{
    return __Test__Empty_ids[1];
}

void
Test::Empty::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::Empty::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

class __F__Test__Empty : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Empty::ice_staticId());
        return new ::Test::Empty;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Empty_Ptr = new __F__Test__Empty;

class __F__Test__Empty__Init
{
public:

    __F__Test__Empty__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Empty::ice_staticId(), __F__Test__Empty_Ptr);
    }

    ~__F__Test__Empty__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Empty::ice_staticId());
    }
};

const __F__Test__Empty__Init __F__Test__Empty__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Empty::ice_factory()
{
    return __F__Test__Empty_Ptr;
}

void 
Test::__patch(EmptyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::EmptyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Empty::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::AlsoEmpty* p) { return p; }
::Ice::ObjectPtr
Test::AlsoEmpty::ice_clone() const
{
    ::Ice::Object* __p = new AlsoEmpty(*this);
    return __p;
}

namespace
{
const ::std::string __Test__AlsoEmpty_ids[2] =
{
    "::Ice::Object",
    "::Test::AlsoEmpty"
};

}

bool
Test::AlsoEmpty::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__AlsoEmpty_ids, __Test__AlsoEmpty_ids + 2, _s);
}

::std::vector< ::std::string>
Test::AlsoEmpty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__AlsoEmpty_ids[0], &__Test__AlsoEmpty_ids[2]);
}

const ::std::string&
Test::AlsoEmpty::ice_id(const ::Ice::Current&) const
{
    return __Test__AlsoEmpty_ids[1];
}

const ::std::string&
Test::AlsoEmpty::ice_staticId()
{
    return __Test__AlsoEmpty_ids[1];
}

void
Test::AlsoEmpty::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::AlsoEmpty::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

class __F__Test__AlsoEmpty : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::AlsoEmpty::ice_staticId());
        return new ::Test::AlsoEmpty;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__AlsoEmpty_Ptr = new __F__Test__AlsoEmpty;

class __F__Test__AlsoEmpty__Init
{
public:

    __F__Test__AlsoEmpty__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::AlsoEmpty::ice_staticId(), __F__Test__AlsoEmpty_Ptr);
    }

    ~__F__Test__AlsoEmpty__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::AlsoEmpty::ice_staticId());
    }
};

const __F__Test__AlsoEmpty__Init __F__Test__AlsoEmpty__i;

}

const ::Ice::ObjectFactoryPtr&
Test::AlsoEmpty::ice_factory()
{
    return __F__Test__AlsoEmpty_Ptr;
}

void 
Test::__patch(AlsoEmptyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::AlsoEmptyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::AlsoEmpty::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::UnexpectedObjectExceptionTest* p) { return p; }

namespace
{
const ::std::string __Test__UnexpectedObjectExceptionTest_ids[2] =
{
    "::Ice::Object",
    "::Test::UnexpectedObjectExceptionTest"
};

}

bool
Test::UnexpectedObjectExceptionTest::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__UnexpectedObjectExceptionTest_ids, __Test__UnexpectedObjectExceptionTest_ids + 2, _s);
}

::std::vector< ::std::string>
Test::UnexpectedObjectExceptionTest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__UnexpectedObjectExceptionTest_ids[0], &__Test__UnexpectedObjectExceptionTest_ids[2]);
}

const ::std::string&
Test::UnexpectedObjectExceptionTest::ice_id(const ::Ice::Current&) const
{
    return __Test__UnexpectedObjectExceptionTest_ids[1];
}

const ::std::string&
Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    return __Test__UnexpectedObjectExceptionTest_ids[1];
}

::Ice::DispatchStatus
Test::UnexpectedObjectExceptionTest::___op(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::EmptyPtr __ret = op(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__UnexpectedObjectExceptionTest_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

::Ice::DispatchStatus
Test::UnexpectedObjectExceptionTest::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__UnexpectedObjectExceptionTest_all, __Test__UnexpectedObjectExceptionTest_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__UnexpectedObjectExceptionTest_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___op(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::UnexpectedObjectExceptionTest::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::UnexpectedObjectExceptionTest::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(UnexpectedObjectExceptionTestPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::UnexpectedObjectExceptionTestPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::UnexpectedObjectExceptionTest::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::COneMember* p) { return p; }
::Ice::ObjectPtr
Test::COneMember::ice_clone() const
{
    ::Ice::Object* __p = new COneMember(*this);
    return __p;
}

namespace
{
const ::std::string __Test__COneMember_ids[2] =
{
    "::Ice::Object",
    "::Test::COneMember"
};

}

bool
Test::COneMember::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__COneMember_ids, __Test__COneMember_ids + 2, _s);
}

::std::vector< ::std::string>
Test::COneMember::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__COneMember_ids[0], &__Test__COneMember_ids[2]);
}

const ::std::string&
Test::COneMember::ice_id(const ::Ice::Current&) const
{
    return __Test__COneMember_ids[1];
}

const ::std::string&
Test::COneMember::ice_staticId()
{
    return __Test__COneMember_ids[1];
}

void
Test::COneMember::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::COneMember::__usesGC()
{
    return true;
}

void
Test::COneMember::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(e)
    {
        ::Test::upCast(e.get())->__addObject(_c);
    }
}

void
Test::COneMember::__gcClear()
{
    if(e)
    {
        if(::Test::upCast(e.get())->__usesGC())
        {
            ::Test::upCast(e.get())->__decRefUnsafe();
            e.__clearHandleUnsafe();
        }
        else
        {
            e = 0;
        }
    }
}

void
Test::COneMember::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(e);
    __os->endWriteSlice();
}

void
Test::COneMember::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(e);
    __is->endReadSlice();
}

namespace
{

class __F__Test__COneMember : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::COneMember::ice_staticId());
        return new ::Test::COneMember;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__COneMember_Ptr = new __F__Test__COneMember;

class __F__Test__COneMember__Init
{
public:

    __F__Test__COneMember__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::COneMember::ice_staticId(), __F__Test__COneMember_Ptr);
    }

    ~__F__Test__COneMember__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::COneMember::ice_staticId());
    }
};

const __F__Test__COneMember__Init __F__Test__COneMember__i;

}

const ::Ice::ObjectFactoryPtr&
Test::COneMember::ice_factory()
{
    return __F__Test__COneMember_Ptr;
}

void 
Test::__patch(COneMemberPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::COneMemberPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::COneMember::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::CTwoMembers* p) { return p; }
::Ice::ObjectPtr
Test::CTwoMembers::ice_clone() const
{
    ::Ice::Object* __p = new CTwoMembers(*this);
    return __p;
}

namespace
{
const ::std::string __Test__CTwoMembers_ids[2] =
{
    "::Ice::Object",
    "::Test::CTwoMembers"
};

}

bool
Test::CTwoMembers::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__CTwoMembers_ids, __Test__CTwoMembers_ids + 2, _s);
}

::std::vector< ::std::string>
Test::CTwoMembers::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__CTwoMembers_ids[0], &__Test__CTwoMembers_ids[2]);
}

const ::std::string&
Test::CTwoMembers::ice_id(const ::Ice::Current&) const
{
    return __Test__CTwoMembers_ids[1];
}

const ::std::string&
Test::CTwoMembers::ice_staticId()
{
    return __Test__CTwoMembers_ids[1];
}

void
Test::CTwoMembers::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::CTwoMembers::__usesGC()
{
    return true;
}

void
Test::CTwoMembers::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(e1)
    {
        ::Test::upCast(e1.get())->__addObject(_c);
    }
    if(e2)
    {
        ::Test::upCast(e2.get())->__addObject(_c);
    }
}

void
Test::CTwoMembers::__gcClear()
{
    if(e1)
    {
        if(::Test::upCast(e1.get())->__usesGC())
        {
            ::Test::upCast(e1.get())->__decRefUnsafe();
            e1.__clearHandleUnsafe();
        }
        else
        {
            e1 = 0;
        }
    }
    if(e2)
    {
        if(::Test::upCast(e2.get())->__usesGC())
        {
            ::Test::upCast(e2.get())->__decRefUnsafe();
            e2.__clearHandleUnsafe();
        }
        else
        {
            e2 = 0;
        }
    }
}

void
Test::CTwoMembers::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(e1);
    __os->write(e2);
    __os->endWriteSlice();
}

void
Test::CTwoMembers::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(e1);
    __is->read(e2);
    __is->endReadSlice();
}

namespace
{

class __F__Test__CTwoMembers : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::CTwoMembers::ice_staticId());
        return new ::Test::CTwoMembers;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__CTwoMembers_Ptr = new __F__Test__CTwoMembers;

class __F__Test__CTwoMembers__Init
{
public:

    __F__Test__CTwoMembers__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::CTwoMembers::ice_staticId(), __F__Test__CTwoMembers_Ptr);
    }

    ~__F__Test__CTwoMembers__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::CTwoMembers::ice_staticId());
    }
};

const __F__Test__CTwoMembers__Init __F__Test__CTwoMembers__i;

}

const ::Ice::ObjectFactoryPtr&
Test::CTwoMembers::ice_factory()
{
    return __F__Test__CTwoMembers_Ptr;
}

void 
Test::__patch(CTwoMembersPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::CTwoMembersPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::CTwoMembers::ice_staticId(), v);
    }
}
