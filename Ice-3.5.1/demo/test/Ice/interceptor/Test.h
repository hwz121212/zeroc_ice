// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef INTERCEPTOR_TEST_API
#   ifdef INTERCEPTOR_TEST_API_EXPORTS
#       define INTERCEPTOR_TEST_API ICE_DECLSPEC_EXPORT
#   else
#       define INTERCEPTOR_TEST_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class MyObject;
INTERCEPTOR_TEST_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyObject>&);
INTERCEPTOR_TEST_API ::IceProxy::Ice::Object* upCast(::IceProxy::Test::MyObject*);

}

}

namespace Test
{

class MyObject;
bool operator==(const MyObject&, const MyObject&);
bool operator<(const MyObject&, const MyObject&);
INTERCEPTOR_TEST_API ::Ice::Object* upCast(::Test::MyObject*);
typedef ::IceInternal::Handle< ::Test::MyObject> MyObjectPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyObject> MyObjectPrx;
INTERCEPTOR_TEST_API void __patch(MyObjectPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class INTERCEPTOR_TEST_API InvalidInputException : public ::Ice::UserException
{
public:

    InvalidInputException() {}
    explicit InvalidInputException(const ::std::string&);
    virtual ~InvalidInputException() throw();

    virtual ::std::string ice_name() const;
    virtual InvalidInputException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string message;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static InvalidInputException __InvalidInputException_init;

class INTERCEPTOR_TEST_API RetryException : public ::Ice::LocalException
{
public:

    RetryException(const char*, int);
    virtual ~RetryException() throw();

    virtual ::std::string ice_name() const;
    virtual void ice_print(::std::ostream&) const;
    virtual RetryException* ice_clone() const;
    virtual void ice_throw() const;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::InvalidInputException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test
{

class INTERCEPTOR_TEST_API AMD_MyObject_amdAdd : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdAdd> AMD_MyObject_amdAddPtr;

class INTERCEPTOR_TEST_API AMD_MyObject_amdAddWithRetry : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdAddWithRetry> AMD_MyObject_amdAddWithRetryPtr;

class INTERCEPTOR_TEST_API AMD_MyObject_amdBadAdd : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdBadAdd> AMD_MyObject_amdBadAddPtr;

class INTERCEPTOR_TEST_API AMD_MyObject_amdNotExistAdd : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdNotExistAdd> AMD_MyObject_amdNotExistAddPtr;

class INTERCEPTOR_TEST_API AMD_MyObject_amdBadSystemAdd : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdBadSystemAdd> AMD_MyObject_amdBadSystemAddPtr;

}

namespace IceAsync
{

namespace Test
{

class INTERCEPTOR_TEST_API AMD_MyObject_amdAdd : public ::Test::AMD_MyObject_amdAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

class INTERCEPTOR_TEST_API AMD_MyObject_amdAddWithRetry : public ::Test::AMD_MyObject_amdAddWithRetry, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdAddWithRetry(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

class INTERCEPTOR_TEST_API AMD_MyObject_amdBadAdd : public ::Test::AMD_MyObject_amdBadAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdBadAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class INTERCEPTOR_TEST_API AMD_MyObject_amdNotExistAdd : public ::Test::AMD_MyObject_amdNotExistAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdNotExistAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

class INTERCEPTOR_TEST_API AMD_MyObject_amdBadSystemAdd : public ::Test::AMD_MyObject_amdBadSystemAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdBadSystemAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

}

}

namespace Test
{

class Callback_MyObject_add_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_add_Base> Callback_MyObject_addPtr;

class Callback_MyObject_addWithRetry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_addWithRetry_Base> Callback_MyObject_addWithRetryPtr;

class Callback_MyObject_badAdd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_badAdd_Base> Callback_MyObject_badAddPtr;

class Callback_MyObject_notExistAdd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_notExistAdd_Base> Callback_MyObject_notExistAddPtr;

class Callback_MyObject_badSystemAdd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_badSystemAdd_Base> Callback_MyObject_badSystemAddPtr;

class Callback_MyObject_amdAdd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdAdd_Base> Callback_MyObject_amdAddPtr;

class Callback_MyObject_amdAddWithRetry_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdAddWithRetry_Base> Callback_MyObject_amdAddWithRetryPtr;

class Callback_MyObject_amdBadAdd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdBadAdd_Base> Callback_MyObject_amdBadAddPtr;

class Callback_MyObject_amdNotExistAdd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdNotExistAdd_Base> Callback_MyObject_amdNotExistAddPtr;

class Callback_MyObject_amdBadSystemAdd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdBadSystemAdd_Base> Callback_MyObject_amdBadSystemAddPtr;

}

namespace IceProxy
{

namespace Test
{

class MyObject : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int add(::Ice::Int x, ::Ice::Int y)
    {
        return add(x, y, 0);
    }
    ::Ice::Int add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return add(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_add(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_add(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_add(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_add(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_add(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_add(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_add(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_add(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y)
    {
        return begin_add(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_add(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_addPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_addPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_add(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int add(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_add(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int addWithRetry(::Ice::Int x, ::Ice::Int y)
    {
        return addWithRetry(x, y, 0);
    }
    ::Ice::Int addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return addWithRetry(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addWithRetry(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWithRetry(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addWithRetry(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWithRetry(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_addWithRetry(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_addWithRetry(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y)
    {
        return begin_addWithRetry(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_addWithRetry(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWithRetry(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWithRetry(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_addWithRetryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWithRetry(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_addWithRetryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWithRetry(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_addWithRetry(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int addWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int badAdd(::Ice::Int x, ::Ice::Int y)
    {
        return badAdd(x, y, 0);
    }
    ::Ice::Int badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return badAdd(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_badAdd(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_badAdd(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_badAdd(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_badAdd(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_badAdd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_badAdd(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y)
    {
        return begin_badAdd(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_badAdd(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badAdd(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_badAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_badAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badAdd(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_badAdd(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int badAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int notExistAdd(::Ice::Int x, ::Ice::Int y)
    {
        return notExistAdd(x, y, 0);
    }
    ::Ice::Int notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return notExistAdd(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_notExistAdd(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notExistAdd(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_notExistAdd(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notExistAdd(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_notExistAdd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_notExistAdd(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y)
    {
        return begin_notExistAdd(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_notExistAdd(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notExistAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notExistAdd(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_notExistAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notExistAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_notExistAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notExistAdd(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_notExistAdd(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int notExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int badSystemAdd(::Ice::Int x, ::Ice::Int y)
    {
        return badSystemAdd(x, y, 0);
    }
    ::Ice::Int badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return badSystemAdd(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_badSystemAdd(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_badSystemAdd(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_badSystemAdd(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_badSystemAdd(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_badSystemAdd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_badSystemAdd(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y)
    {
        return begin_badSystemAdd(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_badSystemAdd(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badSystemAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badSystemAdd(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_badSystemAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badSystemAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_badSystemAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_badSystemAdd(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_badSystemAdd(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int badSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int amdAdd(::Ice::Int x, ::Ice::Int y)
    {
        return amdAdd(x, y, 0);
    }
    ::Ice::Int amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return amdAdd(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdAdd(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdAdd(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdAdd(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdAdd(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_amdAdd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_amdAdd(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y)
    {
        return begin_amdAdd(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_amdAdd(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAdd(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_amdAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAdd(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_amdAdd(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int amdAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int amdAddWithRetry(::Ice::Int x, ::Ice::Int y)
    {
        return amdAddWithRetry(x, y, 0);
    }
    ::Ice::Int amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return amdAddWithRetry(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdAddWithRetry(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdAddWithRetry(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdAddWithRetry(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdAddWithRetry(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_amdAddWithRetry(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_amdAddWithRetry(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y)
    {
        return begin_amdAddWithRetry(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_amdAddWithRetry(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAddWithRetry(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAddWithRetry(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdAddWithRetryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAddWithRetry(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_amdAddWithRetryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdAddWithRetry(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_amdAddWithRetry(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int amdAddWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int amdBadAdd(::Ice::Int x, ::Ice::Int y)
    {
        return amdBadAdd(x, y, 0);
    }
    ::Ice::Int amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return amdBadAdd(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdBadAdd(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdBadAdd(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdBadAdd(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdBadAdd(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_amdBadAdd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_amdBadAdd(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y)
    {
        return begin_amdBadAdd(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_amdBadAdd(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadAdd(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdBadAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_amdBadAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadAdd(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_amdBadAdd(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int amdBadAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int amdNotExistAdd(::Ice::Int x, ::Ice::Int y)
    {
        return amdNotExistAdd(x, y, 0);
    }
    ::Ice::Int amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return amdNotExistAdd(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdNotExistAdd(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdNotExistAdd(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdNotExistAdd(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdNotExistAdd(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_amdNotExistAdd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_amdNotExistAdd(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y)
    {
        return begin_amdNotExistAdd(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_amdNotExistAdd(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdNotExistAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdNotExistAdd(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdNotExistAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdNotExistAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_amdNotExistAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdNotExistAdd(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_amdNotExistAdd(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int amdNotExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int amdBadSystemAdd(::Ice::Int x, ::Ice::Int y)
    {
        return amdBadSystemAdd(x, y, 0);
    }
    ::Ice::Int amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return amdBadSystemAdd(x, y, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdBadSystemAdd(x, y, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdBadSystemAdd(x, y, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_amdBadSystemAdd(x, y, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_amdBadSystemAdd(x, y, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_amdBadSystemAdd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_amdBadSystemAdd(x, y, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y)
    {
        return begin_amdBadSystemAdd(x, y, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx)
    {
        return begin_amdBadSystemAdd(x, y, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadSystemAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadSystemAdd(x, y, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdBadSystemAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadSystemAdd(x, y, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& __ctx, const ::Test::Callback_MyObject_amdBadSystemAddPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_amdBadSystemAdd(x, y, &__ctx, __del, __cookie);
    }

    INTERCEPTOR_TEST_API ::Ice::Int end_amdBadSystemAdd(const ::Ice::AsyncResultPtr&);
    
private:

    INTERCEPTOR_TEST_API ::Ice::Int amdBadSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    INTERCEPTOR_TEST_API ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MyObject> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_secure(bool __secure) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_twoway() const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_oneway() const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_batchOneway() const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_datagram() const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_batchDatagram() const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_compress(bool __compress) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MyObject> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MyObject*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    INTERCEPTOR_TEST_API static const ::std::string& ice_staticId();

private: 

    INTERCEPTOR_TEST_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    INTERCEPTOR_TEST_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    INTERCEPTOR_TEST_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class INTERCEPTOR_TEST_API MyObject : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int add(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int addWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int badAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int notExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int badSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int amdAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int amdAddWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int amdBadAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int amdNotExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int amdBadSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class INTERCEPTOR_TEST_API MyObject : virtual public ::IceDelegate::Test::MyObject,
                                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int add(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int addWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int badAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int notExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int badSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdAddWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdBadAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdNotExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdBadSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class INTERCEPTOR_TEST_API MyObject : virtual public ::IceDelegate::Test::MyObject,
                                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int add(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int addWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int badAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int notExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int badSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdAddWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdBadAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdNotExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int amdBadSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class INTERCEPTOR_TEST_API MyObject : virtual public ::Ice::Object
{
public:

    typedef MyObjectPrx ProxyType;
    typedef MyObjectPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int add(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___add(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int addWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int badAdd(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___badAdd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int notExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___notExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int badSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___badSystemAdd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void amdAdd_async(const ::Test::AMD_MyObject_amdAddPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___amdAdd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void amdAddWithRetry_async(const ::Test::AMD_MyObject_amdAddWithRetryPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___amdAddWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void amdBadAdd_async(const ::Test::AMD_MyObject_amdBadAddPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___amdBadAdd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void amdNotExistAdd_async(const ::Test::AMD_MyObject_amdNotExistAddPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___amdNotExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void amdBadSystemAdd_async(const ::Test::AMD_MyObject_amdBadSystemAddPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___amdBadSystemAdd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const MyObject& l, const MyObject& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MyObject& l, const MyObject& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_MyObject_add : public Callback_MyObject_add_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_add(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_addPtr
newCallback_MyObject_add(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_add<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_addPtr
newCallback_MyObject_add(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_add<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_add : public Callback_MyObject_add_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_add(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_addPtr
newCallback_MyObject_add(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_add<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_addPtr
newCallback_MyObject_add(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_add<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_addWithRetry : public Callback_MyObject_addWithRetry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_addWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addWithRetry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_addWithRetry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_addWithRetry<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_addWithRetry : public Callback_MyObject_addWithRetry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_addWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addWithRetry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_addWithRetry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_addWithRetry<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_badAdd : public Callback_MyObject_badAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_badAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_badAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badAdd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badAdd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_badAdd : public Callback_MyObject_badAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_badAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_badAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_notExistAdd : public Callback_MyObject_notExistAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_notExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_notExistAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_notExistAdd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_notExistAdd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_notExistAdd : public Callback_MyObject_notExistAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_notExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_notExistAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_notExistAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_notExistAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_badSystemAdd : public Callback_MyObject_badSystemAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_badSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_badSystemAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badSystemAdd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badSystemAdd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_badSystemAdd : public Callback_MyObject_badSystemAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_badSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_badSystemAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_amdAdd : public Callback_MyObject_amdAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAdd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAdd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_amdAdd : public Callback_MyObject_amdAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_amdAddWithRetry : public Callback_MyObject_amdAddWithRetry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdAddWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdAddWithRetry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAddWithRetry<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAddWithRetry<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_amdAddWithRetry : public Callback_MyObject_amdAddWithRetry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdAddWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdAddWithRetry(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAddWithRetry<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAddWithRetry<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_amdBadAdd : public Callback_MyObject_amdBadAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdBadAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdBadAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadAdd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadAdd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_amdBadAdd : public Callback_MyObject_amdBadAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdBadAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdBadAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_amdNotExistAdd : public Callback_MyObject_amdNotExistAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdNotExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdNotExistAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdNotExistAdd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdNotExistAdd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_amdNotExistAdd : public Callback_MyObject_amdNotExistAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdNotExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdNotExistAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdNotExistAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdNotExistAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MyObject_amdBadSystemAdd : public Callback_MyObject_amdBadSystemAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdBadSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdBadSystemAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadSystemAdd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadSystemAdd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MyObject_amdBadSystemAdd : public Callback_MyObject_amdBadSystemAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdBadSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MyObjectPrx __proxy = ::Test::MyObjectPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_amdBadSystemAdd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
