// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Test__MyClass__shutdown_name = "shutdown";

const ::std::string __Test__MyClass__delay_name = "delay";

const ::std::string __Test__MyClass__opVoid_name = "opVoid";

const ::std::string __Test__MyClass__opByte_name = "opByte";

const ::std::string __Test__MyClass__opBool_name = "opBool";

const ::std::string __Test__MyClass__opShortIntLong_name = "opShortIntLong";

const ::std::string __Test__MyClass__opFloatDouble_name = "opFloatDouble";

const ::std::string __Test__MyClass__opString_name = "opString";

const ::std::string __Test__MyClass__opMyEnum_name = "opMyEnum";

const ::std::string __Test__MyClass__opMyClass_name = "opMyClass";

const ::std::string __Test__MyClass__opStruct_name = "opStruct";

const ::std::string __Test__MyClass__opByteS_name = "opByteS";

const ::std::string __Test__MyClass__opBoolS_name = "opBoolS";

const ::std::string __Test__MyClass__opShortIntLongS_name = "opShortIntLongS";

const ::std::string __Test__MyClass__opFloatDoubleS_name = "opFloatDoubleS";

const ::std::string __Test__MyClass__opStringS_name = "opStringS";

const ::std::string __Test__MyClass__opByteSS_name = "opByteSS";

const ::std::string __Test__MyClass__opBoolSS_name = "opBoolSS";

const ::std::string __Test__MyClass__opShortIntLongSS_name = "opShortIntLongSS";

const ::std::string __Test__MyClass__opFloatDoubleSS_name = "opFloatDoubleSS";

const ::std::string __Test__MyClass__opStringSS_name = "opStringSS";

const ::std::string __Test__MyClass__opStringSSS_name = "opStringSSS";

const ::std::string __Test__MyClass__opByteBoolD_name = "opByteBoolD";

const ::std::string __Test__MyClass__opShortIntD_name = "opShortIntD";

const ::std::string __Test__MyClass__opLongFloatD_name = "opLongFloatD";

const ::std::string __Test__MyClass__opStringStringD_name = "opStringStringD";

const ::std::string __Test__MyClass__opStringMyEnumD_name = "opStringMyEnumD";

const ::std::string __Test__MyClass__opMyEnumStringD_name = "opMyEnumStringD";

const ::std::string __Test__MyClass__opMyStructMyEnumD_name = "opMyStructMyEnumD";

const ::std::string __Test__MyClass__opIntS_name = "opIntS";

const ::std::string __Test__MyClass__opByteSOneway_name = "opByteSOneway";

const ::std::string __Test__MyClass__opContext_name = "opContext";

const ::std::string __Test__MyClass__opDoubleMarshaling_name = "opDoubleMarshaling";

const ::std::string __Test__MyClass__opIdempotent_name = "opIdempotent";

const ::std::string __Test__MyClass__opNonmutating_name = "opNonmutating";

const ::std::string __Test__MyDerivedClass__opDerived_name = "opDerived";

}

namespace
{

const char* __Test__SomeException_name = "Test::SomeException";

struct __F__Test__SomeException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::SomeException();
    }
};

class __F__Test__SomeException__Init
{
public:

    __F__Test__SomeException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::SomeException", new __F__Test__SomeException);
    }

    ~__F__Test__SomeException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::SomeException");
    }
};

const __F__Test__SomeException__Init __F__Test__SomeException__i;

}

Test::SomeException::~SomeException() throw()
{
}

::std::string
Test::SomeException::ice_name() const
{
    return __Test__SomeException_name;
}

Test::SomeException*
Test::SomeException::ice_clone() const
{
    return new SomeException(*this);
}

void
Test::SomeException::ice_throw() const
{
    throw *this;
}

void
Test::SomeException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::SomeException", -1, true);
    __os->endWriteSlice();
}

void
Test::SomeException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MyClass* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MyClass;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::MyClass::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__shutdown_name);
}

bool
IceProxy::Test::MyClass::shutdown_async(const ::Test::AMI_MyClass_shutdownPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception, &::Test::AMI_MyClass_shutdown::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_shutdown(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::shutdown_async(const ::Test::AMI_MyClass_shutdownPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception, &::Test::AMI_MyClass_shutdown::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_shutdown(&__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::delay(::Ice::Int ms, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__delay_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->delay(ms, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_delay(::Ice::Int ms, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__delay_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__delay_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ms);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_delay(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__delay_name);
}

bool
IceProxy::Test::MyClass::delay_async(const ::Test::AMI_MyClass_delayPtr& __cb, ::Ice::Int ms)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception, &::Test::AMI_MyClass_delay::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_delay(ms, 0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::delay_async(const ::Test::AMI_MyClass_delayPtr& __cb, ::Ice::Int ms, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception, &::Test::AMI_MyClass_delay::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_delay(ms, &__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opVoid(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opVoid_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opVoid(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opVoid(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opVoid_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opVoid_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opVoid(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opVoid_name);
}

bool
IceProxy::Test::MyClass::opVoid_async(const ::Test::AMI_MyClass_opVoidPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception, &::Test::AMI_MyClass_opVoid::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opVoid(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opVoid_async(const ::Test::AMI_MyClass_opVoidPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception, &::Test::AMI_MyClass_opVoid::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opVoid(&__ctx, __del);
    return __ar->sentSynchronously();
}

::Ice::Byte
IceProxy::Test::MyClass::opByte(::Ice::Byte p1, ::Ice::Byte p2, ::Ice::Byte& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByte_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByte_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByte(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByte(::Ice::Byte p1, ::Ice::Byte p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByte_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByte_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByte_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Byte
IceProxy::Test::MyClass::end_opByte(::Ice::Byte& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByte_name);
    ::Ice::Byte __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByte_async(const ::Test::AMI_MyClass_opBytePtr& __cb, ::Ice::Byte p1, ::Ice::Byte p2)
{
    ::Test::Callback_MyClass_opBytePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception, &::Test::AMI_MyClass_opByte::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByte_name);
        __ar = begin_opByte(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByte_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByte_async(const ::Test::AMI_MyClass_opBytePtr& __cb, ::Ice::Byte p1, ::Ice::Byte p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBytePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception, &::Test::AMI_MyClass_opByte::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByte_name);
        __ar = begin_opByte(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByte_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBool(bool p1, bool p2, bool& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opBool_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opBool_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opBool(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opBool(bool p1, bool p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opBool_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBool_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opBool_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::MyClass::end_opBool(bool& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opBool_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opBool_async(const ::Test::AMI_MyClass_opBoolPtr& __cb, bool p1, bool p2)
{
    ::Test::Callback_MyClass_opBoolPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception, &::Test::AMI_MyClass_opBool::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBool_name);
        __ar = begin_opBool(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBool_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBool_async(const ::Test::AMI_MyClass_opBoolPtr& __cb, bool p1, bool p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBoolPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception, &::Test::AMI_MyClass_opBool::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBool_name);
        __ar = begin_opBool(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBool_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Ice::Long
IceProxy::Test::MyClass::opShortIntLong(::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, ::Ice::Short& p4, ::Ice::Int& p5, ::Ice::Long& p6, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntLong_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntLong_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntLong(p1, p2, p3, p4, p5, p6, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntLong(::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntLong_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLong_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntLong_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::Test::MyClass::end_opShortIntLong(::Ice::Short& p4, ::Ice::Int& p5, ::Ice::Long& p6, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntLong_name);
    ::Ice::Long __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntLong_async(const ::Test::AMI_MyClass_opShortIntLongPtr& __cb, ::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3)
{
    ::Test::Callback_MyClass_opShortIntLongPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception, &::Test::AMI_MyClass_opShortIntLong::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLong_name);
        __ar = begin_opShortIntLong(p1, p2, p3, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLong_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntLong_async(const ::Test::AMI_MyClass_opShortIntLongPtr& __cb, ::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntLongPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception, &::Test::AMI_MyClass_opShortIntLong::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLong_name);
        __ar = begin_opShortIntLong(p1, p2, p3, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLong_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Ice::Double
IceProxy::Test::MyClass::opFloatDouble(::Ice::Float p1, ::Ice::Double p2, ::Ice::Float& p3, ::Ice::Double& p4, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opFloatDouble_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opFloatDouble_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opFloatDouble(p1, p2, p3, p4, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opFloatDouble(::Ice::Float p1, ::Ice::Double p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opFloatDouble_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDouble_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opFloatDouble_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Double
IceProxy::Test::MyClass::end_opFloatDouble(::Ice::Float& p3, ::Ice::Double& p4, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opFloatDouble_name);
    ::Ice::Double __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opFloatDouble_async(const ::Test::AMI_MyClass_opFloatDoublePtr& __cb, ::Ice::Float p1, ::Ice::Double p2)
{
    ::Test::Callback_MyClass_opFloatDoublePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception, &::Test::AMI_MyClass_opFloatDouble::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDouble_name);
        __ar = begin_opFloatDouble(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDouble_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opFloatDouble_async(const ::Test::AMI_MyClass_opFloatDoublePtr& __cb, ::Ice::Float p1, ::Ice::Double p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opFloatDoublePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception, &::Test::AMI_MyClass_opFloatDouble::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDouble_name);
        __ar = begin_opFloatDouble(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDouble_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::Test::MyClass::opString(const ::std::string& p1, const ::std::string& p2, ::std::string& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opString_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opString_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opString(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opString(const ::std::string& p1, const ::std::string& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opString_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opString_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opString_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::Test::MyClass::end_opString(::std::string& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opString_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opString_async(const ::Test::AMI_MyClass_opStringPtr& __cb, const ::std::string& p1, const ::std::string& p2)
{
    ::Test::Callback_MyClass_opStringPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception, &::Test::AMI_MyClass_opString::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opString_name);
        __ar = begin_opString(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opString_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opString_async(const ::Test::AMI_MyClass_opStringPtr& __cb, const ::std::string& p1, const ::std::string& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception, &::Test::AMI_MyClass_opString::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opString_name);
        __ar = begin_opString(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opString_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyEnum
IceProxy::Test::MyClass::opMyEnum(::Test::MyEnum p1, ::Test::MyEnum& p2, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyEnum_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyEnum_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyEnum(p1, p2, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyEnum(::Test::MyEnum p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyEnum_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnum_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyEnum_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyEnum
IceProxy::Test::MyClass::end_opMyEnum(::Test::MyEnum& p2, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyEnum_name);
    ::Test::MyEnum __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p2);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyEnum_async(const ::Test::AMI_MyClass_opMyEnumPtr& __cb, ::Test::MyEnum p1)
{
    ::Test::Callback_MyClass_opMyEnumPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception, &::Test::AMI_MyClass_opMyEnum::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnum_name);
        __ar = begin_opMyEnum(p1, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnum_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyEnum_async(const ::Test::AMI_MyClass_opMyEnumPtr& __cb, ::Test::MyEnum p1, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyEnumPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception, &::Test::AMI_MyClass_opMyEnum::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnum_name);
        __ar = begin_opMyEnum(p1, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnum_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyClassPrx
IceProxy::Test::MyClass::opMyClass(const ::Test::MyClassPrx& p1, ::Test::MyClassPrx& p2, ::Test::MyClassPrx& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyClass_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyClass_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyClass(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyClass(const ::Test::MyClassPrx& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyClass_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyClass_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyClass_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyClassPrx
IceProxy::Test::MyClass::end_opMyClass(::Test::MyClassPrx& p2, ::Test::MyClassPrx& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyClass_name);
    ::Test::MyClassPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p2);
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyClass_async(const ::Test::AMI_MyClass_opMyClassPtr& __cb, const ::Test::MyClassPrx& p1)
{
    ::Test::Callback_MyClass_opMyClassPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception, &::Test::AMI_MyClass_opMyClass::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyClass_name);
        __ar = begin_opMyClass(p1, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyClass_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyClass_async(const ::Test::AMI_MyClass_opMyClassPtr& __cb, const ::Test::MyClassPrx& p1, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyClassPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception, &::Test::AMI_MyClass_opMyClass::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyClass_name);
        __ar = begin_opMyClass(p1, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyClass_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::Structure
IceProxy::Test::MyClass::opStruct(const ::Test::Structure& p1, const ::Test::Structure& p2, ::Test::Structure& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStruct_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStruct_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStruct(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStruct(const ::Test::Structure& p1, const ::Test::Structure& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStruct_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStruct_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStruct_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::Structure
IceProxy::Test::MyClass::end_opStruct(::Test::Structure& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStruct_name);
    ::Test::Structure __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStruct_async(const ::Test::AMI_MyClass_opStructPtr& __cb, const ::Test::Structure& p1, const ::Test::Structure& p2)
{
    ::Test::Callback_MyClass_opStructPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception, &::Test::AMI_MyClass_opStruct::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStruct_name);
        __ar = begin_opStruct(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStruct_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStruct_async(const ::Test::AMI_MyClass_opStructPtr& __cb, const ::Test::Structure& p1, const ::Test::Structure& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStructPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception, &::Test::AMI_MyClass_opStruct::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStruct_name);
        __ar = begin_opStruct(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStruct_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ByteS
IceProxy::Test::MyClass::opByteS(const ::Test::ByteS& p1, const ::Test::ByteS& p2, ::Test::ByteS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByteS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByteS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteS(const ::Test::ByteS& p1, const ::Test::ByteS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByteS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ByteS
IceProxy::Test::MyClass::end_opByteS(::Test::ByteS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByteS_name);
    ::Test::ByteS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByteS_async(const ::Test::AMI_MyClass_opByteSPtr& __cb, const ::Test::ByteS& p1, const ::Test::ByteS& p2)
{
    ::Test::Callback_MyClass_opByteSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception, &::Test::AMI_MyClass_opByteS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteS_name);
        __ar = begin_opByteS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteS_async(const ::Test::AMI_MyClass_opByteSPtr& __cb, const ::Test::ByteS& p1, const ::Test::ByteS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opByteSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception, &::Test::AMI_MyClass_opByteS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteS_name);
        __ar = begin_opByteS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::BoolS
IceProxy::Test::MyClass::opBoolS(const ::Test::BoolS& p1, const ::Test::BoolS& p2, ::Test::BoolS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opBoolS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opBoolS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opBoolS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opBoolS(const ::Test::BoolS& p1, const ::Test::BoolS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opBoolS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opBoolS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::BoolS
IceProxy::Test::MyClass::end_opBoolS(::Test::BoolS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opBoolS_name);
    ::Test::BoolS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opBoolS_async(const ::Test::AMI_MyClass_opBoolSPtr& __cb, const ::Test::BoolS& p1, const ::Test::BoolS& p2)
{
    ::Test::Callback_MyClass_opBoolSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception, &::Test::AMI_MyClass_opBoolS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolS_name);
        __ar = begin_opBoolS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBoolS_async(const ::Test::AMI_MyClass_opBoolSPtr& __cb, const ::Test::BoolS& p1, const ::Test::BoolS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBoolSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception, &::Test::AMI_MyClass_opBoolS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolS_name);
        __ar = begin_opBoolS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::LongS
IceProxy::Test::MyClass::opShortIntLongS(const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, ::Test::ShortS& p4, ::Test::IntS& p5, ::Test::LongS& p6, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntLongS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntLongS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntLongS(p1, p2, p3, p4, p5, p6, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntLongS(const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntLongS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntLongS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::LongS
IceProxy::Test::MyClass::end_opShortIntLongS(::Test::ShortS& p4, ::Test::IntS& p5, ::Test::LongS& p6, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntLongS_name);
    ::Test::LongS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntLongS_async(const ::Test::AMI_MyClass_opShortIntLongSPtr& __cb, const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3)
{
    ::Test::Callback_MyClass_opShortIntLongSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception, &::Test::AMI_MyClass_opShortIntLongS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongS_name);
        __ar = begin_opShortIntLongS(p1, p2, p3, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntLongS_async(const ::Test::AMI_MyClass_opShortIntLongSPtr& __cb, const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntLongSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception, &::Test::AMI_MyClass_opShortIntLongS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongS_name);
        __ar = begin_opShortIntLongS(p1, p2, p3, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::DoubleS
IceProxy::Test::MyClass::opFloatDoubleS(const ::Test::FloatS& p1, const ::Test::DoubleS& p2, ::Test::FloatS& p3, ::Test::DoubleS& p4, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opFloatDoubleS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opFloatDoubleS(p1, p2, p3, p4, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opFloatDoubleS(const ::Test::FloatS& p1, const ::Test::DoubleS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opFloatDoubleS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::DoubleS
IceProxy::Test::MyClass::end_opFloatDoubleS(::Test::FloatS& p3, ::Test::DoubleS& p4, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opFloatDoubleS_name);
    ::Test::DoubleS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opFloatDoubleS_async(const ::Test::AMI_MyClass_opFloatDoubleSPtr& __cb, const ::Test::FloatS& p1, const ::Test::DoubleS& p2)
{
    ::Test::Callback_MyClass_opFloatDoubleSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception, &::Test::AMI_MyClass_opFloatDoubleS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
        __ar = begin_opFloatDoubleS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opFloatDoubleS_async(const ::Test::AMI_MyClass_opFloatDoubleSPtr& __cb, const ::Test::FloatS& p1, const ::Test::DoubleS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opFloatDoubleSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception, &::Test::AMI_MyClass_opFloatDoubleS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
        __ar = begin_opFloatDoubleS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringS
IceProxy::Test::MyClass::opStringS(const ::Test::StringS& p1, const ::Test::StringS& p2, ::Test::StringS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringS(const ::Test::StringS& p1, const ::Test::StringS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opStringS(::Test::StringS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringS_name);
    ::Test::StringS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringS_async(const ::Test::AMI_MyClass_opStringSPtr& __cb, const ::Test::StringS& p1, const ::Test::StringS& p2)
{
    ::Test::Callback_MyClass_opStringSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception, &::Test::AMI_MyClass_opStringS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringS_name);
        __ar = begin_opStringS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringS_async(const ::Test::AMI_MyClass_opStringSPtr& __cb, const ::Test::StringS& p1, const ::Test::StringS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception, &::Test::AMI_MyClass_opStringS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringS_name);
        __ar = begin_opStringS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ByteSS
IceProxy::Test::MyClass::opByteSS(const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, ::Test::ByteSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByteSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByteSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteSS(const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByteSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ByteSS
IceProxy::Test::MyClass::end_opByteSS(::Test::ByteSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByteSS_name);
    ::Test::ByteSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByteSS_async(const ::Test::AMI_MyClass_opByteSSPtr& __cb, const ::Test::ByteSS& p1, const ::Test::ByteSS& p2)
{
    ::Test::Callback_MyClass_opByteSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception, &::Test::AMI_MyClass_opByteSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteSS_name);
        __ar = begin_opByteSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteSS_async(const ::Test::AMI_MyClass_opByteSSPtr& __cb, const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opByteSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception, &::Test::AMI_MyClass_opByteSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteSS_name);
        __ar = begin_opByteSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::BoolSS
IceProxy::Test::MyClass::opBoolSS(const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, ::Test::BoolSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opBoolSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opBoolSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opBoolSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opBoolSS(const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opBoolSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opBoolSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::BoolSS
IceProxy::Test::MyClass::end_opBoolSS(::Test::BoolSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opBoolSS_name);
    ::Test::BoolSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opBoolSS_async(const ::Test::AMI_MyClass_opBoolSSPtr& __cb, const ::Test::BoolSS& p1, const ::Test::BoolSS& p2)
{
    ::Test::Callback_MyClass_opBoolSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception, &::Test::AMI_MyClass_opBoolSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolSS_name);
        __ar = begin_opBoolSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBoolSS_async(const ::Test::AMI_MyClass_opBoolSSPtr& __cb, const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBoolSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception, &::Test::AMI_MyClass_opBoolSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolSS_name);
        __ar = begin_opBoolSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::LongSS
IceProxy::Test::MyClass::opShortIntLongSS(const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, ::Test::ShortSS& p4, ::Test::IntSS& p5, ::Test::LongSS& p6, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntLongSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntLongSS(p1, p2, p3, p4, p5, p6, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntLongSS(const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntLongSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::LongSS
IceProxy::Test::MyClass::end_opShortIntLongSS(::Test::ShortSS& p4, ::Test::IntSS& p5, ::Test::LongSS& p6, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntLongSS_name);
    ::Test::LongSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntLongSS_async(const ::Test::AMI_MyClass_opShortIntLongSSPtr& __cb, const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3)
{
    ::Test::Callback_MyClass_opShortIntLongSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception, &::Test::AMI_MyClass_opShortIntLongSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
        __ar = begin_opShortIntLongSS(p1, p2, p3, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntLongSS_async(const ::Test::AMI_MyClass_opShortIntLongSSPtr& __cb, const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntLongSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception, &::Test::AMI_MyClass_opShortIntLongSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
        __ar = begin_opShortIntLongSS(p1, p2, p3, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::DoubleSS
IceProxy::Test::MyClass::opFloatDoubleSS(const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, ::Test::FloatSS& p3, ::Test::DoubleSS& p4, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opFloatDoubleSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opFloatDoubleSS(p1, p2, p3, p4, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opFloatDoubleSS(const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opFloatDoubleSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::DoubleSS
IceProxy::Test::MyClass::end_opFloatDoubleSS(::Test::FloatSS& p3, ::Test::DoubleSS& p4, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opFloatDoubleSS_name);
    ::Test::DoubleSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opFloatDoubleSS_async(const ::Test::AMI_MyClass_opFloatDoubleSSPtr& __cb, const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2)
{
    ::Test::Callback_MyClass_opFloatDoubleSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception, &::Test::AMI_MyClass_opFloatDoubleSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
        __ar = begin_opFloatDoubleSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opFloatDoubleSS_async(const ::Test::AMI_MyClass_opFloatDoubleSSPtr& __cb, const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opFloatDoubleSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception, &::Test::AMI_MyClass_opFloatDoubleSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
        __ar = begin_opFloatDoubleSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringSS
IceProxy::Test::MyClass::opStringSS(const ::Test::StringSS& p1, const ::Test::StringSS& p2, ::Test::StringSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringSS(const ::Test::StringSS& p1, const ::Test::StringSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringSS
IceProxy::Test::MyClass::end_opStringSS(::Test::StringSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringSS_name);
    ::Test::StringSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringSS_async(const ::Test::AMI_MyClass_opStringSSPtr& __cb, const ::Test::StringSS& p1, const ::Test::StringSS& p2)
{
    ::Test::Callback_MyClass_opStringSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception, &::Test::AMI_MyClass_opStringSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSS_name);
        __ar = begin_opStringSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringSS_async(const ::Test::AMI_MyClass_opStringSSPtr& __cb, const ::Test::StringSS& p1, const ::Test::StringSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception, &::Test::AMI_MyClass_opStringSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSS_name);
        __ar = begin_opStringSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringSSS
IceProxy::Test::MyClass::opStringSSS(const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, ::Test::StringSSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringSSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringSSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringSSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringSSS(const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringSSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringSSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringSSS
IceProxy::Test::MyClass::end_opStringSSS(::Test::StringSSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringSSS_name);
    ::Test::StringSSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringSSS_async(const ::Test::AMI_MyClass_opStringSSSPtr& __cb, const ::Test::StringSSS& p1, const ::Test::StringSSS& p2)
{
    ::Test::Callback_MyClass_opStringSSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception, &::Test::AMI_MyClass_opStringSSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSSS_name);
        __ar = begin_opStringSSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringSSS_async(const ::Test::AMI_MyClass_opStringSSSPtr& __cb, const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringSSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception, &::Test::AMI_MyClass_opStringSSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSSS_name);
        __ar = begin_opStringSSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ByteBoolD
IceProxy::Test::MyClass::opByteBoolD(const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, ::Test::ByteBoolD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteBoolD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByteBoolD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByteBoolD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteBoolD(const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByteBoolD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteBoolD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteBoolD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ByteBoolD
IceProxy::Test::MyClass::end_opByteBoolD(::Test::ByteBoolD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByteBoolD_name);
    ::Test::ByteBoolD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByteBoolD_async(const ::Test::AMI_MyClass_opByteBoolDPtr& __cb, const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2)
{
    ::Test::Callback_MyClass_opByteBoolDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception, &::Test::AMI_MyClass_opByteBoolD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteBoolD_name);
        __ar = begin_opByteBoolD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteBoolD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteBoolD_async(const ::Test::AMI_MyClass_opByteBoolDPtr& __cb, const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opByteBoolDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception, &::Test::AMI_MyClass_opByteBoolD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteBoolD_name);
        __ar = begin_opByteBoolD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteBoolD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ShortIntD
IceProxy::Test::MyClass::opShortIntD(const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, ::Test::ShortIntD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntD(const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ShortIntD
IceProxy::Test::MyClass::end_opShortIntD(::Test::ShortIntD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntD_name);
    ::Test::ShortIntD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntD_async(const ::Test::AMI_MyClass_opShortIntDPtr& __cb, const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2)
{
    ::Test::Callback_MyClass_opShortIntDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception, &::Test::AMI_MyClass_opShortIntD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntD_name);
        __ar = begin_opShortIntD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntD_async(const ::Test::AMI_MyClass_opShortIntDPtr& __cb, const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception, &::Test::AMI_MyClass_opShortIntD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntD_name);
        __ar = begin_opShortIntD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::LongFloatD
IceProxy::Test::MyClass::opLongFloatD(const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, ::Test::LongFloatD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opLongFloatD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opLongFloatD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opLongFloatD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opLongFloatD(const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opLongFloatD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opLongFloatD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opLongFloatD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::LongFloatD
IceProxy::Test::MyClass::end_opLongFloatD(::Test::LongFloatD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opLongFloatD_name);
    ::Test::LongFloatD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opLongFloatD_async(const ::Test::AMI_MyClass_opLongFloatDPtr& __cb, const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2)
{
    ::Test::Callback_MyClass_opLongFloatDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception, &::Test::AMI_MyClass_opLongFloatD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opLongFloatD_name);
        __ar = begin_opLongFloatD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opLongFloatD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opLongFloatD_async(const ::Test::AMI_MyClass_opLongFloatDPtr& __cb, const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opLongFloatDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception, &::Test::AMI_MyClass_opLongFloatD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opLongFloatD_name);
        __ar = begin_opLongFloatD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opLongFloatD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringStringD
IceProxy::Test::MyClass::opStringStringD(const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, ::Test::StringStringD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringStringD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringStringD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringStringD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringStringD(const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringStringD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringStringD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringStringD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringStringD
IceProxy::Test::MyClass::end_opStringStringD(::Test::StringStringD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringStringD_name);
    ::Test::StringStringD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringStringD_async(const ::Test::AMI_MyClass_opStringStringDPtr& __cb, const ::Test::StringStringD& p1, const ::Test::StringStringD& p2)
{
    ::Test::Callback_MyClass_opStringStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception, &::Test::AMI_MyClass_opStringStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringStringD_name);
        __ar = begin_opStringStringD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringStringD_async(const ::Test::AMI_MyClass_opStringStringDPtr& __cb, const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception, &::Test::AMI_MyClass_opStringStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringStringD_name);
        __ar = begin_opStringStringD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringMyEnumD
IceProxy::Test::MyClass::opStringMyEnumD(const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, ::Test::StringMyEnumD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringMyEnumD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringMyEnumD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringMyEnumD(const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringMyEnumD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringMyEnumD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringMyEnumD
IceProxy::Test::MyClass::end_opStringMyEnumD(::Test::StringMyEnumD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringMyEnumD_name);
    ::Test::StringMyEnumD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringMyEnumD_async(const ::Test::AMI_MyClass_opStringMyEnumDPtr& __cb, const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2)
{
    ::Test::Callback_MyClass_opStringMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception, &::Test::AMI_MyClass_opStringMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
        __ar = begin_opStringMyEnumD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringMyEnumD_async(const ::Test::AMI_MyClass_opStringMyEnumDPtr& __cb, const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception, &::Test::AMI_MyClass_opStringMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
        __ar = begin_opStringMyEnumD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyEnumStringD
IceProxy::Test::MyClass::opMyEnumStringD(const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, ::Test::MyEnumStringD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyEnumStringD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyEnumStringD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyEnumStringD(const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnumStringD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyEnumStringD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyEnumStringD
IceProxy::Test::MyClass::end_opMyEnumStringD(::Test::MyEnumStringD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyEnumStringD_name);
    ::Test::MyEnumStringD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyEnumStringD_async(const ::Test::AMI_MyClass_opMyEnumStringDPtr& __cb, const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2)
{
    ::Test::Callback_MyClass_opMyEnumStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception, &::Test::AMI_MyClass_opMyEnumStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
        __ar = begin_opMyEnumStringD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnumStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyEnumStringD_async(const ::Test::AMI_MyClass_opMyEnumStringDPtr& __cb, const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyEnumStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception, &::Test::AMI_MyClass_opMyEnumStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
        __ar = begin_opMyEnumStringD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnumStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyStructMyEnumD
IceProxy::Test::MyClass::opMyStructMyEnumD(const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, ::Test::MyStructMyEnumD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyStructMyEnumD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyStructMyEnumD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyStructMyEnumD(const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyStructMyEnumD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyStructMyEnumD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyStructMyEnumD
IceProxy::Test::MyClass::end_opMyStructMyEnumD(::Test::MyStructMyEnumD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyStructMyEnumD_name);
    ::Test::MyStructMyEnumD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyStructMyEnumD_async(const ::Test::AMI_MyClass_opMyStructMyEnumDPtr& __cb, const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2)
{
    ::Test::Callback_MyClass_opMyStructMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception, &::Test::AMI_MyClass_opMyStructMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
        __ar = begin_opMyStructMyEnumD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyStructMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyStructMyEnumD_async(const ::Test::AMI_MyClass_opMyStructMyEnumDPtr& __cb, const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyStructMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception, &::Test::AMI_MyClass_opMyStructMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
        __ar = begin_opMyStructMyEnumD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyStructMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::IntS
IceProxy::Test::MyClass::opIntS(const ::Test::IntS& s, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opIntS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opIntS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opIntS(s, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opIntS(const ::Test::IntS& s, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opIntS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIntS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opIntS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::IntS
IceProxy::Test::MyClass::end_opIntS(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opIntS_name);
    ::Test::IntS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opIntS_async(const ::Test::AMI_MyClass_opIntSPtr& __cb, const ::Test::IntS& s)
{
    ::Test::Callback_MyClass_opIntSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception, &::Test::AMI_MyClass_opIntS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opIntS_name);
        __ar = begin_opIntS(s, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIntS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opIntS_async(const ::Test::AMI_MyClass_opIntSPtr& __cb, const ::Test::IntS& s, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opIntSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception, &::Test::AMI_MyClass_opIntS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opIntS_name);
        __ar = begin_opIntS(s, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIntS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opByteSOneway(const ::Test::ByteS& s, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteSOneway_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opByteSOneway(s, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteSOneway(const ::Test::ByteS& s, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSOneway_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteSOneway_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opByteSOneway(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opByteSOneway_name);
}

bool
IceProxy::Test::MyClass::opByteSOneway_async(const ::Test::AMI_MyClass_opByteSOnewayPtr& __cb, const ::Test::ByteS& s)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception, &::Test::AMI_MyClass_opByteSOneway::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opByteSOneway(s, 0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteSOneway_async(const ::Test::AMI_MyClass_opByteSOnewayPtr& __cb, const ::Test::ByteS& s, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception, &::Test::AMI_MyClass_opByteSOneway::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opByteSOneway(s, &__ctx, __del);
    return __ar->sentSynchronously();
}

::Ice::Context
IceProxy::Test::MyClass::opContext(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opContext_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opContext_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opContext(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opContext(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opContext_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opContext_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opContext_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Context
IceProxy::Test::MyClass::end_opContext(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opContext_name);
    ::Ice::Context __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opContext_async(const ::Test::AMI_MyClass_opContextPtr& __cb)
{
    ::Test::Callback_MyClass_opContextPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception, &::Test::AMI_MyClass_opContext::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opContext_name);
        __ar = begin_opContext(0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opContext_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opContext_async(const ::Test::AMI_MyClass_opContextPtr& __cb, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opContextPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception, &::Test::AMI_MyClass_opContext::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opContext_name);
        __ar = begin_opContext(&__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opContext_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opDoubleMarshaling(::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opDoubleMarshaling_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opDoubleMarshaling(p1, p2, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opDoubleMarshaling(::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opDoubleMarshaling_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opDoubleMarshaling_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opDoubleMarshaling(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opDoubleMarshaling_name);
}

bool
IceProxy::Test::MyClass::opDoubleMarshaling_async(const ::Test::AMI_MyClass_opDoubleMarshalingPtr& __cb, ::Ice::Double p1, const ::Test::DoubleS& p2)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception, &::Test::AMI_MyClass_opDoubleMarshaling::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDoubleMarshaling(p1, p2, 0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opDoubleMarshaling_async(const ::Test::AMI_MyClass_opDoubleMarshalingPtr& __cb, ::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception, &::Test::AMI_MyClass_opDoubleMarshaling::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDoubleMarshaling(p1, p2, &__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opIdempotent(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opIdempotent_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opIdempotent(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opIdempotent(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIdempotent_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opIdempotent_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opIdempotent(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opIdempotent_name);
}

bool
IceProxy::Test::MyClass::opIdempotent_async(const ::Test::AMI_MyClass_opIdempotentPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception, &::Test::AMI_MyClass_opIdempotent::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opIdempotent(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opIdempotent_async(const ::Test::AMI_MyClass_opIdempotentPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception, &::Test::AMI_MyClass_opIdempotent::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opIdempotent(&__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opNonmutating(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opNonmutating_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opNonmutating(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opNonmutating(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opNonmutating_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opNonmutating_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opNonmutating(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opNonmutating_name);
}

bool
IceProxy::Test::MyClass::opNonmutating_async(const ::Test::AMI_MyClass_opNonmutatingPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception, &::Test::AMI_MyClass_opNonmutating::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opNonmutating(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opNonmutating_async(const ::Test::AMI_MyClass_opNonmutatingPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception, &::Test::AMI_MyClass_opNonmutating::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opNonmutating(&__ctx, __del);
    return __ar->sentSynchronously();
}

const ::std::string&
IceProxy::Test::MyClass::ice_staticId()
{
    return ::Test::MyClass::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MyClass::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MyClass);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MyClass::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MyClass);
}

::IceProxy::Ice::Object*
IceProxy::Test::MyClass::__newInstance() const
{
    return new MyClass;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MyDerivedClass* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyDerivedClass>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MyDerivedClass;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::MyDerivedClass::opDerived(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyDerivedClass__opDerived_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyDerivedClass* __del = dynamic_cast< ::IceDelegate::Test::MyDerivedClass*>(__delBase.get());
            __del->opDerived(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyDerivedClass::begin_opDerived(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyDerivedClass__opDerived_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyDerivedClass__opDerived_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyDerivedClass::end_opDerived(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyDerivedClass__opDerived_name);
}

bool
IceProxy::Test::MyDerivedClass::opDerived_async(const ::Test::AMI_MyDerivedClass_opDerivedPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception, &::Test::AMI_MyDerivedClass_opDerived::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDerived(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyDerivedClass::opDerived_async(const ::Test::AMI_MyDerivedClass_opDerivedPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception, &::Test::AMI_MyDerivedClass_opDerived::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDerived(&__ctx, __del);
    return __ar->sentSynchronously();
}

const ::std::string&
IceProxy::Test::MyDerivedClass::ice_staticId()
{
    return ::Test::MyDerivedClass::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MyDerivedClass::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MyDerivedClass);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MyDerivedClass::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MyDerivedClass);
}

::IceProxy::Ice::Object*
IceProxy::Test::MyDerivedClass::__newInstance() const
{
    return new MyDerivedClass;
}

void
IceDelegateM::Test::MyClass::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::delay(::Ice::Int ms, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__delay_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ms);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::opVoid(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opVoid_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Byte
IceDelegateM::Test::MyClass::opByte(::Ice::Byte p1, ::Ice::Byte p2, ::Ice::Byte& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByte_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Byte __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::MyClass::opBool(bool p1, bool p2, bool& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opBool_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateM::Test::MyClass::opShortIntLong(::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, ::Ice::Short& p4, ::Ice::Int& p5, ::Ice::Long& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntLong_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Double
IceDelegateM::Test::MyClass::opFloatDouble(::Ice::Float p1, ::Ice::Double p2, ::Ice::Float& p3, ::Ice::Double& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opFloatDouble_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Double __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::Test::MyClass::opString(const ::std::string& p1, const ::std::string& p2, ::std::string& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opString_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyEnum
IceDelegateM::Test::MyClass::opMyEnum(::Test::MyEnum p1, ::Test::MyEnum& p2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyEnum_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyEnum __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p2);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyClassPrx
IceDelegateM::Test::MyClass::opMyClass(const ::Test::MyClassPrx& p1, ::Test::MyClassPrx& p2, ::Test::MyClassPrx& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyClass_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyClassPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p2);
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::Structure
IceDelegateM::Test::MyClass::opStruct(const ::Test::Structure& p1, const ::Test::Structure& p2, ::Test::Structure& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStruct_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::Structure __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ByteS
IceDelegateM::Test::MyClass::opByteS(const ::Test::ByteS& p1, const ::Test::ByteS& p2, ::Test::ByteS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ByteS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::BoolS
IceDelegateM::Test::MyClass::opBoolS(const ::Test::BoolS& p1, const ::Test::BoolS& p2, ::Test::BoolS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opBoolS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::BoolS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::LongS
IceDelegateM::Test::MyClass::opShortIntLongS(const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, ::Test::ShortS& p4, ::Test::IntS& p5, ::Test::LongS& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntLongS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::LongS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::DoubleS
IceDelegateM::Test::MyClass::opFloatDoubleS(const ::Test::FloatS& p1, const ::Test::DoubleS& p2, ::Test::FloatS& p3, ::Test::DoubleS& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opFloatDoubleS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::DoubleS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringS
IceDelegateM::Test::MyClass::opStringS(const ::Test::StringS& p1, const ::Test::StringS& p2, ::Test::StringS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ByteSS
IceDelegateM::Test::MyClass::opByteSS(const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, ::Test::ByteSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ByteSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::BoolSS
IceDelegateM::Test::MyClass::opBoolSS(const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, ::Test::BoolSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opBoolSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::BoolSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::LongSS
IceDelegateM::Test::MyClass::opShortIntLongSS(const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, ::Test::ShortSS& p4, ::Test::IntSS& p5, ::Test::LongSS& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntLongSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::LongSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::DoubleSS
IceDelegateM::Test::MyClass::opFloatDoubleSS(const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, ::Test::FloatSS& p3, ::Test::DoubleSS& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opFloatDoubleSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::DoubleSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringSS
IceDelegateM::Test::MyClass::opStringSS(const ::Test::StringSS& p1, const ::Test::StringSS& p2, ::Test::StringSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringSSS
IceDelegateM::Test::MyClass::opStringSSS(const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, ::Test::StringSSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringSSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringSSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ByteBoolD
IceDelegateM::Test::MyClass::opByteBoolD(const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, ::Test::ByteBoolD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteBoolD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ByteBoolD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ShortIntD
IceDelegateM::Test::MyClass::opShortIntD(const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, ::Test::ShortIntD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ShortIntD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::LongFloatD
IceDelegateM::Test::MyClass::opLongFloatD(const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, ::Test::LongFloatD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opLongFloatD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::LongFloatD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringStringD
IceDelegateM::Test::MyClass::opStringStringD(const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, ::Test::StringStringD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringStringD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringStringD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringMyEnumD
IceDelegateM::Test::MyClass::opStringMyEnumD(const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, ::Test::StringMyEnumD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringMyEnumD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringMyEnumD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyEnumStringD
IceDelegateM::Test::MyClass::opMyEnumStringD(const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, ::Test::MyEnumStringD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyEnumStringD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyEnumStringD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyStructMyEnumD
IceDelegateM::Test::MyClass::opMyStructMyEnumD(const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, ::Test::MyStructMyEnumD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyStructMyEnumD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyStructMyEnumD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::IntS
IceDelegateM::Test::MyClass::opIntS(const ::Test::IntS& s, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opIntS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::IntS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::MyClass::opByteSOneway(const ::Test::ByteS& s, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteSOneway_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Context
IceDelegateM::Test::MyClass::opContext(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opContext_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Context __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::MyClass::opDoubleMarshaling(::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opDoubleMarshaling_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::opIdempotent(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opIdempotent_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::opNonmutating(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opNonmutating_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyDerivedClass::opDerived(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyDerivedClass__opDerived_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::Test::MyClass::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->shutdown(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__shutdown_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::MyClass::delay(::Ice::Int ms, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_ms, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ms(__p_ms)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->delay(_m_ms, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_ms;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__delay_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ms, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::MyClass::opVoid(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->opVoid(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opVoid_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Byte
IceDelegateD::Test::MyClass::opByte(::Ice::Byte p1, ::Ice::Byte p2, ::Ice::Byte& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Byte& __result, ::Ice::Byte __p_p1, ::Ice::Byte __p_p2, ::Ice::Byte& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opByte(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Byte& _result;
        ::Ice::Byte _m_p1;
        ::Ice::Byte _m_p2;
        ::Ice::Byte& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opByte_name, ::Ice::Normal, __context);
    ::Ice::Byte __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Test::MyClass::opBool(bool p1, bool p2, bool& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, bool __p_p1, bool __p_p2, bool& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opBool(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        bool _m_p1;
        bool _m_p2;
        bool& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opBool_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Long
IceDelegateD::Test::MyClass::opShortIntLong(::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, ::Ice::Short& p4, ::Ice::Int& p5, ::Ice::Long& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long& __result, ::Ice::Short __p_p1, ::Ice::Int __p_p2, ::Ice::Long __p_p3, ::Ice::Short& __p_p4, ::Ice::Int& __p_p5, ::Ice::Long& __p_p6, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3),
            _m_p4(__p_p4),
            _m_p5(__p_p5),
            _m_p6(__p_p6)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opShortIntLong(_m_p1, _m_p2, _m_p3, _m_p4, _m_p5, _m_p6, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Long& _result;
        ::Ice::Short _m_p1;
        ::Ice::Int _m_p2;
        ::Ice::Long _m_p3;
        ::Ice::Short& _m_p4;
        ::Ice::Int& _m_p5;
        ::Ice::Long& _m_p6;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opShortIntLong_name, ::Ice::Normal, __context);
    ::Ice::Long __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, p4, p5, p6, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Double
IceDelegateD::Test::MyClass::opFloatDouble(::Ice::Float p1, ::Ice::Double p2, ::Ice::Float& p3, ::Ice::Double& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Double& __result, ::Ice::Float __p_p1, ::Ice::Double __p_p2, ::Ice::Float& __p_p3, ::Ice::Double& __p_p4, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3),
            _m_p4(__p_p4)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFloatDouble(_m_p1, _m_p2, _m_p3, _m_p4, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Double& _result;
        ::Ice::Float _m_p1;
        ::Ice::Double _m_p2;
        ::Ice::Float& _m_p3;
        ::Ice::Double& _m_p4;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opFloatDouble_name, ::Ice::Normal, __context);
    ::Ice::Double __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, p4, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::Test::MyClass::opString(const ::std::string& p1, const ::std::string& p2, ::std::string& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_p1, const ::std::string& __p_p2, ::std::string& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opString(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_p1;
        const ::std::string& _m_p2;
        ::std::string& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opString_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MyEnum
IceDelegateD::Test::MyClass::opMyEnum(::Test::MyEnum p1, ::Test::MyEnum& p2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MyEnum& __result, ::Test::MyEnum __p_p1, ::Test::MyEnum& __p_p2, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opMyEnum(_m_p1, _m_p2, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MyEnum& _result;
        ::Test::MyEnum _m_p1;
        ::Test::MyEnum& _m_p2;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opMyEnum_name, ::Ice::Normal, __context);
    ::Test::MyEnum __result;
    try
    {
        _DirectI __direct(__result, p1, p2, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MyClassPrx
IceDelegateD::Test::MyClass::opMyClass(const ::Test::MyClassPrx& p1, ::Test::MyClassPrx& p2, ::Test::MyClassPrx& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MyClassPrx& __result, const ::Test::MyClassPrx& __p_p1, ::Test::MyClassPrx& __p_p2, ::Test::MyClassPrx& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opMyClass(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MyClassPrx& _result;
        const ::Test::MyClassPrx& _m_p1;
        ::Test::MyClassPrx& _m_p2;
        ::Test::MyClassPrx& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opMyClass_name, ::Ice::Normal, __context);
    ::Test::MyClassPrx __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::Structure
IceDelegateD::Test::MyClass::opStruct(const ::Test::Structure& p1, const ::Test::Structure& p2, ::Test::Structure& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::Structure& __result, const ::Test::Structure& __p_p1, const ::Test::Structure& __p_p2, ::Test::Structure& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStruct(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::Structure& _result;
        const ::Test::Structure& _m_p1;
        const ::Test::Structure& _m_p2;
        ::Test::Structure& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opStruct_name, ::Ice::Normal, __context);
    ::Test::Structure __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::ByteS
IceDelegateD::Test::MyClass::opByteS(const ::Test::ByteS& p1, const ::Test::ByteS& p2, ::Test::ByteS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::ByteS& __result, const ::Test::ByteS& __p_p1, const ::Test::ByteS& __p_p2, ::Test::ByteS& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opByteS(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::ByteS& _result;
        const ::Test::ByteS& _m_p1;
        const ::Test::ByteS& _m_p2;
        ::Test::ByteS& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opByteS_name, ::Ice::Normal, __context);
    ::Test::ByteS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::BoolS
IceDelegateD::Test::MyClass::opBoolS(const ::Test::BoolS& p1, const ::Test::BoolS& p2, ::Test::BoolS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::BoolS& __result, const ::Test::BoolS& __p_p1, const ::Test::BoolS& __p_p2, ::Test::BoolS& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opBoolS(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::BoolS& _result;
        const ::Test::BoolS& _m_p1;
        const ::Test::BoolS& _m_p2;
        ::Test::BoolS& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opBoolS_name, ::Ice::Normal, __context);
    ::Test::BoolS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::LongS
IceDelegateD::Test::MyClass::opShortIntLongS(const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, ::Test::ShortS& p4, ::Test::IntS& p5, ::Test::LongS& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::LongS& __result, const ::Test::ShortS& __p_p1, const ::Test::IntS& __p_p2, const ::Test::LongS& __p_p3, ::Test::ShortS& __p_p4, ::Test::IntS& __p_p5, ::Test::LongS& __p_p6, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3),
            _m_p4(__p_p4),
            _m_p5(__p_p5),
            _m_p6(__p_p6)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opShortIntLongS(_m_p1, _m_p2, _m_p3, _m_p4, _m_p5, _m_p6, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::LongS& _result;
        const ::Test::ShortS& _m_p1;
        const ::Test::IntS& _m_p2;
        const ::Test::LongS& _m_p3;
        ::Test::ShortS& _m_p4;
        ::Test::IntS& _m_p5;
        ::Test::LongS& _m_p6;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opShortIntLongS_name, ::Ice::Normal, __context);
    ::Test::LongS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, p4, p5, p6, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::DoubleS
IceDelegateD::Test::MyClass::opFloatDoubleS(const ::Test::FloatS& p1, const ::Test::DoubleS& p2, ::Test::FloatS& p3, ::Test::DoubleS& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::DoubleS& __result, const ::Test::FloatS& __p_p1, const ::Test::DoubleS& __p_p2, ::Test::FloatS& __p_p3, ::Test::DoubleS& __p_p4, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3),
            _m_p4(__p_p4)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFloatDoubleS(_m_p1, _m_p2, _m_p3, _m_p4, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::DoubleS& _result;
        const ::Test::FloatS& _m_p1;
        const ::Test::DoubleS& _m_p2;
        ::Test::FloatS& _m_p3;
        ::Test::DoubleS& _m_p4;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opFloatDoubleS_name, ::Ice::Normal, __context);
    ::Test::DoubleS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, p4, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::StringS
IceDelegateD::Test::MyClass::opStringS(const ::Test::StringS& p1, const ::Test::StringS& p2, ::Test::StringS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::StringS& __result, const ::Test::StringS& __p_p1, const ::Test::StringS& __p_p2, ::Test::StringS& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStringS(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::StringS& _result;
        const ::Test::StringS& _m_p1;
        const ::Test::StringS& _m_p2;
        ::Test::StringS& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opStringS_name, ::Ice::Normal, __context);
    ::Test::StringS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::ByteSS
IceDelegateD::Test::MyClass::opByteSS(const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, ::Test::ByteSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::ByteSS& __result, const ::Test::ByteSS& __p_p1, const ::Test::ByteSS& __p_p2, ::Test::ByteSS& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opByteSS(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::ByteSS& _result;
        const ::Test::ByteSS& _m_p1;
        const ::Test::ByteSS& _m_p2;
        ::Test::ByteSS& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opByteSS_name, ::Ice::Normal, __context);
    ::Test::ByteSS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::BoolSS
IceDelegateD::Test::MyClass::opBoolSS(const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, ::Test::BoolSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::BoolSS& __result, const ::Test::BoolSS& __p_p1, const ::Test::BoolSS& __p_p2, ::Test::BoolSS& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opBoolSS(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::BoolSS& _result;
        const ::Test::BoolSS& _m_p1;
        const ::Test::BoolSS& _m_p2;
        ::Test::BoolSS& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opBoolSS_name, ::Ice::Normal, __context);
    ::Test::BoolSS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::LongSS
IceDelegateD::Test::MyClass::opShortIntLongSS(const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, ::Test::ShortSS& p4, ::Test::IntSS& p5, ::Test::LongSS& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::LongSS& __result, const ::Test::ShortSS& __p_p1, const ::Test::IntSS& __p_p2, const ::Test::LongSS& __p_p3, ::Test::ShortSS& __p_p4, ::Test::IntSS& __p_p5, ::Test::LongSS& __p_p6, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3),
            _m_p4(__p_p4),
            _m_p5(__p_p5),
            _m_p6(__p_p6)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opShortIntLongSS(_m_p1, _m_p2, _m_p3, _m_p4, _m_p5, _m_p6, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::LongSS& _result;
        const ::Test::ShortSS& _m_p1;
        const ::Test::IntSS& _m_p2;
        const ::Test::LongSS& _m_p3;
        ::Test::ShortSS& _m_p4;
        ::Test::IntSS& _m_p5;
        ::Test::LongSS& _m_p6;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opShortIntLongSS_name, ::Ice::Normal, __context);
    ::Test::LongSS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, p4, p5, p6, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::DoubleSS
IceDelegateD::Test::MyClass::opFloatDoubleSS(const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, ::Test::FloatSS& p3, ::Test::DoubleSS& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::DoubleSS& __result, const ::Test::FloatSS& __p_p1, const ::Test::DoubleSS& __p_p2, ::Test::FloatSS& __p_p3, ::Test::DoubleSS& __p_p4, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3),
            _m_p4(__p_p4)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opFloatDoubleSS(_m_p1, _m_p2, _m_p3, _m_p4, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::DoubleSS& _result;
        const ::Test::FloatSS& _m_p1;
        const ::Test::DoubleSS& _m_p2;
        ::Test::FloatSS& _m_p3;
        ::Test::DoubleSS& _m_p4;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opFloatDoubleSS_name, ::Ice::Normal, __context);
    ::Test::DoubleSS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, p4, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::StringSS
IceDelegateD::Test::MyClass::opStringSS(const ::Test::StringSS& p1, const ::Test::StringSS& p2, ::Test::StringSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::StringSS& __result, const ::Test::StringSS& __p_p1, const ::Test::StringSS& __p_p2, ::Test::StringSS& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStringSS(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::StringSS& _result;
        const ::Test::StringSS& _m_p1;
        const ::Test::StringSS& _m_p2;
        ::Test::StringSS& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opStringSS_name, ::Ice::Normal, __context);
    ::Test::StringSS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::StringSSS
IceDelegateD::Test::MyClass::opStringSSS(const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, ::Test::StringSSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::StringSSS& __result, const ::Test::StringSSS& __p_p1, const ::Test::StringSSS& __p_p2, ::Test::StringSSS& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStringSSS(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::StringSSS& _result;
        const ::Test::StringSSS& _m_p1;
        const ::Test::StringSSS& _m_p2;
        ::Test::StringSSS& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opStringSSS_name, ::Ice::Normal, __context);
    ::Test::StringSSS __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::ByteBoolD
IceDelegateD::Test::MyClass::opByteBoolD(const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, ::Test::ByteBoolD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::ByteBoolD& __result, const ::Test::ByteBoolD& __p_p1, const ::Test::ByteBoolD& __p_p2, ::Test::ByteBoolD& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opByteBoolD(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::ByteBoolD& _result;
        const ::Test::ByteBoolD& _m_p1;
        const ::Test::ByteBoolD& _m_p2;
        ::Test::ByteBoolD& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opByteBoolD_name, ::Ice::Normal, __context);
    ::Test::ByteBoolD __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::ShortIntD
IceDelegateD::Test::MyClass::opShortIntD(const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, ::Test::ShortIntD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::ShortIntD& __result, const ::Test::ShortIntD& __p_p1, const ::Test::ShortIntD& __p_p2, ::Test::ShortIntD& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opShortIntD(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::ShortIntD& _result;
        const ::Test::ShortIntD& _m_p1;
        const ::Test::ShortIntD& _m_p2;
        ::Test::ShortIntD& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opShortIntD_name, ::Ice::Normal, __context);
    ::Test::ShortIntD __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::LongFloatD
IceDelegateD::Test::MyClass::opLongFloatD(const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, ::Test::LongFloatD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::LongFloatD& __result, const ::Test::LongFloatD& __p_p1, const ::Test::LongFloatD& __p_p2, ::Test::LongFloatD& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opLongFloatD(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::LongFloatD& _result;
        const ::Test::LongFloatD& _m_p1;
        const ::Test::LongFloatD& _m_p2;
        ::Test::LongFloatD& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opLongFloatD_name, ::Ice::Normal, __context);
    ::Test::LongFloatD __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::StringStringD
IceDelegateD::Test::MyClass::opStringStringD(const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, ::Test::StringStringD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::StringStringD& __result, const ::Test::StringStringD& __p_p1, const ::Test::StringStringD& __p_p2, ::Test::StringStringD& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStringStringD(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::StringStringD& _result;
        const ::Test::StringStringD& _m_p1;
        const ::Test::StringStringD& _m_p2;
        ::Test::StringStringD& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opStringStringD_name, ::Ice::Normal, __context);
    ::Test::StringStringD __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::StringMyEnumD
IceDelegateD::Test::MyClass::opStringMyEnumD(const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, ::Test::StringMyEnumD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::StringMyEnumD& __result, const ::Test::StringMyEnumD& __p_p1, const ::Test::StringMyEnumD& __p_p2, ::Test::StringMyEnumD& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opStringMyEnumD(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::StringMyEnumD& _result;
        const ::Test::StringMyEnumD& _m_p1;
        const ::Test::StringMyEnumD& _m_p2;
        ::Test::StringMyEnumD& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opStringMyEnumD_name, ::Ice::Normal, __context);
    ::Test::StringMyEnumD __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MyEnumStringD
IceDelegateD::Test::MyClass::opMyEnumStringD(const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, ::Test::MyEnumStringD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MyEnumStringD& __result, const ::Test::MyEnumStringD& __p_p1, const ::Test::MyEnumStringD& __p_p2, ::Test::MyEnumStringD& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opMyEnumStringD(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MyEnumStringD& _result;
        const ::Test::MyEnumStringD& _m_p1;
        const ::Test::MyEnumStringD& _m_p2;
        ::Test::MyEnumStringD& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opMyEnumStringD_name, ::Ice::Normal, __context);
    ::Test::MyEnumStringD __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MyStructMyEnumD
IceDelegateD::Test::MyClass::opMyStructMyEnumD(const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, ::Test::MyStructMyEnumD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MyStructMyEnumD& __result, const ::Test::MyStructMyEnumD& __p_p1, const ::Test::MyStructMyEnumD& __p_p2, ::Test::MyStructMyEnumD& __p_p3, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p1(__p_p1),
            _m_p2(__p_p2),
            _m_p3(__p_p3)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opMyStructMyEnumD(_m_p1, _m_p2, _m_p3, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MyStructMyEnumD& _result;
        const ::Test::MyStructMyEnumD& _m_p1;
        const ::Test::MyStructMyEnumD& _m_p2;
        ::Test::MyStructMyEnumD& _m_p3;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opMyStructMyEnumD_name, ::Ice::Normal, __context);
    ::Test::MyStructMyEnumD __result;
    try
    {
        _DirectI __direct(__result, p1, p2, p3, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::IntS
IceDelegateD::Test::MyClass::opIntS(const ::Test::IntS& s, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::IntS& __result, const ::Test::IntS& __p_s, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_s(__p_s)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opIntS(_m_s, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::IntS& _result;
        const ::Test::IntS& _m_s;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opIntS_name, ::Ice::Normal, __context);
    ::Test::IntS __result;
    try
    {
        _DirectI __direct(__result, s, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::MyClass::opByteSOneway(const ::Test::ByteS& s, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Test::ByteS& __p_s, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_s(__p_s)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->opByteSOneway(_m_s, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Test::ByteS& _m_s;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opByteSOneway_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(s, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Context
IceDelegateD::Test::MyClass::opContext(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Context& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->opContext(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Context& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opContext_name, ::Ice::Normal, __context);
    ::Ice::Context __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::MyClass::opDoubleMarshaling(::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Double __p_p1, const ::Test::DoubleS& __p_p2, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_p1(__p_p1),
            _m_p2(__p_p2)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->opDoubleMarshaling(_m_p1, _m_p2, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Double _m_p1;
        const ::Test::DoubleS& _m_p2;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opDoubleMarshaling_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(p1, p2, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::MyClass::opIdempotent(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->opIdempotent(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opIdempotent_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::MyClass::opNonmutating(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyClass* servant = dynamic_cast< ::Test::MyClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->opNonmutating(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyClass__opNonmutating_name, ::Ice::Nonmutating, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Test::MyDerivedClass::opDerived(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MyDerivedClass* servant = dynamic_cast< ::Test::MyDerivedClass*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->opDerived(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MyDerivedClass__opDerived_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* Test::upCast(::Test::MyClass* p) { return p; }
::Ice::ObjectPtr
Test::MyClass::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};

}

bool
Test::MyClass::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MyClass_ids, __Test__MyClass_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MyClass_ids[0], &__Test__MyClass_ids[2]);
}

const ::std::string&
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return __Test__MyClass_ids[1];
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    return __Test__MyClass_ids[1];
}

::Ice::DispatchStatus
Test::MyClass::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___delay(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int ms;
    __is->read(ms);
    __inS.endReadParams();
    delay(ms, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opVoid(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    opVoid(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opByte(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Byte p1;
    ::Ice::Byte p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Ice::Byte p3;
    ::Ice::Byte __ret = opByte(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opBool(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool p1;
    bool p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    bool p3;
    bool __ret = opBool(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntLong(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Short p1;
    ::Ice::Int p2;
    ::Ice::Long p3;
    __is->read(p1);
    __is->read(p2);
    __is->read(p3);
    __inS.endReadParams();
    ::Ice::Short p4;
    ::Ice::Int p5;
    ::Ice::Long p6;
    ::Ice::Long __ret = opShortIntLong(p1, p2, p3, p4, p5, p6, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p4);
    __os->write(p5);
    __os->write(p6);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opFloatDouble(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float p1;
    ::Ice::Double p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Ice::Float p3;
    ::Ice::Double p4;
    ::Ice::Double __ret = opFloatDouble(p1, p2, p3, p4, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(p4);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opString(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string p1;
    ::std::string p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::std::string p3;
    ::std::string __ret = opString(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opMyEnum(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyEnum p1;
    __is->read(p1);
    __inS.endReadParams();
    ::Test::MyEnum p2;
    ::Test::MyEnum __ret = opMyEnum(p1, p2, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p2);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opMyClass(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyClassPrx p1;
    __is->read(p1);
    __inS.endReadParams();
    ::Test::MyClassPrx p2;
    ::Test::MyClassPrx p3;
    ::Test::MyClassPrx __ret = opMyClass(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p2);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opStruct(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::Structure p1;
    ::Test::Structure p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::Structure p3;
    ::Test::Structure __ret = opStruct(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opByteS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteS p1;
    ::Test::ByteS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::ByteS p3;
    ::Test::ByteS __ret = opByteS(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opBoolS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::BoolS p1;
    ::Test::BoolS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::BoolS p3;
    ::Test::BoolS __ret = opBoolS(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntLongS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ShortS p1;
    ::Test::IntS p2;
    ::Test::LongS p3;
    __is->read(p1);
    __is->read(p2);
    __is->read(p3);
    __inS.endReadParams();
    ::Test::ShortS p4;
    ::Test::IntS p5;
    ::Test::LongS p6;
    ::Test::LongS __ret = opShortIntLongS(p1, p2, p3, p4, p5, p6, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p4);
    __os->write(p5);
    __os->write(p6);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opFloatDoubleS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::FloatS p1;
    ::Test::DoubleS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::FloatS p3;
    ::Test::DoubleS p4;
    ::Test::DoubleS __ret = opFloatDoubleS(p1, p2, p3, p4, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(p4);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opStringS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringS p1;
    ::Test::StringS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::StringS p3;
    ::Test::StringS __ret = opStringS(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opByteSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteSS p1;
    ::Test::ByteSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::ByteSS p3;
    ::Test::ByteSS __ret = opByteSS(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opBoolSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::BoolSS p1;
    ::Test::BoolSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::BoolSS p3;
    ::Test::BoolSS __ret = opBoolSS(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntLongSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ShortSS p1;
    ::Test::IntSS p2;
    ::Test::LongSS p3;
    __is->read(p1);
    __is->read(p2);
    __is->read(p3);
    __inS.endReadParams();
    ::Test::ShortSS p4;
    ::Test::IntSS p5;
    ::Test::LongSS p6;
    ::Test::LongSS __ret = opShortIntLongSS(p1, p2, p3, p4, p5, p6, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p4);
    __os->write(p5);
    __os->write(p6);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opFloatDoubleSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::FloatSS p1;
    ::Test::DoubleSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::FloatSS p3;
    ::Test::DoubleSS p4;
    ::Test::DoubleSS __ret = opFloatDoubleSS(p1, p2, p3, p4, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(p4);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opStringSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringSS p1;
    ::Test::StringSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::StringSS p3;
    ::Test::StringSS __ret = opStringSS(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opStringSSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringSSS p1;
    ::Test::StringSSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::StringSSS p3;
    ::Test::StringSSS __ret = opStringSSS(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opByteBoolD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteBoolD p1;
    ::Test::ByteBoolD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::ByteBoolD p3;
    ::Test::ByteBoolD __ret = opByteBoolD(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ShortIntD p1;
    ::Test::ShortIntD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::ShortIntD p3;
    ::Test::ShortIntD __ret = opShortIntD(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opLongFloatD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::LongFloatD p1;
    ::Test::LongFloatD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::LongFloatD p3;
    ::Test::LongFloatD __ret = opLongFloatD(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opStringStringD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringStringD p1;
    ::Test::StringStringD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::StringStringD p3;
    ::Test::StringStringD __ret = opStringStringD(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opStringMyEnumD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringMyEnumD p1;
    ::Test::StringMyEnumD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::StringMyEnumD p3;
    ::Test::StringMyEnumD __ret = opStringMyEnumD(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opMyEnumStringD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyEnumStringD p1;
    ::Test::MyEnumStringD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::MyEnumStringD p3;
    ::Test::MyEnumStringD __ret = opMyEnumStringD(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opMyStructMyEnumD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyStructMyEnumD p1;
    ::Test::MyStructMyEnumD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::MyStructMyEnumD p3;
    ::Test::MyStructMyEnumD __ret = opMyStructMyEnumD(p1, p2, p3, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(p3);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opIntS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::IntS s;
    __is->read(s);
    __inS.endReadParams();
    ::Test::IntS __ret = opIntS(s, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opByteSOneway(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteS s;
    __is->read(s);
    __inS.endReadParams();
    opByteSOneway(s, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opContext(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Context __ret = opContext(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opDoubleMarshaling(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Double p1;
    ::Test::DoubleS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    opDoubleMarshaling(p1, p2, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opIdempotent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    opIdempotent(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::MyClass::___opNonmutating(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    opNonmutating(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MyClass_all[] =
{
    "delay",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByteBoolD",
    "opByteS",
    "opByteSOneway",
    "opByteSS",
    "opContext",
    "opDoubleMarshaling",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opIntS",
    "opLongFloatD",
    "opMyClass",
    "opMyEnum",
    "opMyEnumStringD",
    "opMyStructMyEnumD",
    "opNonmutating",
    "opShortIntD",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opString",
    "opStringMyEnumD",
    "opStringS",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStruct",
    "opVoid",
    "shutdown"
};

}

::Ice::DispatchStatus
Test::MyClass::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MyClass_all, __Test__MyClass_all + 39, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MyClass_all)
    {
        case 0:
        {
            return ___delay(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___opBool(in, current);
        }
        case 6:
        {
            return ___opBoolS(in, current);
        }
        case 7:
        {
            return ___opBoolSS(in, current);
        }
        case 8:
        {
            return ___opByte(in, current);
        }
        case 9:
        {
            return ___opByteBoolD(in, current);
        }
        case 10:
        {
            return ___opByteS(in, current);
        }
        case 11:
        {
            return ___opByteSOneway(in, current);
        }
        case 12:
        {
            return ___opByteSS(in, current);
        }
        case 13:
        {
            return ___opContext(in, current);
        }
        case 14:
        {
            return ___opDoubleMarshaling(in, current);
        }
        case 15:
        {
            return ___opFloatDouble(in, current);
        }
        case 16:
        {
            return ___opFloatDoubleS(in, current);
        }
        case 17:
        {
            return ___opFloatDoubleSS(in, current);
        }
        case 18:
        {
            return ___opIdempotent(in, current);
        }
        case 19:
        {
            return ___opIntS(in, current);
        }
        case 20:
        {
            return ___opLongFloatD(in, current);
        }
        case 21:
        {
            return ___opMyClass(in, current);
        }
        case 22:
        {
            return ___opMyEnum(in, current);
        }
        case 23:
        {
            return ___opMyEnumStringD(in, current);
        }
        case 24:
        {
            return ___opMyStructMyEnumD(in, current);
        }
        case 25:
        {
            return ___opNonmutating(in, current);
        }
        case 26:
        {
            return ___opShortIntD(in, current);
        }
        case 27:
        {
            return ___opShortIntLong(in, current);
        }
        case 28:
        {
            return ___opShortIntLongS(in, current);
        }
        case 29:
        {
            return ___opShortIntLongSS(in, current);
        }
        case 30:
        {
            return ___opString(in, current);
        }
        case 31:
        {
            return ___opStringMyEnumD(in, current);
        }
        case 32:
        {
            return ___opStringS(in, current);
        }
        case 33:
        {
            return ___opStringSS(in, current);
        }
        case 34:
        {
            return ___opStringSSS(in, current);
        }
        case 35:
        {
            return ___opStringStringD(in, current);
        }
        case 36:
        {
            return ___opStruct(in, current);
        }
        case 37:
        {
            return ___opVoid(in, current);
        }
        case 38:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MyClass::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MyClass::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(MyClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MyClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MyClass::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::MyDerivedClass* p) { return p; }
::Ice::ObjectPtr
Test::MyDerivedClass::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MyDerivedClass_ids[3] =
{
    "::Ice::Object",
    "::Test::MyClass",
    "::Test::MyDerivedClass"
};

}

bool
Test::MyDerivedClass::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MyDerivedClass_ids, __Test__MyDerivedClass_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MyDerivedClass_ids[0], &__Test__MyDerivedClass_ids[3]);
}

const ::std::string&
Test::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return __Test__MyDerivedClass_ids[2];
}

const ::std::string&
Test::MyDerivedClass::ice_staticId()
{
    return __Test__MyDerivedClass_ids[2];
}

::Ice::DispatchStatus
Test::MyDerivedClass::___opDerived(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    opDerived(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MyDerivedClass_all[] =
{
    "delay",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByteBoolD",
    "opByteS",
    "opByteSOneway",
    "opByteSS",
    "opContext",
    "opDerived",
    "opDoubleMarshaling",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opIntS",
    "opLongFloatD",
    "opMyClass",
    "opMyEnum",
    "opMyEnumStringD",
    "opMyStructMyEnumD",
    "opNonmutating",
    "opShortIntD",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opString",
    "opStringMyEnumD",
    "opStringS",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStruct",
    "opVoid",
    "shutdown"
};

}

::Ice::DispatchStatus
Test::MyDerivedClass::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MyDerivedClass_all, __Test__MyDerivedClass_all + 40, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MyDerivedClass_all)
    {
        case 0:
        {
            return ___delay(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___opBool(in, current);
        }
        case 6:
        {
            return ___opBoolS(in, current);
        }
        case 7:
        {
            return ___opBoolSS(in, current);
        }
        case 8:
        {
            return ___opByte(in, current);
        }
        case 9:
        {
            return ___opByteBoolD(in, current);
        }
        case 10:
        {
            return ___opByteS(in, current);
        }
        case 11:
        {
            return ___opByteSOneway(in, current);
        }
        case 12:
        {
            return ___opByteSS(in, current);
        }
        case 13:
        {
            return ___opContext(in, current);
        }
        case 14:
        {
            return ___opDerived(in, current);
        }
        case 15:
        {
            return ___opDoubleMarshaling(in, current);
        }
        case 16:
        {
            return ___opFloatDouble(in, current);
        }
        case 17:
        {
            return ___opFloatDoubleS(in, current);
        }
        case 18:
        {
            return ___opFloatDoubleSS(in, current);
        }
        case 19:
        {
            return ___opIdempotent(in, current);
        }
        case 20:
        {
            return ___opIntS(in, current);
        }
        case 21:
        {
            return ___opLongFloatD(in, current);
        }
        case 22:
        {
            return ___opMyClass(in, current);
        }
        case 23:
        {
            return ___opMyEnum(in, current);
        }
        case 24:
        {
            return ___opMyEnumStringD(in, current);
        }
        case 25:
        {
            return ___opMyStructMyEnumD(in, current);
        }
        case 26:
        {
            return ___opNonmutating(in, current);
        }
        case 27:
        {
            return ___opShortIntD(in, current);
        }
        case 28:
        {
            return ___opShortIntLong(in, current);
        }
        case 29:
        {
            return ___opShortIntLongS(in, current);
        }
        case 30:
        {
            return ___opShortIntLongSS(in, current);
        }
        case 31:
        {
            return ___opString(in, current);
        }
        case 32:
        {
            return ___opStringMyEnumD(in, current);
        }
        case 33:
        {
            return ___opStringS(in, current);
        }
        case 34:
        {
            return ___opStringSS(in, current);
        }
        case 35:
        {
            return ___opStringSSS(in, current);
        }
        case 36:
        {
            return ___opStringStringD(in, current);
        }
        case 37:
        {
            return ___opStruct(in, current);
        }
        case 38:
        {
            return ___opVoid(in, current);
        }
        case 39:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MyDerivedClass::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::Test::MyClass::__writeImpl(__os);
}

void
Test::MyDerivedClass::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Test::MyClass::__readImpl(__is);
}

void 
Test::__patch(MyDerivedClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MyDerivedClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MyDerivedClass::ice_staticId(), v);
    }
}
