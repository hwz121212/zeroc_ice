// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <TestAMD.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Test__MyClass__shutdown_name = "shutdown";

const ::std::string __Test__MyClass__delay_name = "delay";

const ::std::string __Test__MyClass__opVoid_name = "opVoid";

const ::std::string __Test__MyClass__opByte_name = "opByte";

const ::std::string __Test__MyClass__opBool_name = "opBool";

const ::std::string __Test__MyClass__opShortIntLong_name = "opShortIntLong";

const ::std::string __Test__MyClass__opFloatDouble_name = "opFloatDouble";

const ::std::string __Test__MyClass__opString_name = "opString";

const ::std::string __Test__MyClass__opMyEnum_name = "opMyEnum";

const ::std::string __Test__MyClass__opMyClass_name = "opMyClass";

const ::std::string __Test__MyClass__opStruct_name = "opStruct";

const ::std::string __Test__MyClass__opByteS_name = "opByteS";

const ::std::string __Test__MyClass__opBoolS_name = "opBoolS";

const ::std::string __Test__MyClass__opShortIntLongS_name = "opShortIntLongS";

const ::std::string __Test__MyClass__opFloatDoubleS_name = "opFloatDoubleS";

const ::std::string __Test__MyClass__opStringS_name = "opStringS";

const ::std::string __Test__MyClass__opByteSS_name = "opByteSS";

const ::std::string __Test__MyClass__opBoolSS_name = "opBoolSS";

const ::std::string __Test__MyClass__opShortIntLongSS_name = "opShortIntLongSS";

const ::std::string __Test__MyClass__opFloatDoubleSS_name = "opFloatDoubleSS";

const ::std::string __Test__MyClass__opStringSS_name = "opStringSS";

const ::std::string __Test__MyClass__opStringSSS_name = "opStringSSS";

const ::std::string __Test__MyClass__opByteBoolD_name = "opByteBoolD";

const ::std::string __Test__MyClass__opShortIntD_name = "opShortIntD";

const ::std::string __Test__MyClass__opLongFloatD_name = "opLongFloatD";

const ::std::string __Test__MyClass__opStringStringD_name = "opStringStringD";

const ::std::string __Test__MyClass__opStringMyEnumD_name = "opStringMyEnumD";

const ::std::string __Test__MyClass__opMyEnumStringD_name = "opMyEnumStringD";

const ::std::string __Test__MyClass__opMyStructMyEnumD_name = "opMyStructMyEnumD";

const ::std::string __Test__MyClass__opIntS_name = "opIntS";

const ::std::string __Test__MyClass__opByteSOneway_name = "opByteSOneway";

const ::std::string __Test__MyClass__opContext_name = "opContext";

const ::std::string __Test__MyClass__opDoubleMarshaling_name = "opDoubleMarshaling";

const ::std::string __Test__MyClass__opIdempotent_name = "opIdempotent";

const ::std::string __Test__MyClass__opNonmutating_name = "opNonmutating";

const ::std::string __Test__MyDerivedClass__opDerived_name = "opDerived";

}

namespace Ice
{
}

IceAsync::Test::AMD_MyClass_shutdown::AMD_MyClass_shutdown(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_shutdown::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::Test::AMD_MyClass_delay::AMD_MyClass_delay(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_delay::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opVoid::AMD_MyClass_opVoid(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opVoid::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opByte::AMD_MyClass_opByte(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByte::ice_response(::Ice::Byte __ret, ::Ice::Byte p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opBool::AMD_MyClass_opBool(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opBool::ice_response(bool __ret, bool p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opShortIntLong::AMD_MyClass_opShortIntLong(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntLong::ice_response(::Ice::Long __ret, ::Ice::Short p4, ::Ice::Int p5, ::Ice::Long p6)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p4);
            __os->write(p5);
            __os->write(p6);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opFloatDouble::AMD_MyClass_opFloatDouble(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opFloatDouble::ice_response(::Ice::Double __ret, ::Ice::Float p3, ::Ice::Double p4)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(p4);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opString::AMD_MyClass_opString(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opString::ice_response(const ::std::string& __ret, const ::std::string& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opMyEnum::AMD_MyClass_opMyEnum(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyEnum::ice_response(::Test::MyEnum __ret, ::Test::MyEnum p2)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p2);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opMyClass::AMD_MyClass_opMyClass(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyClass::ice_response(const ::Test::MyClassPrx& __ret, const ::Test::MyClassPrx& p2, const ::Test::MyClassPrx& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p2);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opStruct::AMD_MyClass_opStruct(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStruct::ice_response(const ::Test::Structure& __ret, const ::Test::Structure& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opByteS::AMD_MyClass_opByteS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteS::ice_response(const ::Test::ByteS& __ret, const ::Test::ByteS& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opBoolS::AMD_MyClass_opBoolS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opBoolS::ice_response(const ::Test::BoolS& __ret, const ::Test::BoolS& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opShortIntLongS::AMD_MyClass_opShortIntLongS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntLongS::ice_response(const ::Test::LongS& __ret, const ::Test::ShortS& p4, const ::Test::IntS& p5, const ::Test::LongS& p6)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p4);
            __os->write(p5);
            __os->write(p6);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opFloatDoubleS::AMD_MyClass_opFloatDoubleS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opFloatDoubleS::ice_response(const ::Test::DoubleS& __ret, const ::Test::FloatS& p3, const ::Test::DoubleS& p4)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(p4);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opStringS::AMD_MyClass_opStringS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringS::ice_response(const ::Test::StringS& __ret, const ::Test::StringS& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opByteSS::AMD_MyClass_opByteSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteSS::ice_response(const ::Test::ByteSS& __ret, const ::Test::ByteSS& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opBoolSS::AMD_MyClass_opBoolSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opBoolSS::ice_response(const ::Test::BoolSS& __ret, const ::Test::BoolSS& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opShortIntLongSS::AMD_MyClass_opShortIntLongSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntLongSS::ice_response(const ::Test::LongSS& __ret, const ::Test::ShortSS& p4, const ::Test::IntSS& p5, const ::Test::LongSS& p6)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p4);
            __os->write(p5);
            __os->write(p6);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opFloatDoubleSS::AMD_MyClass_opFloatDoubleSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opFloatDoubleSS::ice_response(const ::Test::DoubleSS& __ret, const ::Test::FloatSS& p3, const ::Test::DoubleSS& p4)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(p4);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opStringSS::AMD_MyClass_opStringSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringSS::ice_response(const ::Test::StringSS& __ret, const ::Test::StringSS& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opStringSSS::AMD_MyClass_opStringSSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringSSS::ice_response(const ::Test::StringSSS& __ret, const ::Test::StringSSS& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opByteBoolD::AMD_MyClass_opByteBoolD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteBoolD::ice_response(const ::Test::ByteBoolD& __ret, const ::Test::ByteBoolD& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opShortIntD::AMD_MyClass_opShortIntD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntD::ice_response(const ::Test::ShortIntD& __ret, const ::Test::ShortIntD& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opLongFloatD::AMD_MyClass_opLongFloatD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opLongFloatD::ice_response(const ::Test::LongFloatD& __ret, const ::Test::LongFloatD& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opStringStringD::AMD_MyClass_opStringStringD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringStringD::ice_response(const ::Test::StringStringD& __ret, const ::Test::StringStringD& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opStringMyEnumD::AMD_MyClass_opStringMyEnumD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringMyEnumD::ice_response(const ::Test::StringMyEnumD& __ret, const ::Test::StringMyEnumD& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opMyEnumStringD::AMD_MyClass_opMyEnumStringD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyEnumStringD::ice_response(const ::Test::MyEnumStringD& __ret, const ::Test::MyEnumStringD& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opMyStructMyEnumD::AMD_MyClass_opMyStructMyEnumD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyStructMyEnumD::ice_response(const ::Test::MyStructMyEnumD& __ret, const ::Test::MyStructMyEnumD& p3)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(p3);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opIntS::AMD_MyClass_opIntS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opIntS::ice_response(const ::Test::IntS& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opByteSOneway::AMD_MyClass_opByteSOneway(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteSOneway::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opContext::AMD_MyClass_opContext(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opContext::ice_response(const ::Ice::Context& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opDoubleMarshaling::AMD_MyClass_opDoubleMarshaling(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opDoubleMarshaling::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opIdempotent::AMD_MyClass_opIdempotent(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opIdempotent::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::Test::AMD_MyClass_opNonmutating::AMD_MyClass_opNonmutating(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opNonmutating::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::Test::AMD_MyDerivedClass_opDerived::AMD_MyDerivedClass_opDerived(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyDerivedClass_opDerived::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MyClass* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MyClass;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::MyClass::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__shutdown_name);
}

bool
IceProxy::Test::MyClass::shutdown_async(const ::Test::AMI_MyClass_shutdownPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception, &::Test::AMI_MyClass_shutdown::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_shutdown(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::shutdown_async(const ::Test::AMI_MyClass_shutdownPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception, &::Test::AMI_MyClass_shutdown::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_shutdown(__cb, &::Test::AMI_MyClass_shutdown::__response, &::Test::AMI_MyClass_shutdown::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_shutdown(&__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::delay(::Ice::Int ms, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__delay_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->delay(ms, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_delay(::Ice::Int ms, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__delay_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__delay_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ms);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_delay(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__delay_name);
}

bool
IceProxy::Test::MyClass::delay_async(const ::Test::AMI_MyClass_delayPtr& __cb, ::Ice::Int ms)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception, &::Test::AMI_MyClass_delay::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_delay(ms, 0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::delay_async(const ::Test::AMI_MyClass_delayPtr& __cb, ::Ice::Int ms, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception, &::Test::AMI_MyClass_delay::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_delay(__cb, &::Test::AMI_MyClass_delay::__response, &::Test::AMI_MyClass_delay::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_delay(ms, &__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opVoid(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opVoid_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opVoid(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opVoid(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opVoid_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opVoid_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opVoid(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opVoid_name);
}

bool
IceProxy::Test::MyClass::opVoid_async(const ::Test::AMI_MyClass_opVoidPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception, &::Test::AMI_MyClass_opVoid::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opVoid(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opVoid_async(const ::Test::AMI_MyClass_opVoidPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception, &::Test::AMI_MyClass_opVoid::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opVoid(__cb, &::Test::AMI_MyClass_opVoid::__response, &::Test::AMI_MyClass_opVoid::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opVoid(&__ctx, __del);
    return __ar->sentSynchronously();
}

::Ice::Byte
IceProxy::Test::MyClass::opByte(::Ice::Byte p1, ::Ice::Byte p2, ::Ice::Byte& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByte_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByte_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByte(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByte(::Ice::Byte p1, ::Ice::Byte p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByte_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByte_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByte_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Byte
IceProxy::Test::MyClass::end_opByte(::Ice::Byte& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByte_name);
    ::Ice::Byte __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByte_async(const ::Test::AMI_MyClass_opBytePtr& __cb, ::Ice::Byte p1, ::Ice::Byte p2)
{
    ::Test::Callback_MyClass_opBytePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception, &::Test::AMI_MyClass_opByte::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByte_name);
        __ar = begin_opByte(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByte_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByte_async(const ::Test::AMI_MyClass_opBytePtr& __cb, ::Ice::Byte p1, ::Ice::Byte p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBytePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception, &::Test::AMI_MyClass_opByte::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByte(__cb, &::Test::AMI_MyClass_opByte::__response, &::Test::AMI_MyClass_opByte::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByte_name);
        __ar = begin_opByte(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByte_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBool(bool p1, bool p2, bool& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opBool_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opBool_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opBool(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opBool(bool p1, bool p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opBool_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBool_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opBool_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Test::MyClass::end_opBool(bool& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opBool_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opBool_async(const ::Test::AMI_MyClass_opBoolPtr& __cb, bool p1, bool p2)
{
    ::Test::Callback_MyClass_opBoolPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception, &::Test::AMI_MyClass_opBool::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBool_name);
        __ar = begin_opBool(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBool_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBool_async(const ::Test::AMI_MyClass_opBoolPtr& __cb, bool p1, bool p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBoolPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception, &::Test::AMI_MyClass_opBool::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBool(__cb, &::Test::AMI_MyClass_opBool::__response, &::Test::AMI_MyClass_opBool::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBool_name);
        __ar = begin_opBool(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBool_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Ice::Long
IceProxy::Test::MyClass::opShortIntLong(::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, ::Ice::Short& p4, ::Ice::Int& p5, ::Ice::Long& p6, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntLong_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntLong_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntLong(p1, p2, p3, p4, p5, p6, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntLong(::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntLong_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLong_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntLong_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::Test::MyClass::end_opShortIntLong(::Ice::Short& p4, ::Ice::Int& p5, ::Ice::Long& p6, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntLong_name);
    ::Ice::Long __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntLong_async(const ::Test::AMI_MyClass_opShortIntLongPtr& __cb, ::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3)
{
    ::Test::Callback_MyClass_opShortIntLongPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception, &::Test::AMI_MyClass_opShortIntLong::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLong_name);
        __ar = begin_opShortIntLong(p1, p2, p3, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLong_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntLong_async(const ::Test::AMI_MyClass_opShortIntLongPtr& __cb, ::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntLongPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception, &::Test::AMI_MyClass_opShortIntLong::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLong(__cb, &::Test::AMI_MyClass_opShortIntLong::__response, &::Test::AMI_MyClass_opShortIntLong::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLong_name);
        __ar = begin_opShortIntLong(p1, p2, p3, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLong_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Ice::Double
IceProxy::Test::MyClass::opFloatDouble(::Ice::Float p1, ::Ice::Double p2, ::Ice::Float& p3, ::Ice::Double& p4, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opFloatDouble_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opFloatDouble_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opFloatDouble(p1, p2, p3, p4, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opFloatDouble(::Ice::Float p1, ::Ice::Double p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opFloatDouble_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDouble_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opFloatDouble_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Double
IceProxy::Test::MyClass::end_opFloatDouble(::Ice::Float& p3, ::Ice::Double& p4, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opFloatDouble_name);
    ::Ice::Double __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opFloatDouble_async(const ::Test::AMI_MyClass_opFloatDoublePtr& __cb, ::Ice::Float p1, ::Ice::Double p2)
{
    ::Test::Callback_MyClass_opFloatDoublePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception, &::Test::AMI_MyClass_opFloatDouble::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDouble_name);
        __ar = begin_opFloatDouble(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDouble_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opFloatDouble_async(const ::Test::AMI_MyClass_opFloatDoublePtr& __cb, ::Ice::Float p1, ::Ice::Double p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opFloatDoublePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception, &::Test::AMI_MyClass_opFloatDouble::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDouble(__cb, &::Test::AMI_MyClass_opFloatDouble::__response, &::Test::AMI_MyClass_opFloatDouble::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDouble_name);
        __ar = begin_opFloatDouble(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDouble_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::std::string
IceProxy::Test::MyClass::opString(const ::std::string& p1, const ::std::string& p2, ::std::string& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opString_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opString_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opString(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opString(const ::std::string& p1, const ::std::string& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opString_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opString_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opString_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::Test::MyClass::end_opString(::std::string& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opString_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opString_async(const ::Test::AMI_MyClass_opStringPtr& __cb, const ::std::string& p1, const ::std::string& p2)
{
    ::Test::Callback_MyClass_opStringPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception, &::Test::AMI_MyClass_opString::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opString_name);
        __ar = begin_opString(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opString_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opString_async(const ::Test::AMI_MyClass_opStringPtr& __cb, const ::std::string& p1, const ::std::string& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception, &::Test::AMI_MyClass_opString::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opString(__cb, &::Test::AMI_MyClass_opString::__response, &::Test::AMI_MyClass_opString::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opString_name);
        __ar = begin_opString(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opString_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyEnum
IceProxy::Test::MyClass::opMyEnum(::Test::MyEnum p1, ::Test::MyEnum& p2, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyEnum_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyEnum_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyEnum(p1, p2, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyEnum(::Test::MyEnum p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyEnum_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnum_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyEnum_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyEnum
IceProxy::Test::MyClass::end_opMyEnum(::Test::MyEnum& p2, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyEnum_name);
    ::Test::MyEnum __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p2);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyEnum_async(const ::Test::AMI_MyClass_opMyEnumPtr& __cb, ::Test::MyEnum p1)
{
    ::Test::Callback_MyClass_opMyEnumPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception, &::Test::AMI_MyClass_opMyEnum::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnum_name);
        __ar = begin_opMyEnum(p1, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnum_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyEnum_async(const ::Test::AMI_MyClass_opMyEnumPtr& __cb, ::Test::MyEnum p1, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyEnumPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception, &::Test::AMI_MyClass_opMyEnum::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnum(__cb, &::Test::AMI_MyClass_opMyEnum::__response, &::Test::AMI_MyClass_opMyEnum::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnum_name);
        __ar = begin_opMyEnum(p1, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnum_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyClassPrx
IceProxy::Test::MyClass::opMyClass(const ::Test::MyClassPrx& p1, ::Test::MyClassPrx& p2, ::Test::MyClassPrx& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyClass_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyClass_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyClass(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyClass(const ::Test::MyClassPrx& p1, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyClass_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyClass_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyClass_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyClassPrx
IceProxy::Test::MyClass::end_opMyClass(::Test::MyClassPrx& p2, ::Test::MyClassPrx& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyClass_name);
    ::Test::MyClassPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p2);
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyClass_async(const ::Test::AMI_MyClass_opMyClassPtr& __cb, const ::Test::MyClassPrx& p1)
{
    ::Test::Callback_MyClass_opMyClassPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception, &::Test::AMI_MyClass_opMyClass::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyClass_name);
        __ar = begin_opMyClass(p1, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyClass_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyClass_async(const ::Test::AMI_MyClass_opMyClassPtr& __cb, const ::Test::MyClassPrx& p1, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyClassPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception, &::Test::AMI_MyClass_opMyClass::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyClass(__cb, &::Test::AMI_MyClass_opMyClass::__response, &::Test::AMI_MyClass_opMyClass::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyClass_name);
        __ar = begin_opMyClass(p1, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyClass_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::Structure
IceProxy::Test::MyClass::opStruct(const ::Test::Structure& p1, const ::Test::Structure& p2, ::Test::Structure& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStruct_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStruct_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStruct(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStruct(const ::Test::Structure& p1, const ::Test::Structure& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStruct_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStruct_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStruct_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::Structure
IceProxy::Test::MyClass::end_opStruct(::Test::Structure& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStruct_name);
    ::Test::Structure __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStruct_async(const ::Test::AMI_MyClass_opStructPtr& __cb, const ::Test::Structure& p1, const ::Test::Structure& p2)
{
    ::Test::Callback_MyClass_opStructPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception, &::Test::AMI_MyClass_opStruct::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStruct_name);
        __ar = begin_opStruct(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStruct_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStruct_async(const ::Test::AMI_MyClass_opStructPtr& __cb, const ::Test::Structure& p1, const ::Test::Structure& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStructPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception, &::Test::AMI_MyClass_opStruct::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStruct(__cb, &::Test::AMI_MyClass_opStruct::__response, &::Test::AMI_MyClass_opStruct::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStruct_name);
        __ar = begin_opStruct(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStruct_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ByteS
IceProxy::Test::MyClass::opByteS(const ::Test::ByteS& p1, const ::Test::ByteS& p2, ::Test::ByteS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByteS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByteS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteS(const ::Test::ByteS& p1, const ::Test::ByteS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByteS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ByteS
IceProxy::Test::MyClass::end_opByteS(::Test::ByteS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByteS_name);
    ::Test::ByteS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByteS_async(const ::Test::AMI_MyClass_opByteSPtr& __cb, const ::Test::ByteS& p1, const ::Test::ByteS& p2)
{
    ::Test::Callback_MyClass_opByteSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception, &::Test::AMI_MyClass_opByteS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteS_name);
        __ar = begin_opByteS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteS_async(const ::Test::AMI_MyClass_opByteSPtr& __cb, const ::Test::ByteS& p1, const ::Test::ByteS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opByteSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception, &::Test::AMI_MyClass_opByteS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteS(__cb, &::Test::AMI_MyClass_opByteS::__response, &::Test::AMI_MyClass_opByteS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteS_name);
        __ar = begin_opByteS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::BoolS
IceProxy::Test::MyClass::opBoolS(const ::Test::BoolS& p1, const ::Test::BoolS& p2, ::Test::BoolS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opBoolS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opBoolS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opBoolS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opBoolS(const ::Test::BoolS& p1, const ::Test::BoolS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opBoolS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opBoolS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::BoolS
IceProxy::Test::MyClass::end_opBoolS(::Test::BoolS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opBoolS_name);
    ::Test::BoolS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opBoolS_async(const ::Test::AMI_MyClass_opBoolSPtr& __cb, const ::Test::BoolS& p1, const ::Test::BoolS& p2)
{
    ::Test::Callback_MyClass_opBoolSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception, &::Test::AMI_MyClass_opBoolS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolS_name);
        __ar = begin_opBoolS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBoolS_async(const ::Test::AMI_MyClass_opBoolSPtr& __cb, const ::Test::BoolS& p1, const ::Test::BoolS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBoolSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception, &::Test::AMI_MyClass_opBoolS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolS(__cb, &::Test::AMI_MyClass_opBoolS::__response, &::Test::AMI_MyClass_opBoolS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolS_name);
        __ar = begin_opBoolS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::LongS
IceProxy::Test::MyClass::opShortIntLongS(const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, ::Test::ShortS& p4, ::Test::IntS& p5, ::Test::LongS& p6, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntLongS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntLongS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntLongS(p1, p2, p3, p4, p5, p6, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntLongS(const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntLongS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntLongS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::LongS
IceProxy::Test::MyClass::end_opShortIntLongS(::Test::ShortS& p4, ::Test::IntS& p5, ::Test::LongS& p6, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntLongS_name);
    ::Test::LongS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntLongS_async(const ::Test::AMI_MyClass_opShortIntLongSPtr& __cb, const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3)
{
    ::Test::Callback_MyClass_opShortIntLongSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception, &::Test::AMI_MyClass_opShortIntLongS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongS_name);
        __ar = begin_opShortIntLongS(p1, p2, p3, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntLongS_async(const ::Test::AMI_MyClass_opShortIntLongSPtr& __cb, const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntLongSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception, &::Test::AMI_MyClass_opShortIntLongS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongS(__cb, &::Test::AMI_MyClass_opShortIntLongS::__response, &::Test::AMI_MyClass_opShortIntLongS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongS_name);
        __ar = begin_opShortIntLongS(p1, p2, p3, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::DoubleS
IceProxy::Test::MyClass::opFloatDoubleS(const ::Test::FloatS& p1, const ::Test::DoubleS& p2, ::Test::FloatS& p3, ::Test::DoubleS& p4, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opFloatDoubleS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opFloatDoubleS(p1, p2, p3, p4, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opFloatDoubleS(const ::Test::FloatS& p1, const ::Test::DoubleS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opFloatDoubleS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::DoubleS
IceProxy::Test::MyClass::end_opFloatDoubleS(::Test::FloatS& p3, ::Test::DoubleS& p4, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opFloatDoubleS_name);
    ::Test::DoubleS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opFloatDoubleS_async(const ::Test::AMI_MyClass_opFloatDoubleSPtr& __cb, const ::Test::FloatS& p1, const ::Test::DoubleS& p2)
{
    ::Test::Callback_MyClass_opFloatDoubleSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception, &::Test::AMI_MyClass_opFloatDoubleS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
        __ar = begin_opFloatDoubleS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opFloatDoubleS_async(const ::Test::AMI_MyClass_opFloatDoubleSPtr& __cb, const ::Test::FloatS& p1, const ::Test::DoubleS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opFloatDoubleSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception, &::Test::AMI_MyClass_opFloatDoubleS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleS(__cb, &::Test::AMI_MyClass_opFloatDoubleS::__response, &::Test::AMI_MyClass_opFloatDoubleS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleS_name);
        __ar = begin_opFloatDoubleS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringS
IceProxy::Test::MyClass::opStringS(const ::Test::StringS& p1, const ::Test::StringS& p2, ::Test::StringS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringS(const ::Test::StringS& p1, const ::Test::StringS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opStringS(::Test::StringS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringS_name);
    ::Test::StringS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringS_async(const ::Test::AMI_MyClass_opStringSPtr& __cb, const ::Test::StringS& p1, const ::Test::StringS& p2)
{
    ::Test::Callback_MyClass_opStringSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception, &::Test::AMI_MyClass_opStringS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringS_name);
        __ar = begin_opStringS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringS_async(const ::Test::AMI_MyClass_opStringSPtr& __cb, const ::Test::StringS& p1, const ::Test::StringS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception, &::Test::AMI_MyClass_opStringS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringS(__cb, &::Test::AMI_MyClass_opStringS::__response, &::Test::AMI_MyClass_opStringS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringS_name);
        __ar = begin_opStringS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ByteSS
IceProxy::Test::MyClass::opByteSS(const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, ::Test::ByteSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByteSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByteSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteSS(const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByteSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ByteSS
IceProxy::Test::MyClass::end_opByteSS(::Test::ByteSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByteSS_name);
    ::Test::ByteSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByteSS_async(const ::Test::AMI_MyClass_opByteSSPtr& __cb, const ::Test::ByteSS& p1, const ::Test::ByteSS& p2)
{
    ::Test::Callback_MyClass_opByteSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception, &::Test::AMI_MyClass_opByteSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteSS_name);
        __ar = begin_opByteSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteSS_async(const ::Test::AMI_MyClass_opByteSSPtr& __cb, const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opByteSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception, &::Test::AMI_MyClass_opByteSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSS(__cb, &::Test::AMI_MyClass_opByteSS::__response, &::Test::AMI_MyClass_opByteSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteSS_name);
        __ar = begin_opByteSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::BoolSS
IceProxy::Test::MyClass::opBoolSS(const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, ::Test::BoolSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opBoolSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opBoolSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opBoolSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opBoolSS(const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opBoolSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opBoolSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::BoolSS
IceProxy::Test::MyClass::end_opBoolSS(::Test::BoolSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opBoolSS_name);
    ::Test::BoolSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opBoolSS_async(const ::Test::AMI_MyClass_opBoolSSPtr& __cb, const ::Test::BoolSS& p1, const ::Test::BoolSS& p2)
{
    ::Test::Callback_MyClass_opBoolSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception, &::Test::AMI_MyClass_opBoolSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolSS_name);
        __ar = begin_opBoolSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opBoolSS_async(const ::Test::AMI_MyClass_opBoolSSPtr& __cb, const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opBoolSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception, &::Test::AMI_MyClass_opBoolSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opBoolSS(__cb, &::Test::AMI_MyClass_opBoolSS::__response, &::Test::AMI_MyClass_opBoolSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opBoolSS_name);
        __ar = begin_opBoolSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opBoolSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::LongSS
IceProxy::Test::MyClass::opShortIntLongSS(const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, ::Test::ShortSS& p4, ::Test::IntSS& p5, ::Test::LongSS& p6, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntLongSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntLongSS(p1, p2, p3, p4, p5, p6, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntLongSS(const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntLongSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::LongSS
IceProxy::Test::MyClass::end_opShortIntLongSS(::Test::ShortSS& p4, ::Test::IntSS& p5, ::Test::LongSS& p6, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntLongSS_name);
    ::Test::LongSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntLongSS_async(const ::Test::AMI_MyClass_opShortIntLongSSPtr& __cb, const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3)
{
    ::Test::Callback_MyClass_opShortIntLongSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception, &::Test::AMI_MyClass_opShortIntLongSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
        __ar = begin_opShortIntLongSS(p1, p2, p3, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntLongSS_async(const ::Test::AMI_MyClass_opShortIntLongSSPtr& __cb, const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntLongSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception, &::Test::AMI_MyClass_opShortIntLongSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntLongSS(__cb, &::Test::AMI_MyClass_opShortIntLongSS::__response, &::Test::AMI_MyClass_opShortIntLongSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntLongSS_name);
        __ar = begin_opShortIntLongSS(p1, p2, p3, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntLongSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::DoubleSS
IceProxy::Test::MyClass::opFloatDoubleSS(const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, ::Test::FloatSS& p3, ::Test::DoubleSS& p4, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opFloatDoubleSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opFloatDoubleSS(p1, p2, p3, p4, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opFloatDoubleSS(const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opFloatDoubleSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::DoubleSS
IceProxy::Test::MyClass::end_opFloatDoubleSS(::Test::FloatSS& p3, ::Test::DoubleSS& p4, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opFloatDoubleSS_name);
    ::Test::DoubleSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opFloatDoubleSS_async(const ::Test::AMI_MyClass_opFloatDoubleSSPtr& __cb, const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2)
{
    ::Test::Callback_MyClass_opFloatDoubleSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception, &::Test::AMI_MyClass_opFloatDoubleSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
        __ar = begin_opFloatDoubleSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opFloatDoubleSS_async(const ::Test::AMI_MyClass_opFloatDoubleSSPtr& __cb, const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opFloatDoubleSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception, &::Test::AMI_MyClass_opFloatDoubleSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opFloatDoubleSS(__cb, &::Test::AMI_MyClass_opFloatDoubleSS::__response, &::Test::AMI_MyClass_opFloatDoubleSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opFloatDoubleSS_name);
        __ar = begin_opFloatDoubleSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opFloatDoubleSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringSS
IceProxy::Test::MyClass::opStringSS(const ::Test::StringSS& p1, const ::Test::StringSS& p2, ::Test::StringSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringSS(const ::Test::StringSS& p1, const ::Test::StringSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringSS
IceProxy::Test::MyClass::end_opStringSS(::Test::StringSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringSS_name);
    ::Test::StringSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringSS_async(const ::Test::AMI_MyClass_opStringSSPtr& __cb, const ::Test::StringSS& p1, const ::Test::StringSS& p2)
{
    ::Test::Callback_MyClass_opStringSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception, &::Test::AMI_MyClass_opStringSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSS_name);
        __ar = begin_opStringSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringSS_async(const ::Test::AMI_MyClass_opStringSSPtr& __cb, const ::Test::StringSS& p1, const ::Test::StringSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception, &::Test::AMI_MyClass_opStringSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSS(__cb, &::Test::AMI_MyClass_opStringSS::__response, &::Test::AMI_MyClass_opStringSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSS_name);
        __ar = begin_opStringSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringSSS
IceProxy::Test::MyClass::opStringSSS(const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, ::Test::StringSSS& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringSSS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringSSS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringSSS(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringSSS(const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringSSS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSSS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringSSS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringSSS
IceProxy::Test::MyClass::end_opStringSSS(::Test::StringSSS& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringSSS_name);
    ::Test::StringSSS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringSSS_async(const ::Test::AMI_MyClass_opStringSSSPtr& __cb, const ::Test::StringSSS& p1, const ::Test::StringSSS& p2)
{
    ::Test::Callback_MyClass_opStringSSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception, &::Test::AMI_MyClass_opStringSSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSSS_name);
        __ar = begin_opStringSSS(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringSSS_async(const ::Test::AMI_MyClass_opStringSSSPtr& __cb, const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringSSSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception, &::Test::AMI_MyClass_opStringSSS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringSSS(__cb, &::Test::AMI_MyClass_opStringSSS::__response, &::Test::AMI_MyClass_opStringSSS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringSSS_name);
        __ar = begin_opStringSSS(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringSSS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ByteBoolD
IceProxy::Test::MyClass::opByteBoolD(const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, ::Test::ByteBoolD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteBoolD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opByteBoolD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opByteBoolD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteBoolD(const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opByteBoolD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteBoolD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteBoolD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ByteBoolD
IceProxy::Test::MyClass::end_opByteBoolD(::Test::ByteBoolD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opByteBoolD_name);
    ::Test::ByteBoolD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opByteBoolD_async(const ::Test::AMI_MyClass_opByteBoolDPtr& __cb, const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2)
{
    ::Test::Callback_MyClass_opByteBoolDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception, &::Test::AMI_MyClass_opByteBoolD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteBoolD_name);
        __ar = begin_opByteBoolD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteBoolD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteBoolD_async(const ::Test::AMI_MyClass_opByteBoolDPtr& __cb, const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opByteBoolDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception, &::Test::AMI_MyClass_opByteBoolD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteBoolD(__cb, &::Test::AMI_MyClass_opByteBoolD::__response, &::Test::AMI_MyClass_opByteBoolD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opByteBoolD_name);
        __ar = begin_opByteBoolD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteBoolD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::ShortIntD
IceProxy::Test::MyClass::opShortIntD(const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, ::Test::ShortIntD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opShortIntD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opShortIntD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opShortIntD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opShortIntD(const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opShortIntD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opShortIntD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::ShortIntD
IceProxy::Test::MyClass::end_opShortIntD(::Test::ShortIntD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opShortIntD_name);
    ::Test::ShortIntD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opShortIntD_async(const ::Test::AMI_MyClass_opShortIntDPtr& __cb, const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2)
{
    ::Test::Callback_MyClass_opShortIntDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception, &::Test::AMI_MyClass_opShortIntD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntD_name);
        __ar = begin_opShortIntD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opShortIntD_async(const ::Test::AMI_MyClass_opShortIntDPtr& __cb, const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opShortIntDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception, &::Test::AMI_MyClass_opShortIntD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opShortIntD(__cb, &::Test::AMI_MyClass_opShortIntD::__response, &::Test::AMI_MyClass_opShortIntD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opShortIntD_name);
        __ar = begin_opShortIntD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opShortIntD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::LongFloatD
IceProxy::Test::MyClass::opLongFloatD(const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, ::Test::LongFloatD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opLongFloatD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opLongFloatD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opLongFloatD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opLongFloatD(const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opLongFloatD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opLongFloatD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opLongFloatD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::LongFloatD
IceProxy::Test::MyClass::end_opLongFloatD(::Test::LongFloatD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opLongFloatD_name);
    ::Test::LongFloatD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opLongFloatD_async(const ::Test::AMI_MyClass_opLongFloatDPtr& __cb, const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2)
{
    ::Test::Callback_MyClass_opLongFloatDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception, &::Test::AMI_MyClass_opLongFloatD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opLongFloatD_name);
        __ar = begin_opLongFloatD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opLongFloatD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opLongFloatD_async(const ::Test::AMI_MyClass_opLongFloatDPtr& __cb, const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opLongFloatDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception, &::Test::AMI_MyClass_opLongFloatD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opLongFloatD(__cb, &::Test::AMI_MyClass_opLongFloatD::__response, &::Test::AMI_MyClass_opLongFloatD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opLongFloatD_name);
        __ar = begin_opLongFloatD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opLongFloatD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringStringD
IceProxy::Test::MyClass::opStringStringD(const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, ::Test::StringStringD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringStringD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringStringD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringStringD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringStringD(const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringStringD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringStringD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringStringD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringStringD
IceProxy::Test::MyClass::end_opStringStringD(::Test::StringStringD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringStringD_name);
    ::Test::StringStringD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringStringD_async(const ::Test::AMI_MyClass_opStringStringDPtr& __cb, const ::Test::StringStringD& p1, const ::Test::StringStringD& p2)
{
    ::Test::Callback_MyClass_opStringStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception, &::Test::AMI_MyClass_opStringStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringStringD_name);
        __ar = begin_opStringStringD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringStringD_async(const ::Test::AMI_MyClass_opStringStringDPtr& __cb, const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception, &::Test::AMI_MyClass_opStringStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringStringD(__cb, &::Test::AMI_MyClass_opStringStringD::__response, &::Test::AMI_MyClass_opStringStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringStringD_name);
        __ar = begin_opStringStringD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::StringMyEnumD
IceProxy::Test::MyClass::opStringMyEnumD(const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, ::Test::StringMyEnumD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opStringMyEnumD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opStringMyEnumD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opStringMyEnumD(const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringMyEnumD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opStringMyEnumD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::StringMyEnumD
IceProxy::Test::MyClass::end_opStringMyEnumD(::Test::StringMyEnumD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opStringMyEnumD_name);
    ::Test::StringMyEnumD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opStringMyEnumD_async(const ::Test::AMI_MyClass_opStringMyEnumDPtr& __cb, const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2)
{
    ::Test::Callback_MyClass_opStringMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception, &::Test::AMI_MyClass_opStringMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
        __ar = begin_opStringMyEnumD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opStringMyEnumD_async(const ::Test::AMI_MyClass_opStringMyEnumDPtr& __cb, const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opStringMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception, &::Test::AMI_MyClass_opStringMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opStringMyEnumD(__cb, &::Test::AMI_MyClass_opStringMyEnumD::__response, &::Test::AMI_MyClass_opStringMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opStringMyEnumD_name);
        __ar = begin_opStringMyEnumD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opStringMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyEnumStringD
IceProxy::Test::MyClass::opMyEnumStringD(const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, ::Test::MyEnumStringD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyEnumStringD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyEnumStringD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyEnumStringD(const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnumStringD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyEnumStringD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyEnumStringD
IceProxy::Test::MyClass::end_opMyEnumStringD(::Test::MyEnumStringD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyEnumStringD_name);
    ::Test::MyEnumStringD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyEnumStringD_async(const ::Test::AMI_MyClass_opMyEnumStringDPtr& __cb, const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2)
{
    ::Test::Callback_MyClass_opMyEnumStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception, &::Test::AMI_MyClass_opMyEnumStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
        __ar = begin_opMyEnumStringD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnumStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyEnumStringD_async(const ::Test::AMI_MyClass_opMyEnumStringDPtr& __cb, const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyEnumStringDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception, &::Test::AMI_MyClass_opMyEnumStringD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyEnumStringD(__cb, &::Test::AMI_MyClass_opMyEnumStringD::__response, &::Test::AMI_MyClass_opMyEnumStringD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyEnumStringD_name);
        __ar = begin_opMyEnumStringD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyEnumStringD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::MyStructMyEnumD
IceProxy::Test::MyClass::opMyStructMyEnumD(const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, ::Test::MyStructMyEnumD& p3, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opMyStructMyEnumD_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opMyStructMyEnumD(p1, p2, p3, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opMyStructMyEnumD(const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyStructMyEnumD_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opMyStructMyEnumD_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MyStructMyEnumD
IceProxy::Test::MyClass::end_opMyStructMyEnumD(::Test::MyStructMyEnumD& p3, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opMyStructMyEnumD_name);
    ::Test::MyStructMyEnumD __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opMyStructMyEnumD_async(const ::Test::AMI_MyClass_opMyStructMyEnumDPtr& __cb, const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2)
{
    ::Test::Callback_MyClass_opMyStructMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception, &::Test::AMI_MyClass_opMyStructMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
        __ar = begin_opMyStructMyEnumD(p1, p2, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyStructMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opMyStructMyEnumD_async(const ::Test::AMI_MyClass_opMyStructMyEnumDPtr& __cb, const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opMyStructMyEnumDPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception, &::Test::AMI_MyClass_opMyStructMyEnumD::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opMyStructMyEnumD(__cb, &::Test::AMI_MyClass_opMyStructMyEnumD::__response, &::Test::AMI_MyClass_opMyStructMyEnumD::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opMyStructMyEnumD_name);
        __ar = begin_opMyStructMyEnumD(p1, p2, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opMyStructMyEnumD_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

::Test::IntS
IceProxy::Test::MyClass::opIntS(const ::Test::IntS& s, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opIntS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opIntS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opIntS(s, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opIntS(const ::Test::IntS& s, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opIntS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIntS_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opIntS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::IntS
IceProxy::Test::MyClass::end_opIntS(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opIntS_name);
    ::Test::IntS __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opIntS_async(const ::Test::AMI_MyClass_opIntSPtr& __cb, const ::Test::IntS& s)
{
    ::Test::Callback_MyClass_opIntSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception, &::Test::AMI_MyClass_opIntS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opIntS_name);
        __ar = begin_opIntS(s, 0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIntS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opIntS_async(const ::Test::AMI_MyClass_opIntSPtr& __cb, const ::Test::IntS& s, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opIntSPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception, &::Test::AMI_MyClass_opIntS::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIntS(__cb, &::Test::AMI_MyClass_opIntS::__response, &::Test::AMI_MyClass_opIntS::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opIntS_name);
        __ar = begin_opIntS(s, &__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIntS_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opByteSOneway(const ::Test::ByteS& s, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opByteSOneway_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opByteSOneway(s, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opByteSOneway(const ::Test::ByteS& s, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opByteSOneway_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opByteSOneway_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opByteSOneway(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opByteSOneway_name);
}

bool
IceProxy::Test::MyClass::opByteSOneway_async(const ::Test::AMI_MyClass_opByteSOnewayPtr& __cb, const ::Test::ByteS& s)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception, &::Test::AMI_MyClass_opByteSOneway::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opByteSOneway(s, 0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opByteSOneway_async(const ::Test::AMI_MyClass_opByteSOnewayPtr& __cb, const ::Test::ByteS& s, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception, &::Test::AMI_MyClass_opByteSOneway::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opByteSOneway(__cb, &::Test::AMI_MyClass_opByteSOneway::__response, &::Test::AMI_MyClass_opByteSOneway::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opByteSOneway(s, &__ctx, __del);
    return __ar->sentSynchronously();
}

::Ice::Context
IceProxy::Test::MyClass::opContext(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opContext_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MyClass__opContext_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            return __del->opContext(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opContext(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MyClass__opContext_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opContext_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opContext_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Context
IceProxy::Test::MyClass::end_opContext(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MyClass__opContext_name);
    ::Ice::Context __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::Test::MyClass::opContext_async(const ::Test::AMI_MyClass_opContextPtr& __cb)
{
    ::Test::Callback_MyClass_opContextPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception, &::Test::AMI_MyClass_opContext::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opContext_name);
        __ar = begin_opContext(0, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opContext_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opContext_async(const ::Test::AMI_MyClass_opContextPtr& __cb, const ::Ice::Context& __ctx)
{
    ::Test::Callback_MyClass_opContextPtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception, &::Test::AMI_MyClass_opContext::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opContext(__cb, &::Test::AMI_MyClass_opContext::__response, &::Test::AMI_MyClass_opContext::__exception);
    }
    ::Ice::AsyncResultPtr __ar;
    try
    {
        __checkTwowayOnly(__Test__MyClass__opContext_name);
        __ar = begin_opContext(&__ctx, __del);
    }
    catch(const ::Ice::TwowayOnlyException& ex)
    {
        __ar = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opContext_name, __del, 0);
        __ar->__exceptionAsync(ex);
    }
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opDoubleMarshaling(::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opDoubleMarshaling_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opDoubleMarshaling(p1, p2, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opDoubleMarshaling(::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opDoubleMarshaling_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opDoubleMarshaling_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opDoubleMarshaling(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opDoubleMarshaling_name);
}

bool
IceProxy::Test::MyClass::opDoubleMarshaling_async(const ::Test::AMI_MyClass_opDoubleMarshalingPtr& __cb, ::Ice::Double p1, const ::Test::DoubleS& p2)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception, &::Test::AMI_MyClass_opDoubleMarshaling::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDoubleMarshaling(p1, p2, 0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opDoubleMarshaling_async(const ::Test::AMI_MyClass_opDoubleMarshalingPtr& __cb, ::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception, &::Test::AMI_MyClass_opDoubleMarshaling::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opDoubleMarshaling(__cb, &::Test::AMI_MyClass_opDoubleMarshaling::__response, &::Test::AMI_MyClass_opDoubleMarshaling::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDoubleMarshaling(p1, p2, &__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opIdempotent(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opIdempotent_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opIdempotent(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opIdempotent(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opIdempotent_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opIdempotent_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opIdempotent(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opIdempotent_name);
}

bool
IceProxy::Test::MyClass::opIdempotent_async(const ::Test::AMI_MyClass_opIdempotentPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception, &::Test::AMI_MyClass_opIdempotent::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opIdempotent(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opIdempotent_async(const ::Test::AMI_MyClass_opIdempotentPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception, &::Test::AMI_MyClass_opIdempotent::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opIdempotent(__cb, &::Test::AMI_MyClass_opIdempotent::__response, &::Test::AMI_MyClass_opIdempotent::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opIdempotent(&__ctx, __del);
    return __ar->sentSynchronously();
}

void
IceProxy::Test::MyClass::opNonmutating(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyClass__opNonmutating_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyClass* __del = dynamic_cast< ::IceDelegate::Test::MyClass*>(__delBase.get());
            __del->opNonmutating(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::begin_opNonmutating(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyClass__opNonmutating_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyClass__opNonmutating_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyClass::end_opNonmutating(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyClass__opNonmutating_name);
}

bool
IceProxy::Test::MyClass::opNonmutating_async(const ::Test::AMI_MyClass_opNonmutatingPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception, &::Test::AMI_MyClass_opNonmutating::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opNonmutating(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyClass::opNonmutating_async(const ::Test::AMI_MyClass_opNonmutatingPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception, &::Test::AMI_MyClass_opNonmutating::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyClass_opNonmutating(__cb, &::Test::AMI_MyClass_opNonmutating::__response, &::Test::AMI_MyClass_opNonmutating::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opNonmutating(&__ctx, __del);
    return __ar->sentSynchronously();
}

const ::std::string&
IceProxy::Test::MyClass::ice_staticId()
{
    return ::Test::MyClass::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MyClass::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MyClass);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MyClass::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MyClass);
}

::IceProxy::Ice::Object*
IceProxy::Test::MyClass::__newInstance() const
{
    return new MyClass;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MyDerivedClass* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyDerivedClass>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MyDerivedClass;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::MyDerivedClass::opDerived(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MyDerivedClass__opDerived_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MyDerivedClass* __del = dynamic_cast< ::IceDelegate::Test::MyDerivedClass*>(__delBase.get());
            __del->opDerived(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MyDerivedClass::begin_opDerived(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MyDerivedClass__opDerived_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MyDerivedClass__opDerived_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::MyDerivedClass::end_opDerived(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__MyDerivedClass__opDerived_name);
}

bool
IceProxy::Test::MyDerivedClass::opDerived_async(const ::Test::AMI_MyDerivedClass_opDerivedPtr& __cb)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception, &::Test::AMI_MyDerivedClass_opDerived::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDerived(0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::Test::MyDerivedClass::opDerived_async(const ::Test::AMI_MyDerivedClass_opDerivedPtr& __cb, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception, &::Test::AMI_MyDerivedClass_opDerived::__sent);
    }
    else
    {
         __del = ::Test::newCallback_MyDerivedClass_opDerived(__cb, &::Test::AMI_MyDerivedClass_opDerived::__response, &::Test::AMI_MyDerivedClass_opDerived::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_opDerived(&__ctx, __del);
    return __ar->sentSynchronously();
}

const ::std::string&
IceProxy::Test::MyDerivedClass::ice_staticId()
{
    return ::Test::MyDerivedClass::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MyDerivedClass::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MyDerivedClass);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MyDerivedClass::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MyDerivedClass);
}

::IceProxy::Ice::Object*
IceProxy::Test::MyDerivedClass::__newInstance() const
{
    return new MyDerivedClass;
}

void
IceDelegateM::Test::MyClass::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::delay(::Ice::Int ms, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__delay_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ms);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::opVoid(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opVoid_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Byte
IceDelegateM::Test::MyClass::opByte(::Ice::Byte p1, ::Ice::Byte p2, ::Ice::Byte& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByte_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Byte __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Test::MyClass::opBool(bool p1, bool p2, bool& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opBool_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateM::Test::MyClass::opShortIntLong(::Ice::Short p1, ::Ice::Int p2, ::Ice::Long p3, ::Ice::Short& p4, ::Ice::Int& p5, ::Ice::Long& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntLong_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Double
IceDelegateM::Test::MyClass::opFloatDouble(::Ice::Float p1, ::Ice::Double p2, ::Ice::Float& p3, ::Ice::Double& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opFloatDouble_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Double __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::Test::MyClass::opString(const ::std::string& p1, const ::std::string& p2, ::std::string& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opString_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyEnum
IceDelegateM::Test::MyClass::opMyEnum(::Test::MyEnum p1, ::Test::MyEnum& p2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyEnum_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyEnum __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p2);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyClassPrx
IceDelegateM::Test::MyClass::opMyClass(const ::Test::MyClassPrx& p1, ::Test::MyClassPrx& p2, ::Test::MyClassPrx& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyClass_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyClassPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p2);
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::Structure
IceDelegateM::Test::MyClass::opStruct(const ::Test::Structure& p1, const ::Test::Structure& p2, ::Test::Structure& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStruct_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::Structure __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ByteS
IceDelegateM::Test::MyClass::opByteS(const ::Test::ByteS& p1, const ::Test::ByteS& p2, ::Test::ByteS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ByteS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::BoolS
IceDelegateM::Test::MyClass::opBoolS(const ::Test::BoolS& p1, const ::Test::BoolS& p2, ::Test::BoolS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opBoolS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::BoolS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::LongS
IceDelegateM::Test::MyClass::opShortIntLongS(const ::Test::ShortS& p1, const ::Test::IntS& p2, const ::Test::LongS& p3, ::Test::ShortS& p4, ::Test::IntS& p5, ::Test::LongS& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntLongS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::LongS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::DoubleS
IceDelegateM::Test::MyClass::opFloatDoubleS(const ::Test::FloatS& p1, const ::Test::DoubleS& p2, ::Test::FloatS& p3, ::Test::DoubleS& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opFloatDoubleS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::DoubleS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringS
IceDelegateM::Test::MyClass::opStringS(const ::Test::StringS& p1, const ::Test::StringS& p2, ::Test::StringS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ByteSS
IceDelegateM::Test::MyClass::opByteSS(const ::Test::ByteSS& p1, const ::Test::ByteSS& p2, ::Test::ByteSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ByteSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::BoolSS
IceDelegateM::Test::MyClass::opBoolSS(const ::Test::BoolSS& p1, const ::Test::BoolSS& p2, ::Test::BoolSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opBoolSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::BoolSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::LongSS
IceDelegateM::Test::MyClass::opShortIntLongSS(const ::Test::ShortSS& p1, const ::Test::IntSS& p2, const ::Test::LongSS& p3, ::Test::ShortSS& p4, ::Test::IntSS& p5, ::Test::LongSS& p6, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntLongSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __os->write(p3);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::LongSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p4);
        __is->read(p5);
        __is->read(p6);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::DoubleSS
IceDelegateM::Test::MyClass::opFloatDoubleSS(const ::Test::FloatSS& p1, const ::Test::DoubleSS& p2, ::Test::FloatSS& p3, ::Test::DoubleSS& p4, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opFloatDoubleSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::DoubleSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(p4);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringSS
IceDelegateM::Test::MyClass::opStringSS(const ::Test::StringSS& p1, const ::Test::StringSS& p2, ::Test::StringSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringSSS
IceDelegateM::Test::MyClass::opStringSSS(const ::Test::StringSSS& p1, const ::Test::StringSSS& p2, ::Test::StringSSS& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringSSS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringSSS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ByteBoolD
IceDelegateM::Test::MyClass::opByteBoolD(const ::Test::ByteBoolD& p1, const ::Test::ByteBoolD& p2, ::Test::ByteBoolD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteBoolD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ByteBoolD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::ShortIntD
IceDelegateM::Test::MyClass::opShortIntD(const ::Test::ShortIntD& p1, const ::Test::ShortIntD& p2, ::Test::ShortIntD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opShortIntD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::ShortIntD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::LongFloatD
IceDelegateM::Test::MyClass::opLongFloatD(const ::Test::LongFloatD& p1, const ::Test::LongFloatD& p2, ::Test::LongFloatD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opLongFloatD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::LongFloatD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringStringD
IceDelegateM::Test::MyClass::opStringStringD(const ::Test::StringStringD& p1, const ::Test::StringStringD& p2, ::Test::StringStringD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringStringD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringStringD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::StringMyEnumD
IceDelegateM::Test::MyClass::opStringMyEnumD(const ::Test::StringMyEnumD& p1, const ::Test::StringMyEnumD& p2, ::Test::StringMyEnumD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opStringMyEnumD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::StringMyEnumD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyEnumStringD
IceDelegateM::Test::MyClass::opMyEnumStringD(const ::Test::MyEnumStringD& p1, const ::Test::MyEnumStringD& p2, ::Test::MyEnumStringD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyEnumStringD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyEnumStringD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MyStructMyEnumD
IceDelegateM::Test::MyClass::opMyStructMyEnumD(const ::Test::MyStructMyEnumD& p1, const ::Test::MyStructMyEnumD& p2, ::Test::MyStructMyEnumD& p3, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opMyStructMyEnumD_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MyStructMyEnumD __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(p3);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::IntS
IceDelegateM::Test::MyClass::opIntS(const ::Test::IntS& s, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opIntS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::IntS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::MyClass::opByteSOneway(const ::Test::ByteS& s, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opByteSOneway_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(s);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Context
IceDelegateM::Test::MyClass::opContext(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opContext_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Context __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::MyClass::opDoubleMarshaling(::Ice::Double p1, const ::Test::DoubleS& p2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opDoubleMarshaling_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p1);
        __os->write(p2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::opIdempotent(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opIdempotent_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyClass::opNonmutating(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyClass__opNonmutating_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Test::MyDerivedClass::opDerived(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MyDerivedClass__opDerived_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::Test::MyClass::shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

void
IceDelegateD::Test::MyClass::delay(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

void
IceDelegateD::Test::MyClass::opVoid(const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

::Ice::Byte
IceDelegateD::Test::MyClass::opByte(::Ice::Byte, ::Ice::Byte, ::Ice::Byte&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Byte(); // to avoid a warning with some compilers;
}

bool
IceDelegateD::Test::MyClass::opBool(bool, bool, bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return bool(); // to avoid a warning with some compilers;
}

::Ice::Long
IceDelegateD::Test::MyClass::opShortIntLong(::Ice::Short, ::Ice::Int, ::Ice::Long, ::Ice::Short&, ::Ice::Int&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Long(); // to avoid a warning with some compilers;
}

::Ice::Double
IceDelegateD::Test::MyClass::opFloatDouble(::Ice::Float, ::Ice::Double, ::Ice::Float&, ::Ice::Double&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Double(); // to avoid a warning with some compilers;
}

::std::string
IceDelegateD::Test::MyClass::opString(const ::std::string&, const ::std::string&, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::std::string(); // to avoid a warning with some compilers;
}

::Test::MyEnum
IceDelegateD::Test::MyClass::opMyEnum(::Test::MyEnum, ::Test::MyEnum&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::MyEnum(); // to avoid a warning with some compilers;
}

::Test::MyClassPrx
IceDelegateD::Test::MyClass::opMyClass(const ::Test::MyClassPrx&, ::Test::MyClassPrx&, ::Test::MyClassPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::MyClassPrx(); // to avoid a warning with some compilers;
}

::Test::Structure
IceDelegateD::Test::MyClass::opStruct(const ::Test::Structure&, const ::Test::Structure&, ::Test::Structure&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::Structure(); // to avoid a warning with some compilers;
}

::Test::ByteS
IceDelegateD::Test::MyClass::opByteS(const ::Test::ByteS&, const ::Test::ByteS&, ::Test::ByteS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::ByteS(); // to avoid a warning with some compilers;
}

::Test::BoolS
IceDelegateD::Test::MyClass::opBoolS(const ::Test::BoolS&, const ::Test::BoolS&, ::Test::BoolS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::BoolS(); // to avoid a warning with some compilers;
}

::Test::LongS
IceDelegateD::Test::MyClass::opShortIntLongS(const ::Test::ShortS&, const ::Test::IntS&, const ::Test::LongS&, ::Test::ShortS&, ::Test::IntS&, ::Test::LongS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::LongS(); // to avoid a warning with some compilers;
}

::Test::DoubleS
IceDelegateD::Test::MyClass::opFloatDoubleS(const ::Test::FloatS&, const ::Test::DoubleS&, ::Test::FloatS&, ::Test::DoubleS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::DoubleS(); // to avoid a warning with some compilers;
}

::Test::StringS
IceDelegateD::Test::MyClass::opStringS(const ::Test::StringS&, const ::Test::StringS&, ::Test::StringS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::StringS(); // to avoid a warning with some compilers;
}

::Test::ByteSS
IceDelegateD::Test::MyClass::opByteSS(const ::Test::ByteSS&, const ::Test::ByteSS&, ::Test::ByteSS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::ByteSS(); // to avoid a warning with some compilers;
}

::Test::BoolSS
IceDelegateD::Test::MyClass::opBoolSS(const ::Test::BoolSS&, const ::Test::BoolSS&, ::Test::BoolSS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::BoolSS(); // to avoid a warning with some compilers;
}

::Test::LongSS
IceDelegateD::Test::MyClass::opShortIntLongSS(const ::Test::ShortSS&, const ::Test::IntSS&, const ::Test::LongSS&, ::Test::ShortSS&, ::Test::IntSS&, ::Test::LongSS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::LongSS(); // to avoid a warning with some compilers;
}

::Test::DoubleSS
IceDelegateD::Test::MyClass::opFloatDoubleSS(const ::Test::FloatSS&, const ::Test::DoubleSS&, ::Test::FloatSS&, ::Test::DoubleSS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::DoubleSS(); // to avoid a warning with some compilers;
}

::Test::StringSS
IceDelegateD::Test::MyClass::opStringSS(const ::Test::StringSS&, const ::Test::StringSS&, ::Test::StringSS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::StringSS(); // to avoid a warning with some compilers;
}

::Test::StringSSS
IceDelegateD::Test::MyClass::opStringSSS(const ::Test::StringSSS&, const ::Test::StringSSS&, ::Test::StringSSS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::StringSSS(); // to avoid a warning with some compilers;
}

::Test::ByteBoolD
IceDelegateD::Test::MyClass::opByteBoolD(const ::Test::ByteBoolD&, const ::Test::ByteBoolD&, ::Test::ByteBoolD&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::ByteBoolD(); // to avoid a warning with some compilers;
}

::Test::ShortIntD
IceDelegateD::Test::MyClass::opShortIntD(const ::Test::ShortIntD&, const ::Test::ShortIntD&, ::Test::ShortIntD&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::ShortIntD(); // to avoid a warning with some compilers;
}

::Test::LongFloatD
IceDelegateD::Test::MyClass::opLongFloatD(const ::Test::LongFloatD&, const ::Test::LongFloatD&, ::Test::LongFloatD&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::LongFloatD(); // to avoid a warning with some compilers;
}

::Test::StringStringD
IceDelegateD::Test::MyClass::opStringStringD(const ::Test::StringStringD&, const ::Test::StringStringD&, ::Test::StringStringD&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::StringStringD(); // to avoid a warning with some compilers;
}

::Test::StringMyEnumD
IceDelegateD::Test::MyClass::opStringMyEnumD(const ::Test::StringMyEnumD&, const ::Test::StringMyEnumD&, ::Test::StringMyEnumD&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::StringMyEnumD(); // to avoid a warning with some compilers;
}

::Test::MyEnumStringD
IceDelegateD::Test::MyClass::opMyEnumStringD(const ::Test::MyEnumStringD&, const ::Test::MyEnumStringD&, ::Test::MyEnumStringD&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::MyEnumStringD(); // to avoid a warning with some compilers;
}

::Test::MyStructMyEnumD
IceDelegateD::Test::MyClass::opMyStructMyEnumD(const ::Test::MyStructMyEnumD&, const ::Test::MyStructMyEnumD&, ::Test::MyStructMyEnumD&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::MyStructMyEnumD(); // to avoid a warning with some compilers;
}

::Test::IntS
IceDelegateD::Test::MyClass::opIntS(const ::Test::IntS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Test::IntS(); // to avoid a warning with some compilers;
}

void
IceDelegateD::Test::MyClass::opByteSOneway(const ::Test::ByteS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

::Ice::Context
IceDelegateD::Test::MyClass::opContext(const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Context(); // to avoid a warning with some compilers;
}

void
IceDelegateD::Test::MyClass::opDoubleMarshaling(::Ice::Double, const ::Test::DoubleS&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

void
IceDelegateD::Test::MyClass::opIdempotent(const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

void
IceDelegateD::Test::MyClass::opNonmutating(const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

void
IceDelegateD::Test::MyDerivedClass::opDerived(const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

::Ice::Object* Test::upCast(::Test::MyClass* p) { return p; }
::Ice::ObjectPtr
Test::MyClass::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};

}

bool
Test::MyClass::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MyClass_ids, __Test__MyClass_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MyClass_ids[0], &__Test__MyClass_ids[2]);
}

const ::std::string&
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return __Test__MyClass_ids[1];
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    return __Test__MyClass_ids[1];
}

::Ice::DispatchStatus
Test::MyClass::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::AMD_MyClass_shutdownPtr __cb = new IceAsync::Test::AMD_MyClass_shutdown(__inS);
    try
    {
        shutdown_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___delay(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int ms;
    __is->read(ms);
    __inS.endReadParams();
    ::Test::AMD_MyClass_delayPtr __cb = new IceAsync::Test::AMD_MyClass_delay(__inS);
    try
    {
        delay_async(__cb, ms, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opVoid(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::AMD_MyClass_opVoidPtr __cb = new IceAsync::Test::AMD_MyClass_opVoid(__inS);
    try
    {
        opVoid_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opByte(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Byte p1;
    ::Ice::Byte p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opBytePtr __cb = new IceAsync::Test::AMD_MyClass_opByte(__inS);
    try
    {
        opByte_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opBool(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool p1;
    bool p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opBoolPtr __cb = new IceAsync::Test::AMD_MyClass_opBool(__inS);
    try
    {
        opBool_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntLong(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Short p1;
    ::Ice::Int p2;
    ::Ice::Long p3;
    __is->read(p1);
    __is->read(p2);
    __is->read(p3);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opShortIntLongPtr __cb = new IceAsync::Test::AMD_MyClass_opShortIntLong(__inS);
    try
    {
        opShortIntLong_async(__cb, p1, p2, p3, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opFloatDouble(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float p1;
    ::Ice::Double p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opFloatDoublePtr __cb = new IceAsync::Test::AMD_MyClass_opFloatDouble(__inS);
    try
    {
        opFloatDouble_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opString(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string p1;
    ::std::string p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opStringPtr __cb = new IceAsync::Test::AMD_MyClass_opString(__inS);
    try
    {
        opString_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opMyEnum(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyEnum p1;
    __is->read(p1);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opMyEnumPtr __cb = new IceAsync::Test::AMD_MyClass_opMyEnum(__inS);
    try
    {
        opMyEnum_async(__cb, p1, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opMyClass(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyClassPrx p1;
    __is->read(p1);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opMyClassPtr __cb = new IceAsync::Test::AMD_MyClass_opMyClass(__inS);
    try
    {
        opMyClass_async(__cb, p1, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opStruct(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::Structure p1;
    ::Test::Structure p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opStructPtr __cb = new IceAsync::Test::AMD_MyClass_opStruct(__inS);
    try
    {
        opStruct_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opByteS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteS p1;
    ::Test::ByteS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opByteSPtr __cb = new IceAsync::Test::AMD_MyClass_opByteS(__inS);
    try
    {
        opByteS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opBoolS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::BoolS p1;
    ::Test::BoolS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opBoolSPtr __cb = new IceAsync::Test::AMD_MyClass_opBoolS(__inS);
    try
    {
        opBoolS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntLongS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ShortS p1;
    ::Test::IntS p2;
    ::Test::LongS p3;
    __is->read(p1);
    __is->read(p2);
    __is->read(p3);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opShortIntLongSPtr __cb = new IceAsync::Test::AMD_MyClass_opShortIntLongS(__inS);
    try
    {
        opShortIntLongS_async(__cb, p1, p2, p3, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opFloatDoubleS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::FloatS p1;
    ::Test::DoubleS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opFloatDoubleSPtr __cb = new IceAsync::Test::AMD_MyClass_opFloatDoubleS(__inS);
    try
    {
        opFloatDoubleS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opStringS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringS p1;
    ::Test::StringS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opStringSPtr __cb = new IceAsync::Test::AMD_MyClass_opStringS(__inS);
    try
    {
        opStringS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opByteSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteSS p1;
    ::Test::ByteSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opByteSSPtr __cb = new IceAsync::Test::AMD_MyClass_opByteSS(__inS);
    try
    {
        opByteSS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opBoolSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::BoolSS p1;
    ::Test::BoolSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opBoolSSPtr __cb = new IceAsync::Test::AMD_MyClass_opBoolSS(__inS);
    try
    {
        opBoolSS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntLongSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ShortSS p1;
    ::Test::IntSS p2;
    ::Test::LongSS p3;
    __is->read(p1);
    __is->read(p2);
    __is->read(p3);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opShortIntLongSSPtr __cb = new IceAsync::Test::AMD_MyClass_opShortIntLongSS(__inS);
    try
    {
        opShortIntLongSS_async(__cb, p1, p2, p3, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opFloatDoubleSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::FloatSS p1;
    ::Test::DoubleSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opFloatDoubleSSPtr __cb = new IceAsync::Test::AMD_MyClass_opFloatDoubleSS(__inS);
    try
    {
        opFloatDoubleSS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opStringSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringSS p1;
    ::Test::StringSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opStringSSPtr __cb = new IceAsync::Test::AMD_MyClass_opStringSS(__inS);
    try
    {
        opStringSS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opStringSSS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringSSS p1;
    ::Test::StringSSS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opStringSSSPtr __cb = new IceAsync::Test::AMD_MyClass_opStringSSS(__inS);
    try
    {
        opStringSSS_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opByteBoolD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteBoolD p1;
    ::Test::ByteBoolD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opByteBoolDPtr __cb = new IceAsync::Test::AMD_MyClass_opByteBoolD(__inS);
    try
    {
        opByteBoolD_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opShortIntD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ShortIntD p1;
    ::Test::ShortIntD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opShortIntDPtr __cb = new IceAsync::Test::AMD_MyClass_opShortIntD(__inS);
    try
    {
        opShortIntD_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opLongFloatD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::LongFloatD p1;
    ::Test::LongFloatD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opLongFloatDPtr __cb = new IceAsync::Test::AMD_MyClass_opLongFloatD(__inS);
    try
    {
        opLongFloatD_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opStringStringD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringStringD p1;
    ::Test::StringStringD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opStringStringDPtr __cb = new IceAsync::Test::AMD_MyClass_opStringStringD(__inS);
    try
    {
        opStringStringD_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opStringMyEnumD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::StringMyEnumD p1;
    ::Test::StringMyEnumD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opStringMyEnumDPtr __cb = new IceAsync::Test::AMD_MyClass_opStringMyEnumD(__inS);
    try
    {
        opStringMyEnumD_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opMyEnumStringD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyEnumStringD p1;
    ::Test::MyEnumStringD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opMyEnumStringDPtr __cb = new IceAsync::Test::AMD_MyClass_opMyEnumStringD(__inS);
    try
    {
        opMyEnumStringD_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opMyStructMyEnumD(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MyStructMyEnumD p1;
    ::Test::MyStructMyEnumD p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opMyStructMyEnumDPtr __cb = new IceAsync::Test::AMD_MyClass_opMyStructMyEnumD(__inS);
    try
    {
        opMyStructMyEnumD_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opIntS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::IntS s;
    __is->read(s);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opIntSPtr __cb = new IceAsync::Test::AMD_MyClass_opIntS(__inS);
    try
    {
        opIntS_async(__cb, s, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opByteSOneway(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::ByteS s;
    __is->read(s);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opByteSOnewayPtr __cb = new IceAsync::Test::AMD_MyClass_opByteSOneway(__inS);
    try
    {
        opByteSOneway_async(__cb, s, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opContext(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::AMD_MyClass_opContextPtr __cb = new IceAsync::Test::AMD_MyClass_opContext(__inS);
    try
    {
        opContext_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opDoubleMarshaling(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Double p1;
    ::Test::DoubleS p2;
    __is->read(p1);
    __is->read(p2);
    __inS.endReadParams();
    ::Test::AMD_MyClass_opDoubleMarshalingPtr __cb = new IceAsync::Test::AMD_MyClass_opDoubleMarshaling(__inS);
    try
    {
        opDoubleMarshaling_async(__cb, p1, p2, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opIdempotent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Test::AMD_MyClass_opIdempotentPtr __cb = new IceAsync::Test::AMD_MyClass_opIdempotent(__inS);
    try
    {
        opIdempotent_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Test::MyClass::___opNonmutating(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Test::AMD_MyClass_opNonmutatingPtr __cb = new IceAsync::Test::AMD_MyClass_opNonmutating(__inS);
    try
    {
        opNonmutating_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __Test__MyClass_all[] =
{
    "delay",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByteBoolD",
    "opByteS",
    "opByteSOneway",
    "opByteSS",
    "opContext",
    "opDoubleMarshaling",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opIntS",
    "opLongFloatD",
    "opMyClass",
    "opMyEnum",
    "opMyEnumStringD",
    "opMyStructMyEnumD",
    "opNonmutating",
    "opShortIntD",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opString",
    "opStringMyEnumD",
    "opStringS",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStruct",
    "opVoid",
    "shutdown"
};

}

::Ice::DispatchStatus
Test::MyClass::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MyClass_all, __Test__MyClass_all + 39, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MyClass_all)
    {
        case 0:
        {
            return ___delay(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___opBool(in, current);
        }
        case 6:
        {
            return ___opBoolS(in, current);
        }
        case 7:
        {
            return ___opBoolSS(in, current);
        }
        case 8:
        {
            return ___opByte(in, current);
        }
        case 9:
        {
            return ___opByteBoolD(in, current);
        }
        case 10:
        {
            return ___opByteS(in, current);
        }
        case 11:
        {
            return ___opByteSOneway(in, current);
        }
        case 12:
        {
            return ___opByteSS(in, current);
        }
        case 13:
        {
            return ___opContext(in, current);
        }
        case 14:
        {
            return ___opDoubleMarshaling(in, current);
        }
        case 15:
        {
            return ___opFloatDouble(in, current);
        }
        case 16:
        {
            return ___opFloatDoubleS(in, current);
        }
        case 17:
        {
            return ___opFloatDoubleSS(in, current);
        }
        case 18:
        {
            return ___opIdempotent(in, current);
        }
        case 19:
        {
            return ___opIntS(in, current);
        }
        case 20:
        {
            return ___opLongFloatD(in, current);
        }
        case 21:
        {
            return ___opMyClass(in, current);
        }
        case 22:
        {
            return ___opMyEnum(in, current);
        }
        case 23:
        {
            return ___opMyEnumStringD(in, current);
        }
        case 24:
        {
            return ___opMyStructMyEnumD(in, current);
        }
        case 25:
        {
            return ___opNonmutating(in, current);
        }
        case 26:
        {
            return ___opShortIntD(in, current);
        }
        case 27:
        {
            return ___opShortIntLong(in, current);
        }
        case 28:
        {
            return ___opShortIntLongS(in, current);
        }
        case 29:
        {
            return ___opShortIntLongSS(in, current);
        }
        case 30:
        {
            return ___opString(in, current);
        }
        case 31:
        {
            return ___opStringMyEnumD(in, current);
        }
        case 32:
        {
            return ___opStringS(in, current);
        }
        case 33:
        {
            return ___opStringSS(in, current);
        }
        case 34:
        {
            return ___opStringSSS(in, current);
        }
        case 35:
        {
            return ___opStringStringD(in, current);
        }
        case 36:
        {
            return ___opStruct(in, current);
        }
        case 37:
        {
            return ___opVoid(in, current);
        }
        case 38:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MyClass::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MyClass::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(MyClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MyClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MyClass::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::MyDerivedClass* p) { return p; }
::Ice::ObjectPtr
Test::MyDerivedClass::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MyDerivedClass_ids[3] =
{
    "::Ice::Object",
    "::Test::MyClass",
    "::Test::MyDerivedClass"
};

}

bool
Test::MyDerivedClass::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MyDerivedClass_ids, __Test__MyDerivedClass_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MyDerivedClass_ids[0], &__Test__MyDerivedClass_ids[3]);
}

const ::std::string&
Test::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return __Test__MyDerivedClass_ids[2];
}

const ::std::string&
Test::MyDerivedClass::ice_staticId()
{
    return __Test__MyDerivedClass_ids[2];
}

::Ice::DispatchStatus
Test::MyDerivedClass::___opDerived(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::AMD_MyDerivedClass_opDerivedPtr __cb = new IceAsync::Test::AMD_MyDerivedClass_opDerived(__inS);
    try
    {
        opDerived_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __Test__MyDerivedClass_all[] =
{
    "delay",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByteBoolD",
    "opByteS",
    "opByteSOneway",
    "opByteSS",
    "opContext",
    "opDerived",
    "opDoubleMarshaling",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opIntS",
    "opLongFloatD",
    "opMyClass",
    "opMyEnum",
    "opMyEnumStringD",
    "opMyStructMyEnumD",
    "opNonmutating",
    "opShortIntD",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opString",
    "opStringMyEnumD",
    "opStringS",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStruct",
    "opVoid",
    "shutdown"
};

}

::Ice::DispatchStatus
Test::MyDerivedClass::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MyDerivedClass_all, __Test__MyDerivedClass_all + 40, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MyDerivedClass_all)
    {
        case 0:
        {
            return ___delay(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___opBool(in, current);
        }
        case 6:
        {
            return ___opBoolS(in, current);
        }
        case 7:
        {
            return ___opBoolSS(in, current);
        }
        case 8:
        {
            return ___opByte(in, current);
        }
        case 9:
        {
            return ___opByteBoolD(in, current);
        }
        case 10:
        {
            return ___opByteS(in, current);
        }
        case 11:
        {
            return ___opByteSOneway(in, current);
        }
        case 12:
        {
            return ___opByteSS(in, current);
        }
        case 13:
        {
            return ___opContext(in, current);
        }
        case 14:
        {
            return ___opDerived(in, current);
        }
        case 15:
        {
            return ___opDoubleMarshaling(in, current);
        }
        case 16:
        {
            return ___opFloatDouble(in, current);
        }
        case 17:
        {
            return ___opFloatDoubleS(in, current);
        }
        case 18:
        {
            return ___opFloatDoubleSS(in, current);
        }
        case 19:
        {
            return ___opIdempotent(in, current);
        }
        case 20:
        {
            return ___opIntS(in, current);
        }
        case 21:
        {
            return ___opLongFloatD(in, current);
        }
        case 22:
        {
            return ___opMyClass(in, current);
        }
        case 23:
        {
            return ___opMyEnum(in, current);
        }
        case 24:
        {
            return ___opMyEnumStringD(in, current);
        }
        case 25:
        {
            return ___opMyStructMyEnumD(in, current);
        }
        case 26:
        {
            return ___opNonmutating(in, current);
        }
        case 27:
        {
            return ___opShortIntD(in, current);
        }
        case 28:
        {
            return ___opShortIntLong(in, current);
        }
        case 29:
        {
            return ___opShortIntLongS(in, current);
        }
        case 30:
        {
            return ___opShortIntLongSS(in, current);
        }
        case 31:
        {
            return ___opString(in, current);
        }
        case 32:
        {
            return ___opStringMyEnumD(in, current);
        }
        case 33:
        {
            return ___opStringS(in, current);
        }
        case 34:
        {
            return ___opStringSS(in, current);
        }
        case 35:
        {
            return ___opStringSSS(in, current);
        }
        case 36:
        {
            return ___opStringStringD(in, current);
        }
        case 37:
        {
            return ___opStruct(in, current);
        }
        case 38:
        {
            return ___opVoid(in, current);
        }
        case 39:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MyDerivedClass::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::Test::MyClass::__writeImpl(__os);
}

void
Test::MyDerivedClass::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Test::MyClass::__readImpl(__is);
}

void 
Test::__patch(MyDerivedClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MyDerivedClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MyDerivedClass::ice_staticId(), v);
    }
}
