// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

namespace
{

const ::std::string __Test__MA__IA__iaop_name = "iaop";

const ::std::string __Test__MA__CA__caop_name = "caop";

}

namespace
{

const ::std::string __Test__MB__IB1__ib1op_name = "ib1op";

const ::std::string __Test__MB__IB2__ib2op_name = "ib2op";

const ::std::string __Test__MB__CB__cbop_name = "cbop";

}

namespace
{

const ::std::string __Test__MA__IC__icop_name = "icop";

const ::std::string __Test__MA__CC__ccop_name = "ccop";

const ::std::string __Test__MA__CD__cdop_name = "cdop";

}

const ::std::string __Test__Initial__shutdown_name = "shutdown";

const ::std::string __Test__Initial__caop_name = "caop";

const ::std::string __Test__Initial__cbop_name = "cbop";

const ::std::string __Test__Initial__ccop_name = "ccop";

const ::std::string __Test__Initial__cdop_name = "cdop";

const ::std::string __Test__Initial__iaop_name = "iaop";

const ::std::string __Test__Initial__ib1op_name = "ib1op";

const ::std::string __Test__Initial__ib2op_name = "ib2op";

const ::std::string __Test__Initial__icop_name = "icop";

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

}

}
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(::IceProxy::Test::MA::IA* p) { return p; }

void
::IceProxy::Test::MA::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MA::IA>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MA::IA;
        v->__copyFrom(proxy);
    }
}

::Test::MA::IAPrx
IceProxy::Test::MA::IA::iaop(const ::Test::MA::IAPrx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MA__IA__iaop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MA__IA__iaop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MA::IA* __del = dynamic_cast< ::IceDelegate::Test::MA::IA*>(__delBase.get());
            return __del->iaop(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MA::IA::begin_iaop(const ::Test::MA::IAPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MA__IA__iaop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MA__IA__iaop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MA__IA__iaop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::IAPrx
IceProxy::Test::MA::IA::end_iaop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MA__IA__iaop_name);
    ::Test::MA::IAPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MA::IA::ice_staticId()
{
    return ::Test::MA::IA::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MA::IA::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MA::IA);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MA::IA::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MA::IA);
}

::IceProxy::Ice::Object*
IceProxy::Test::MA::IA::__newInstance() const
{
    return new IA;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(::IceProxy::Test::MA::CA* p) { return p; }

void
::IceProxy::Test::MA::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MA::CA>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MA::CA;
        v->__copyFrom(proxy);
    }
}

::Test::MA::CAPrx
IceProxy::Test::MA::CA::caop(const ::Test::MA::CAPrx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MA__CA__caop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MA__CA__caop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MA::CA* __del = dynamic_cast< ::IceDelegate::Test::MA::CA*>(__delBase.get());
            return __del->caop(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MA::CA::begin_caop(const ::Test::MA::CAPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MA__CA__caop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MA__CA__caop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MA__CA__caop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::CAPrx
IceProxy::Test::MA::CA::end_caop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MA__CA__caop_name);
    ::Test::MA::CAPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MA::CA::ice_staticId()
{
    return ::Test::MA::CA::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MA::CA::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MA::CA);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MA::CA::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MA::CA);
}

::IceProxy::Ice::Object*
IceProxy::Test::MA::CA::__newInstance() const
{
    return new CA;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MB::upCast(::IceProxy::Test::MB::IB1* p) { return p; }

void
::IceProxy::Test::MB::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MB::IB1>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MB::IB1;
        v->__copyFrom(proxy);
    }
}

::Test::MB::IB1Prx
IceProxy::Test::MB::IB1::ib1op(const ::Test::MB::IB1Prx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MB__IB1__ib1op_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MB__IB1__ib1op_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MB::IB1* __del = dynamic_cast< ::IceDelegate::Test::MB::IB1*>(__delBase.get());
            return __del->ib1op(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MB::IB1::begin_ib1op(const ::Test::MB::IB1Prx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MB__IB1__ib1op_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MB__IB1__ib1op_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MB__IB1__ib1op_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MB::IB1Prx
IceProxy::Test::MB::IB1::end_ib1op(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MB__IB1__ib1op_name);
    ::Test::MB::IB1Prx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MB::IB1::ice_staticId()
{
    return ::Test::MB::IB1::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MB::IB1::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MB::IB1);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MB::IB1::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MB::IB1);
}

::IceProxy::Ice::Object*
IceProxy::Test::MB::IB1::__newInstance() const
{
    return new IB1;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MB::upCast(::IceProxy::Test::MB::IB2* p) { return p; }

void
::IceProxy::Test::MB::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MB::IB2>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MB::IB2;
        v->__copyFrom(proxy);
    }
}

::Test::MB::IB2Prx
IceProxy::Test::MB::IB2::ib2op(const ::Test::MB::IB2Prx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MB__IB2__ib2op_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MB__IB2__ib2op_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MB::IB2* __del = dynamic_cast< ::IceDelegate::Test::MB::IB2*>(__delBase.get());
            return __del->ib2op(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MB::IB2::begin_ib2op(const ::Test::MB::IB2Prx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MB__IB2__ib2op_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MB__IB2__ib2op_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MB__IB2__ib2op_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MB::IB2Prx
IceProxy::Test::MB::IB2::end_ib2op(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MB__IB2__ib2op_name);
    ::Test::MB::IB2Prx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MB::IB2::ice_staticId()
{
    return ::Test::MB::IB2::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MB::IB2::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MB::IB2);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MB::IB2::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MB::IB2);
}

::IceProxy::Ice::Object*
IceProxy::Test::MB::IB2::__newInstance() const
{
    return new IB2;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MB::upCast(::IceProxy::Test::MB::CB* p) { return p; }

void
::IceProxy::Test::MB::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MB::CB>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MB::CB;
        v->__copyFrom(proxy);
    }
}

::Test::MB::CBPrx
IceProxy::Test::MB::CB::cbop(const ::Test::MB::CBPrx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MB__CB__cbop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MB__CB__cbop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MB::CB* __del = dynamic_cast< ::IceDelegate::Test::MB::CB*>(__delBase.get());
            return __del->cbop(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MB::CB::begin_cbop(const ::Test::MB::CBPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MB__CB__cbop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MB__CB__cbop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MB__CB__cbop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MB::CBPrx
IceProxy::Test::MB::CB::end_cbop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MB__CB__cbop_name);
    ::Test::MB::CBPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MB::CB::ice_staticId()
{
    return ::Test::MB::CB::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MB::CB::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MB::CB);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MB::CB::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MB::CB);
}

::IceProxy::Ice::Object*
IceProxy::Test::MB::CB::__newInstance() const
{
    return new CB;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(::IceProxy::Test::MA::IC* p) { return p; }

void
::IceProxy::Test::MA::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MA::IC>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MA::IC;
        v->__copyFrom(proxy);
    }
}

::Test::MA::ICPrx
IceProxy::Test::MA::IC::icop(const ::Test::MA::ICPrx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MA__IC__icop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MA__IC__icop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MA::IC* __del = dynamic_cast< ::IceDelegate::Test::MA::IC*>(__delBase.get());
            return __del->icop(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MA::IC::begin_icop(const ::Test::MA::ICPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MA__IC__icop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MA__IC__icop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MA__IC__icop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::ICPrx
IceProxy::Test::MA::IC::end_icop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MA__IC__icop_name);
    ::Test::MA::ICPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MA::IC::ice_staticId()
{
    return ::Test::MA::IC::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MA::IC::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MA::IC);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MA::IC::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MA::IC);
}

::IceProxy::Ice::Object*
IceProxy::Test::MA::IC::__newInstance() const
{
    return new IC;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(::IceProxy::Test::MA::CC* p) { return p; }

void
::IceProxy::Test::MA::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MA::CC>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MA::CC;
        v->__copyFrom(proxy);
    }
}

::Test::MA::CCPrx
IceProxy::Test::MA::CC::ccop(const ::Test::MA::CCPrx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MA__CC__ccop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MA__CC__ccop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MA::CC* __del = dynamic_cast< ::IceDelegate::Test::MA::CC*>(__delBase.get());
            return __del->ccop(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MA::CC::begin_ccop(const ::Test::MA::CCPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MA__CC__ccop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MA__CC__ccop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MA__CC__ccop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::CCPrx
IceProxy::Test::MA::CC::end_ccop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MA__CC__ccop_name);
    ::Test::MA::CCPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MA::CC::ice_staticId()
{
    return ::Test::MA::CC::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MA::CC::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MA::CC);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MA::CC::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MA::CC);
}

::IceProxy::Ice::Object*
IceProxy::Test::MA::CC::__newInstance() const
{
    return new CC;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(::IceProxy::Test::MA::CD* p) { return p; }

void
::IceProxy::Test::MA::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MA::CD>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MA::CD;
        v->__copyFrom(proxy);
    }
}

::Test::MA::CDPrx
IceProxy::Test::MA::CD::cdop(const ::Test::MA::CDPrx& p, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__MA__CD__cdop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__MA__CD__cdop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::MA::CD* __del = dynamic_cast< ::IceDelegate::Test::MA::CD*>(__delBase.get());
            return __del->cdop(p, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::MA::CD::begin_cdop(const ::Test::MA::CDPrx& p, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__MA__CD__cdop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__MA__CD__cdop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__MA__CD__cdop_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::CDPrx
IceProxy::Test::MA::CD::end_cdop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__MA__CD__cdop_name);
    ::Test::MA::CDPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::MA::CD::ice_staticId()
{
    return ::Test::MA::CD::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MA::CD::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MA::CD);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MA::CD::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MA::CD);
}

::IceProxy::Ice::Object*
IceProxy::Test::MA::CD::__newInstance() const
{
    return new CD;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Initial* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Initial;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Test::Initial::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Test__Initial__shutdown_name);
}

::Test::MA::CAPrx
IceProxy::Test::Initial::caop(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__caop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__caop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->caop(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_caop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__caop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__caop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__caop_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::CAPrx
IceProxy::Test::Initial::end_caop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__caop_name);
    ::Test::MA::CAPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::MB::CBPrx
IceProxy::Test::Initial::cbop(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__cbop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__cbop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->cbop(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_cbop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__cbop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__cbop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__cbop_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MB::CBPrx
IceProxy::Test::Initial::end_cbop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__cbop_name);
    ::Test::MB::CBPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::MA::CCPrx
IceProxy::Test::Initial::ccop(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__ccop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__ccop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->ccop(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_ccop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__ccop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__ccop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__ccop_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::CCPrx
IceProxy::Test::Initial::end_ccop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__ccop_name);
    ::Test::MA::CCPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::MA::CDPrx
IceProxy::Test::Initial::cdop(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__cdop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__cdop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->cdop(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_cdop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__cdop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__cdop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__cdop_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::CDPrx
IceProxy::Test::Initial::end_cdop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__cdop_name);
    ::Test::MA::CDPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::MA::IAPrx
IceProxy::Test::Initial::iaop(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__iaop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__iaop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->iaop(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_iaop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__iaop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__iaop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__iaop_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::IAPrx
IceProxy::Test::Initial::end_iaop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__iaop_name);
    ::Test::MA::IAPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::MB::IB1Prx
IceProxy::Test::Initial::ib1op(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__ib1op_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__ib1op_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->ib1op(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_ib1op(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__ib1op_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__ib1op_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__ib1op_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MB::IB1Prx
IceProxy::Test::Initial::end_ib1op(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__ib1op_name);
    ::Test::MB::IB1Prx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::MB::IB2Prx
IceProxy::Test::Initial::ib2op(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__ib2op_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__ib2op_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->ib2op(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_ib2op(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__ib2op_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__ib2op_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__ib2op_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MB::IB2Prx
IceProxy::Test::Initial::end_ib2op(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__ib2op_name);
    ::Test::MB::IB2Prx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Test::MA::ICPrx
IceProxy::Test::Initial::icop(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Test__Initial__icop_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Test__Initial__icop_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Test::Initial* __del = dynamic_cast< ::IceDelegate::Test::Initial*>(__delBase.get());
            return __del->icop(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::begin_icop(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Test__Initial__icop_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Test__Initial__icop_name, __del, __cookie);
    try
    {
        __result->__prepare(__Test__Initial__icop_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Test::MA::ICPrx
IceProxy::Test::Initial::end_icop(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Test__Initial__icop_name);
    ::Test::MA::ICPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Initial::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Initial);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Initial::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Initial);
}

::IceProxy::Ice::Object*
IceProxy::Test::Initial::__newInstance() const
{
    return new Initial;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(::IceProxy::Test::MC::A* p) { return p; }

void
::IceProxy::Test::MC::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MC::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MC::A;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MC::A::ice_staticId()
{
    return ::Test::MC::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MC::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MC::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MC::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MC::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::MC::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(::IceProxy::Test::MC::B* p) { return p; }

void
::IceProxy::Test::MC::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MC::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MC::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MC::B::ice_staticId()
{
    return ::Test::MC::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MC::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MC::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MC::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MC::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::MC::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(::IceProxy::Test::MC::C* p) { return p; }

void
::IceProxy::Test::MC::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MC::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MC::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MC::C::ice_staticId()
{
    return ::Test::MC::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MC::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MC::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MC::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MC::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::MC::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(::IceProxy::Test::MC::D* p) { return p; }

void
::IceProxy::Test::MC::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MC::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MC::D;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MC::D::ice_staticId()
{
    return ::Test::MC::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MC::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MC::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MC::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MC::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::MC::D::__newInstance() const
{
    return new D;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(::IceProxy::Test::MD::A* p) { return p; }

void
::IceProxy::Test::MD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MD::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MD::A;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MD::A::ice_staticId()
{
    return ::Test::MD::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MD::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MD::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MD::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MD::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::MD::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(::IceProxy::Test::MD::B* p) { return p; }

void
::IceProxy::Test::MD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MD::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MD::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MD::B::ice_staticId()
{
    return ::Test::MD::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MD::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MD::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MD::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MD::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::MD::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(::IceProxy::Test::MD::C* p) { return p; }

void
::IceProxy::Test::MD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MD::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MD::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MD::C::ice_staticId()
{
    return ::Test::MD::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MD::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MD::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MD::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MD::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::MD::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(::IceProxy::Test::MD::D* p) { return p; }

void
::IceProxy::Test::MD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MD::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MD::D;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MD::D::ice_staticId()
{
    return ::Test::MD::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MD::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MD::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MD::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MD::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::MD::D::__newInstance() const
{
    return new D;
}
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(::IceProxy::Test::ME::A* p) { return p; }

void
::IceProxy::Test::ME::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::ME::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::ME::A;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::ME::A::ice_staticId()
{
    return ::Test::ME::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::ME::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::ME::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::ME::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::ME::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::ME::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(::IceProxy::Test::ME::B* p) { return p; }

void
::IceProxy::Test::ME::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::ME::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::ME::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::ME::B::ice_staticId()
{
    return ::Test::ME::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::ME::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::ME::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::ME::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::ME::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::ME::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(::IceProxy::Test::ME::C* p) { return p; }

void
::IceProxy::Test::ME::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::ME::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::ME::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::ME::C::ice_staticId()
{
    return ::Test::ME::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::ME::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::ME::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::ME::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::ME::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::ME::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(::IceProxy::Test::ME::D* p) { return p; }

void
::IceProxy::Test::ME::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::ME::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::ME::D;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::ME::D::ice_staticId()
{
    return ::Test::ME::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::ME::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::ME::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::ME::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::ME::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::ME::D::__newInstance() const
{
    return new D;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(::IceProxy::Test::MF::A* p) { return p; }

void
::IceProxy::Test::MF::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MF::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MF::A;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MF::A::ice_staticId()
{
    return ::Test::MF::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MF::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MF::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MF::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MF::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::MF::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(::IceProxy::Test::MF::B* p) { return p; }

void
::IceProxy::Test::MF::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MF::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MF::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MF::B::ice_staticId()
{
    return ::Test::MF::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MF::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MF::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MF::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MF::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::MF::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(::IceProxy::Test::MF::C* p) { return p; }

void
::IceProxy::Test::MF::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MF::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MF::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MF::C::ice_staticId()
{
    return ::Test::MF::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MF::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MF::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MF::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MF::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::MF::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(::IceProxy::Test::MF::D* p) { return p; }

void
::IceProxy::Test::MF::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MF::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MF::D;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MF::D::ice_staticId()
{
    return ::Test::MF::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MF::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MF::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MF::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MF::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::MF::D::__newInstance() const
{
    return new D;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(::IceProxy::Test::MG::A* p) { return p; }

void
::IceProxy::Test::MG::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MG::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MG::A;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MG::A::ice_staticId()
{
    return ::Test::MG::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MG::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MG::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MG::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MG::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::MG::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(::IceProxy::Test::MG::B* p) { return p; }

void
::IceProxy::Test::MG::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MG::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MG::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MG::B::ice_staticId()
{
    return ::Test::MG::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MG::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MG::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MG::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MG::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::MG::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(::IceProxy::Test::MG::C* p) { return p; }

void
::IceProxy::Test::MG::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MG::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MG::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MG::C::ice_staticId()
{
    return ::Test::MG::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MG::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MG::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MG::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MG::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::MG::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(::IceProxy::Test::MG::D* p) { return p; }

void
::IceProxy::Test::MG::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MG::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MG::D;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MG::D::ice_staticId()
{
    return ::Test::MG::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MG::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MG::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MG::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MG::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::MG::D::__newInstance() const
{
    return new D;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(::IceProxy::Test::MH::A* p) { return p; }

void
::IceProxy::Test::MH::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MH::A>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MH::A;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MH::A::ice_staticId()
{
    return ::Test::MH::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MH::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MH::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MH::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MH::A);
}

::IceProxy::Ice::Object*
IceProxy::Test::MH::A::__newInstance() const
{
    return new A;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(::IceProxy::Test::MH::B* p) { return p; }

void
::IceProxy::Test::MH::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MH::B>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MH::B;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MH::B::ice_staticId()
{
    return ::Test::MH::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MH::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MH::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MH::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MH::B);
}

::IceProxy::Ice::Object*
IceProxy::Test::MH::B::__newInstance() const
{
    return new B;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(::IceProxy::Test::MH::C* p) { return p; }

void
::IceProxy::Test::MH::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MH::C>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MH::C;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MH::C::ice_staticId()
{
    return ::Test::MH::C::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MH::C::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MH::C);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MH::C::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MH::C);
}

::IceProxy::Ice::Object*
IceProxy::Test::MH::C::__newInstance() const
{
    return new C;
}
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(::IceProxy::Test::MH::D* p) { return p; }

void
::IceProxy::Test::MH::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MH::D>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MH::D;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MH::D::ice_staticId()
{
    return ::Test::MH::D::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MH::D::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MH::D);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MH::D::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MH::D);
}

::IceProxy::Ice::Object*
IceProxy::Test::MH::D::__newInstance() const
{
    return new D;
}

::Test::MA::IAPrx
IceDelegateM::Test::MA::IA::iaop(const ::Test::MA::IAPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MA__IA__iaop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MA::IAPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::CAPrx
IceDelegateM::Test::MA::CA::caop(const ::Test::MA::CAPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MA__CA__caop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MA::CAPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MB::IB1Prx
IceDelegateM::Test::MB::IB1::ib1op(const ::Test::MB::IB1Prx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MB__IB1__ib1op_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MB::IB1Prx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MB::IB2Prx
IceDelegateM::Test::MB::IB2::ib2op(const ::Test::MB::IB2Prx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MB__IB2__ib2op_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MB::IB2Prx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MB::CBPrx
IceDelegateM::Test::MB::CB::cbop(const ::Test::MB::CBPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MB__CB__cbop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MB::CBPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::ICPrx
IceDelegateM::Test::MA::IC::icop(const ::Test::MA::ICPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MA__IC__icop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MA::ICPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::CCPrx
IceDelegateM::Test::MA::CC::ccop(const ::Test::MA::CCPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MA__CC__ccop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MA::CCPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::CDPrx
IceDelegateM::Test::MA::CD::cdop(const ::Test::MA::CDPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__MA__CD__cdop_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(p);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Test::MA::CDPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Test::Initial::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Test::MA::CAPrx
IceDelegateM::Test::Initial::caop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__caop_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MA::CAPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MB::CBPrx
IceDelegateM::Test::Initial::cbop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__cbop_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MB::CBPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::CCPrx
IceDelegateM::Test::Initial::ccop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__ccop_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MA::CCPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::CDPrx
IceDelegateM::Test::Initial::cdop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__cdop_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MA::CDPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::IAPrx
IceDelegateM::Test::Initial::iaop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__iaop_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MA::IAPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MB::IB1Prx
IceDelegateM::Test::Initial::ib1op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__ib1op_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MB::IB1Prx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MB::IB2Prx
IceDelegateM::Test::Initial::ib2op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__ib2op_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MB::IB2Prx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::ICPrx
IceDelegateM::Test::Initial::icop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Test__Initial__icop_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Test::MA::ICPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Test::MA::IAPrx
IceDelegateD::Test::MA::IA::iaop(const ::Test::MA::IAPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::IAPrx& __result, const ::Test::MA::IAPrx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MA::IA* servant = dynamic_cast< ::Test::MA::IA*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->iaop(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::IAPrx& _result;
        const ::Test::MA::IAPrx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MA__IA__iaop_name, ::Ice::Normal, __context);
    ::Test::MA::IAPrx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::CAPrx
IceDelegateD::Test::MA::CA::caop(const ::Test::MA::CAPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::CAPrx& __result, const ::Test::MA::CAPrx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MA::CA* servant = dynamic_cast< ::Test::MA::CA*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->caop(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::CAPrx& _result;
        const ::Test::MA::CAPrx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MA__CA__caop_name, ::Ice::Normal, __context);
    ::Test::MA::CAPrx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MB::IB1Prx
IceDelegateD::Test::MB::IB1::ib1op(const ::Test::MB::IB1Prx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MB::IB1Prx& __result, const ::Test::MB::IB1Prx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MB::IB1* servant = dynamic_cast< ::Test::MB::IB1*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ib1op(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MB::IB1Prx& _result;
        const ::Test::MB::IB1Prx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MB__IB1__ib1op_name, ::Ice::Normal, __context);
    ::Test::MB::IB1Prx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MB::IB2Prx
IceDelegateD::Test::MB::IB2::ib2op(const ::Test::MB::IB2Prx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MB::IB2Prx& __result, const ::Test::MB::IB2Prx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MB::IB2* servant = dynamic_cast< ::Test::MB::IB2*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ib2op(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MB::IB2Prx& _result;
        const ::Test::MB::IB2Prx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MB__IB2__ib2op_name, ::Ice::Normal, __context);
    ::Test::MB::IB2Prx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MB::CBPrx
IceDelegateD::Test::MB::CB::cbop(const ::Test::MB::CBPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MB::CBPrx& __result, const ::Test::MB::CBPrx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MB::CB* servant = dynamic_cast< ::Test::MB::CB*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->cbop(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MB::CBPrx& _result;
        const ::Test::MB::CBPrx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MB__CB__cbop_name, ::Ice::Normal, __context);
    ::Test::MB::CBPrx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::ICPrx
IceDelegateD::Test::MA::IC::icop(const ::Test::MA::ICPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::ICPrx& __result, const ::Test::MA::ICPrx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MA::IC* servant = dynamic_cast< ::Test::MA::IC*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->icop(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::ICPrx& _result;
        const ::Test::MA::ICPrx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MA__IC__icop_name, ::Ice::Normal, __context);
    ::Test::MA::ICPrx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::CCPrx
IceDelegateD::Test::MA::CC::ccop(const ::Test::MA::CCPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::CCPrx& __result, const ::Test::MA::CCPrx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MA::CC* servant = dynamic_cast< ::Test::MA::CC*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ccop(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::CCPrx& _result;
        const ::Test::MA::CCPrx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MA__CC__ccop_name, ::Ice::Normal, __context);
    ::Test::MA::CCPrx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::CDPrx
IceDelegateD::Test::MA::CD::cdop(const ::Test::MA::CDPrx& p, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::CDPrx& __result, const ::Test::MA::CDPrx& __p_p, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_p(__p_p)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::MA::CD* servant = dynamic_cast< ::Test::MA::CD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->cdop(_m_p, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::CDPrx& _result;
        const ::Test::MA::CDPrx& _m_p;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__MA__CD__cdop_name, ::Ice::Normal, __context);
    ::Test::MA::CDPrx __result;
    try
    {
        _DirectI __direct(__result, p, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Test::Initial::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->shutdown(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__shutdown_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Test::MA::CAPrx
IceDelegateD::Test::Initial::caop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::CAPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->caop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::CAPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__caop_name, ::Ice::Normal, __context);
    ::Test::MA::CAPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MB::CBPrx
IceDelegateD::Test::Initial::cbop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MB::CBPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->cbop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MB::CBPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__cbop_name, ::Ice::Normal, __context);
    ::Test::MB::CBPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::CCPrx
IceDelegateD::Test::Initial::ccop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::CCPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ccop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::CCPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__ccop_name, ::Ice::Normal, __context);
    ::Test::MA::CCPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::CDPrx
IceDelegateD::Test::Initial::cdop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::CDPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->cdop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::CDPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__cdop_name, ::Ice::Normal, __context);
    ::Test::MA::CDPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::IAPrx
IceDelegateD::Test::Initial::iaop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::IAPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->iaop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::IAPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__iaop_name, ::Ice::Normal, __context);
    ::Test::MA::IAPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MB::IB1Prx
IceDelegateD::Test::Initial::ib1op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MB::IB1Prx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ib1op(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MB::IB1Prx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__ib1op_name, ::Ice::Normal, __context);
    ::Test::MB::IB1Prx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MB::IB2Prx
IceDelegateD::Test::Initial::ib2op(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MB::IB2Prx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ib2op(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MB::IB2Prx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__ib2op_name, ::Ice::Normal, __context);
    ::Test::MB::IB2Prx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Test::MA::ICPrx
IceDelegateD::Test::Initial::icop(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Test::MA::ICPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Test::Initial* servant = dynamic_cast< ::Test::Initial*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->icop(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Test::MA::ICPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Test__Initial__icop_name, ::Ice::Normal, __context);
    ::Test::MA::ICPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* Test::MA::upCast(::Test::MA::IA* p) { return p; }

namespace
{
const ::std::string __Test__MA__IA_ids[2] =
{
    "::Ice::Object",
    "::Test::MA::IA"
};

}

bool
Test::MA::IA::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MA__IA_ids, __Test__MA__IA_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MA::IA::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MA__IA_ids[0], &__Test__MA__IA_ids[2]);
}

const ::std::string&
Test::MA::IA::ice_id(const ::Ice::Current&) const
{
    return __Test__MA__IA_ids[1];
}

const ::std::string&
Test::MA::IA::ice_staticId()
{
    return __Test__MA__IA_ids[1];
}

::Ice::DispatchStatus
Test::MA::IA::___iaop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MA::IAPrx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MA::IAPrx __ret = iaop(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MA__IA_all[] =
{
    "iaop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::MA::IA::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MA__IA_all, __Test__MA__IA_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MA__IA_all)
    {
        case 0:
        {
            return ___iaop(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MA::IA::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MA::IA::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::MA::__patch(IAPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MA::IAPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MA::IA::ice_staticId(), v);
    }
}

::Ice::Object* Test::MA::upCast(::Test::MA::CA* p) { return p; }
::Ice::ObjectPtr
Test::MA::CA::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MA__CA_ids[2] =
{
    "::Ice::Object",
    "::Test::MA::CA"
};

}

bool
Test::MA::CA::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MA__CA_ids, __Test__MA__CA_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MA::CA::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MA__CA_ids[0], &__Test__MA__CA_ids[2]);
}

const ::std::string&
Test::MA::CA::ice_id(const ::Ice::Current&) const
{
    return __Test__MA__CA_ids[1];
}

const ::std::string&
Test::MA::CA::ice_staticId()
{
    return __Test__MA__CA_ids[1];
}

::Ice::DispatchStatus
Test::MA::CA::___caop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MA::CAPrx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MA::CAPrx __ret = caop(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MA__CA_all[] =
{
    "caop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::MA::CA::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MA__CA_all, __Test__MA__CA_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MA__CA_all)
    {
        case 0:
        {
            return ___caop(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MA::CA::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MA::CA::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::MA::__patch(CAPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MA::CAPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MA::CA::ice_staticId(), v);
    }
}

::Ice::Object* Test::MB::upCast(::Test::MB::IB1* p) { return p; }

namespace
{
const ::std::string __Test__MB__IB1_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB1"
};

}

bool
Test::MB::IB1::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MB__IB1_ids, __Test__MB__IB1_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MB::IB1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MB__IB1_ids[0], &__Test__MB__IB1_ids[3]);
}

const ::std::string&
Test::MB::IB1::ice_id(const ::Ice::Current&) const
{
    return __Test__MB__IB1_ids[2];
}

const ::std::string&
Test::MB::IB1::ice_staticId()
{
    return __Test__MB__IB1_ids[2];
}

::Ice::DispatchStatus
Test::MB::IB1::___ib1op(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MB::IB1Prx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MB::IB1Prx __ret = ib1op(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MB__IB1_all[] =
{
    "iaop",
    "ib1op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::MB::IB1::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MB__IB1_all, __Test__MB__IB1_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MB__IB1_all)
    {
        case 0:
        {
            return ___iaop(in, current);
        }
        case 1:
        {
            return ___ib1op(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MB::IB1::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MB::IB1::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::MB::__patch(IB1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MB::IB1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MB::IB1::ice_staticId(), v);
    }
}

::Ice::Object* Test::MB::upCast(::Test::MB::IB2* p) { return p; }

namespace
{
const ::std::string __Test__MB__IB2_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB2"
};

}

bool
Test::MB::IB2::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MB__IB2_ids, __Test__MB__IB2_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MB::IB2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MB__IB2_ids[0], &__Test__MB__IB2_ids[3]);
}

const ::std::string&
Test::MB::IB2::ice_id(const ::Ice::Current&) const
{
    return __Test__MB__IB2_ids[2];
}

const ::std::string&
Test::MB::IB2::ice_staticId()
{
    return __Test__MB__IB2_ids[2];
}

::Ice::DispatchStatus
Test::MB::IB2::___ib2op(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MB::IB2Prx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MB::IB2Prx __ret = ib2op(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MB__IB2_all[] =
{
    "iaop",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::MB::IB2::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MB__IB2_all, __Test__MB__IB2_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MB__IB2_all)
    {
        case 0:
        {
            return ___iaop(in, current);
        }
        case 1:
        {
            return ___ib2op(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MB::IB2::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MB::IB2::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::MB::__patch(IB2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MB::IB2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MB::IB2::ice_staticId(), v);
    }
}

::Ice::Object* Test::MB::upCast(::Test::MB::CB* p) { return p; }
::Ice::ObjectPtr
Test::MB::CB::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MB__CB_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MB::CB"
};

}

bool
Test::MB::CB::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MB__CB_ids, __Test__MB__CB_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MB::CB::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MB__CB_ids[0], &__Test__MB__CB_ids[3]);
}

const ::std::string&
Test::MB::CB::ice_id(const ::Ice::Current&) const
{
    return __Test__MB__CB_ids[2];
}

const ::std::string&
Test::MB::CB::ice_staticId()
{
    return __Test__MB__CB_ids[2];
}

::Ice::DispatchStatus
Test::MB::CB::___cbop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MB::CBPrx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MB::CBPrx __ret = cbop(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MB__CB_all[] =
{
    "caop",
    "cbop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::MB::CB::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MB__CB_all, __Test__MB__CB_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MB__CB_all)
    {
        case 0:
        {
            return ___caop(in, current);
        }
        case 1:
        {
            return ___cbop(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MB::CB::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::Test::MA::CA::__writeImpl(__os);
}

void
Test::MB::CB::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Test::MA::CA::__readImpl(__is);
}

void 
Test::MB::__patch(CBPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MB::CBPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MB::CB::ice_staticId(), v);
    }
}

::Ice::Object* Test::MA::upCast(::Test::MA::IC* p) { return p; }

namespace
{
const ::std::string __Test__MA__IC_ids[5] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MA::IC",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
};

}

bool
Test::MA::IC::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MA__IC_ids, __Test__MA__IC_ids + 5, _s);
}

::std::vector< ::std::string>
Test::MA::IC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MA__IC_ids[0], &__Test__MA__IC_ids[5]);
}

const ::std::string&
Test::MA::IC::ice_id(const ::Ice::Current&) const
{
    return __Test__MA__IC_ids[2];
}

const ::std::string&
Test::MA::IC::ice_staticId()
{
    return __Test__MA__IC_ids[2];
}

::Ice::DispatchStatus
Test::MA::IC::___icop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MA::ICPrx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MA::ICPrx __ret = icop(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MA__IC_all[] =
{
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop"
};

}

::Ice::DispatchStatus
Test::MA::IC::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MA__IC_all, __Test__MA__IC_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MA__IC_all)
    {
        case 0:
        {
            return ___iaop(in, current);
        }
        case 1:
        {
            return ___ib1op(in, current);
        }
        case 2:
        {
            return ___ib2op(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___icop(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MA::IC::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MA::IC::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::MA::__patch(ICPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MA::ICPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MA::IC::ice_staticId(), v);
    }
}

::Ice::Object* Test::MA::upCast(::Test::MA::CC* p) { return p; }
::Ice::ObjectPtr
Test::MA::CC::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MA__CC_ids[4] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MA::CC",
    "::Test::MB::CB"
};

}

bool
Test::MA::CC::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MA__CC_ids, __Test__MA__CC_ids + 4, _s);
}

::std::vector< ::std::string>
Test::MA::CC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MA__CC_ids[0], &__Test__MA__CC_ids[4]);
}

const ::std::string&
Test::MA::CC::ice_id(const ::Ice::Current&) const
{
    return __Test__MA__CC_ids[2];
}

const ::std::string&
Test::MA::CC::ice_staticId()
{
    return __Test__MA__CC_ids[2];
}

::Ice::DispatchStatus
Test::MA::CC::___ccop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MA::CCPrx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MA::CCPrx __ret = ccop(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MA__CC_all[] =
{
    "caop",
    "cbop",
    "ccop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::MA::CC::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MA__CC_all, __Test__MA__CC_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MA__CC_all)
    {
        case 0:
        {
            return ___caop(in, current);
        }
        case 1:
        {
            return ___cbop(in, current);
        }
        case 2:
        {
            return ___ccop(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MA::CC::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::Test::MB::CB::__writeImpl(__os);
}

void
Test::MA::CC::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Test::MB::CB::__readImpl(__is);
}

void 
Test::MA::__patch(CCPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MA::CCPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MA::CC::ice_staticId(), v);
    }
}

::Ice::Object* Test::MA::upCast(::Test::MA::CD* p) { return p; }
::Ice::ObjectPtr
Test::MA::CD::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __Test__MA__CD_ids[8] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MA::CC",
    "::Test::MA::CD",
    "::Test::MA::IA",
    "::Test::MB::CB",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
};

}

bool
Test::MA::CD::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MA__CD_ids, __Test__MA__CD_ids + 8, _s);
}

::std::vector< ::std::string>
Test::MA::CD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MA__CD_ids[0], &__Test__MA__CD_ids[8]);
}

const ::std::string&
Test::MA::CD::ice_id(const ::Ice::Current&) const
{
    return __Test__MA__CD_ids[3];
}

const ::std::string&
Test::MA::CD::ice_staticId()
{
    return __Test__MA__CD_ids[3];
}

::Ice::DispatchStatus
Test::MA::CD::___cdop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Test::MA::CDPrx p;
    __is->read(p);
    __inS.endReadParams();
    ::Test::MA::CDPrx __ret = cdop(p, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__MA__CD_all[] =
{
    "caop",
    "cbop",
    "ccop",
    "cdop",
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Test::MA::CD::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__MA__CD_all, __Test__MA__CD_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__MA__CD_all)
    {
        case 0:
        {
            return ___caop(in, current);
        }
        case 1:
        {
            return ___cbop(in, current);
        }
        case 2:
        {
            return ___ccop(in, current);
        }
        case 3:
        {
            return ___cdop(in, current);
        }
        case 4:
        {
            return ___iaop(in, current);
        }
        case 5:
        {
            return ___ib1op(in, current);
        }
        case 6:
        {
            return ___ib2op(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::MA::CD::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::Test::MA::CC::__writeImpl(__os);
}

void
Test::MA::CD::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Test::MA::CC::__readImpl(__is);
}

void 
Test::MA::__patch(CDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MA::CDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MA::CD::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::Initial* p) { return p; }

namespace
{
const ::std::string __Test__Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Initial_ids, __Test__Initial_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Initial_ids[0], &__Test__Initial_ids[2]);
}

const ::std::string&
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return __Test__Initial_ids[1];
}

const ::std::string&
Test::Initial::ice_staticId()
{
    return __Test__Initial_ids[1];
}

::Ice::DispatchStatus
Test::Initial::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___caop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MA::CAPrx __ret = caop(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___cbop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MB::CBPrx __ret = cbop(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___ccop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MA::CCPrx __ret = ccop(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___cdop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MA::CDPrx __ret = cdop(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___iaop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MA::IAPrx __ret = iaop(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___ib1op(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MB::IB1Prx __ret = ib1op(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___ib2op(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MB::IB2Prx __ret = ib2op(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Test::Initial::___icop(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Test::MA::ICPrx __ret = icop(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Test__Initial_all[] =
{
    "caop",
    "cbop",
    "ccop",
    "cdop",
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop",
    "shutdown"
};

}

::Ice::DispatchStatus
Test::Initial::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Test__Initial_all, __Test__Initial_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Test__Initial_all)
    {
        case 0:
        {
            return ___caop(in, current);
        }
        case 1:
        {
            return ___cbop(in, current);
        }
        case 2:
        {
            return ___ccop(in, current);
        }
        case 3:
        {
            return ___cdop(in, current);
        }
        case 4:
        {
            return ___iaop(in, current);
        }
        case 5:
        {
            return ___ib1op(in, current);
        }
        case 6:
        {
            return ___ib2op(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
        case 11:
        {
            return ___icop(in, current);
        }
        case 12:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Test::Initial::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::Initial::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Test::__patch(InitialPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::InitialPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Initial::ice_staticId(), v);
    }
}

::Ice::Object* Test::MC::upCast(::Test::MC::A* p) { return p; }
::Ice::ObjectPtr
Test::MC::A::ice_clone() const
{
    ::Ice::Object* __p = new A(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MC__A_ids[2] =
{
    "::Ice::Object",
    "::Test::MC::A"
};

}

bool
Test::MC::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MC__A_ids, __Test__MC__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MC::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MC__A_ids[0], &__Test__MC__A_ids[2]);
}

const ::std::string&
Test::MC::A::ice_id(const ::Ice::Current&) const
{
    return __Test__MC__A_ids[1];
}

const ::std::string&
Test::MC::A::ice_staticId()
{
    return __Test__MC__A_ids[1];
}

void
Test::MC::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(aA);
    __os->endWriteSlice();
}

void
Test::MC::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(aA);
    __is->endReadSlice();
}

namespace
{

class __F__Test__MC__A : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MC::A::ice_staticId());
        return new ::Test::MC::A;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MC__A_Ptr = new __F__Test__MC__A;

class __F__Test__MC__A__Init
{
public:

    __F__Test__MC__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MC::A::ice_staticId(), __F__Test__MC__A_Ptr);
    }

    ~__F__Test__MC__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MC::A::ice_staticId());
    }
};

const __F__Test__MC__A__Init __F__Test__MC__A__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MC::A::ice_factory()
{
    return __F__Test__MC__A_Ptr;
}

void 
Test::MC::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MC::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MC::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::MC::upCast(::Test::MC::B* p) { return p; }
::Ice::ObjectPtr
Test::MC::B::ice_clone() const
{
    ::Ice::Object* __p = new B(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MC__B_ids[3] =
{
    "::Ice::Object",
    "::Test::MC::A",
    "::Test::MC::B"
};

}

bool
Test::MC::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MC__B_ids, __Test__MC__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MC::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MC__B_ids[0], &__Test__MC__B_ids[3]);
}

const ::std::string&
Test::MC::B::ice_id(const ::Ice::Current&) const
{
    return __Test__MC__B_ids[2];
}

const ::std::string&
Test::MC::B::ice_staticId()
{
    return __Test__MC__B_ids[2];
}

void
Test::MC::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(bB);
    __os->endWriteSlice();
    ::Test::MC::A::__writeImpl(__os);
}

void
Test::MC::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(bB);
    __is->endReadSlice();
    ::Test::MC::A::__readImpl(__is);
}

namespace
{

class __F__Test__MC__B : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MC::B::ice_staticId());
        return new ::Test::MC::B;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MC__B_Ptr = new __F__Test__MC__B;

class __F__Test__MC__B__Init
{
public:

    __F__Test__MC__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MC::B::ice_staticId(), __F__Test__MC__B_Ptr);
    }

    ~__F__Test__MC__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MC::B::ice_staticId());
    }
};

const __F__Test__MC__B__Init __F__Test__MC__B__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MC::B::ice_factory()
{
    return __F__Test__MC__B_Ptr;
}

void 
Test::MC::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MC::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MC::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::MC::upCast(::Test::MC::C* p) { return p; }
::Ice::ObjectPtr
Test::MC::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MC__C_ids[4] =
{
    "::Ice::Object",
    "::Test::MC::A",
    "::Test::MC::B",
    "::Test::MC::C"
};

}

bool
Test::MC::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MC__C_ids, __Test__MC__C_ids + 4, _s);
}

::std::vector< ::std::string>
Test::MC::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MC__C_ids[0], &__Test__MC__C_ids[4]);
}

const ::std::string&
Test::MC::C::ice_id(const ::Ice::Current&) const
{
    return __Test__MC__C_ids[3];
}

const ::std::string&
Test::MC::C::ice_staticId()
{
    return __Test__MC__C_ids[3];
}

void
Test::MC::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(cC);
    __os->endWriteSlice();
    ::Test::MC::B::__writeImpl(__os);
}

void
Test::MC::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(cC);
    __is->endReadSlice();
    ::Test::MC::B::__readImpl(__is);
}

namespace
{

class __F__Test__MC__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MC::C::ice_staticId());
        return new ::Test::MC::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MC__C_Ptr = new __F__Test__MC__C;

class __F__Test__MC__C__Init
{
public:

    __F__Test__MC__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MC::C::ice_staticId(), __F__Test__MC__C_Ptr);
    }

    ~__F__Test__MC__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MC::C::ice_staticId());
    }
};

const __F__Test__MC__C__Init __F__Test__MC__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MC::C::ice_factory()
{
    return __F__Test__MC__C_Ptr;
}

void 
Test::MC::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MC::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MC::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::MC::upCast(::Test::MC::D* p) { return p; }
::Ice::ObjectPtr
Test::MC::D::ice_clone() const
{
    ::Ice::Object* __p = new D(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MC__D_ids[5] =
{
    "::Ice::Object",
    "::Test::MC::A",
    "::Test::MC::B",
    "::Test::MC::C",
    "::Test::MC::D"
};

}

bool
Test::MC::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MC__D_ids, __Test__MC__D_ids + 5, _s);
}

::std::vector< ::std::string>
Test::MC::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MC__D_ids[0], &__Test__MC__D_ids[5]);
}

const ::std::string&
Test::MC::D::ice_id(const ::Ice::Current&) const
{
    return __Test__MC__D_ids[4];
}

const ::std::string&
Test::MC::D::ice_staticId()
{
    return __Test__MC__D_ids[4];
}

void
Test::MC::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(dD);
    __os->endWriteSlice();
    ::Test::MC::C::__writeImpl(__os);
}

void
Test::MC::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(dD);
    __is->endReadSlice();
    ::Test::MC::C::__readImpl(__is);
}

namespace
{

class __F__Test__MC__D : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MC::D::ice_staticId());
        return new ::Test::MC::D;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MC__D_Ptr = new __F__Test__MC__D;

class __F__Test__MC__D__Init
{
public:

    __F__Test__MC__D__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MC::D::ice_staticId(), __F__Test__MC__D_Ptr);
    }

    ~__F__Test__MC__D__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MC::D::ice_staticId());
    }
};

const __F__Test__MC__D__Init __F__Test__MC__D__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MC::D::ice_factory()
{
    return __F__Test__MC__D_Ptr;
}

void 
Test::MC::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MC::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MC::D::ice_staticId(), v);
    }
}

::Ice::Object* Test::MD::upCast(::Test::MD::A* p) { return p; }
::Ice::ObjectPtr
Test::MD::A::ice_clone() const
{
    ::Ice::Object* __p = new A(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MD__A_ids[2] =
{
    "::Ice::Object",
    "::Test::MD::A"
};

}

bool
Test::MD::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MD__A_ids, __Test__MD__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MD::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MD__A_ids[0], &__Test__MD__A_ids[2]);
}

const ::std::string&
Test::MD::A::ice_id(const ::Ice::Current&) const
{
    return __Test__MD__A_ids[1];
}

const ::std::string&
Test::MD::A::ice_staticId()
{
    return __Test__MD__A_ids[1];
}

void
Test::MD::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(aA);
    __os->endWriteSlice();
}

void
Test::MD::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(aA);
    __is->endReadSlice();
}

namespace
{

class __F__Test__MD__A : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MD::A::ice_staticId());
        return new ::Test::MD::A;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MD__A_Ptr = new __F__Test__MD__A;

class __F__Test__MD__A__Init
{
public:

    __F__Test__MD__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MD::A::ice_staticId(), __F__Test__MD__A_Ptr);
    }

    ~__F__Test__MD__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MD::A::ice_staticId());
    }
};

const __F__Test__MD__A__Init __F__Test__MD__A__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MD::A::ice_factory()
{
    return __F__Test__MD__A_Ptr;
}

void 
Test::MD::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MD::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MD::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::MD::upCast(::Test::MD::B* p) { return p; }
::Ice::ObjectPtr
Test::MD::B::ice_clone() const
{
    ::Ice::Object* __p = new B(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MD__B_ids[3] =
{
    "::Ice::Object",
    "::Test::MD::A",
    "::Test::MD::B"
};

}

bool
Test::MD::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MD__B_ids, __Test__MD__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MD::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MD__B_ids[0], &__Test__MD__B_ids[3]);
}

const ::std::string&
Test::MD::B::ice_id(const ::Ice::Current&) const
{
    return __Test__MD__B_ids[2];
}

const ::std::string&
Test::MD::B::ice_staticId()
{
    return __Test__MD__B_ids[2];
}

void
Test::MD::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(bB);
    __os->endWriteSlice();
    ::Test::MD::A::__writeImpl(__os);
}

void
Test::MD::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(bB);
    __is->endReadSlice();
    ::Test::MD::A::__readImpl(__is);
}

namespace
{

class __F__Test__MD__B : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MD::B::ice_staticId());
        return new ::Test::MD::B;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MD__B_Ptr = new __F__Test__MD__B;

class __F__Test__MD__B__Init
{
public:

    __F__Test__MD__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MD::B::ice_staticId(), __F__Test__MD__B_Ptr);
    }

    ~__F__Test__MD__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MD::B::ice_staticId());
    }
};

const __F__Test__MD__B__Init __F__Test__MD__B__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MD::B::ice_factory()
{
    return __F__Test__MD__B_Ptr;
}

void 
Test::MD::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MD::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MD::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::MD::upCast(::Test::MD::C* p) { return p; }
::Ice::ObjectPtr
Test::MD::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MD__C_ids[4] =
{
    "::Ice::Object",
    "::Test::MD::A",
    "::Test::MD::B",
    "::Test::MD::C"
};

}

bool
Test::MD::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MD__C_ids, __Test__MD__C_ids + 4, _s);
}

::std::vector< ::std::string>
Test::MD::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MD__C_ids[0], &__Test__MD__C_ids[4]);
}

const ::std::string&
Test::MD::C::ice_id(const ::Ice::Current&) const
{
    return __Test__MD__C_ids[3];
}

const ::std::string&
Test::MD::C::ice_staticId()
{
    return __Test__MD__C_ids[3];
}

void
Test::MD::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(cC);
    __os->endWriteSlice();
    ::Test::MD::B::__writeImpl(__os);
}

void
Test::MD::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(cC);
    __is->endReadSlice();
    ::Test::MD::B::__readImpl(__is);
}

namespace
{

class __F__Test__MD__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MD::C::ice_staticId());
        return new ::Test::MD::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MD__C_Ptr = new __F__Test__MD__C;

class __F__Test__MD__C__Init
{
public:

    __F__Test__MD__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MD::C::ice_staticId(), __F__Test__MD__C_Ptr);
    }

    ~__F__Test__MD__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MD::C::ice_staticId());
    }
};

const __F__Test__MD__C__Init __F__Test__MD__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MD::C::ice_factory()
{
    return __F__Test__MD__C_Ptr;
}

void 
Test::MD::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MD::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MD::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::MD::upCast(::Test::MD::D* p) { return p; }
::Ice::ObjectPtr
Test::MD::D::ice_clone() const
{
    ::Ice::Object* __p = new D(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MD__D_ids[5] =
{
    "::Ice::Object",
    "::Test::MD::A",
    "::Test::MD::B",
    "::Test::MD::C",
    "::Test::MD::D"
};

}

bool
Test::MD::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MD__D_ids, __Test__MD__D_ids + 5, _s);
}

::std::vector< ::std::string>
Test::MD::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MD__D_ids[0], &__Test__MD__D_ids[5]);
}

const ::std::string&
Test::MD::D::ice_id(const ::Ice::Current&) const
{
    return __Test__MD__D_ids[4];
}

const ::std::string&
Test::MD::D::ice_staticId()
{
    return __Test__MD__D_ids[4];
}

void
Test::MD::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(dD);
    __os->endWriteSlice();
    ::Test::MD::C::__writeImpl(__os);
}

void
Test::MD::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(dD);
    __is->endReadSlice();
    ::Test::MD::C::__readImpl(__is);
}

namespace
{

class __F__Test__MD__D : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MD::D::ice_staticId());
        return new ::Test::MD::D;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MD__D_Ptr = new __F__Test__MD__D;

class __F__Test__MD__D__Init
{
public:

    __F__Test__MD__D__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MD::D::ice_staticId(), __F__Test__MD__D_Ptr);
    }

    ~__F__Test__MD__D__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MD::D::ice_staticId());
    }
};

const __F__Test__MD__D__Init __F__Test__MD__D__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MD::D::ice_factory()
{
    return __F__Test__MD__D_Ptr;
}

void 
Test::MD::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MD::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MD::D::ice_staticId(), v);
    }
}

::Ice::Object* Test::ME::upCast(::Test::ME::A* p) { return p; }
::Ice::ObjectPtr
Test::ME::A::ice_clone() const
{
    ::Ice::Object* __p = new A(*this);
    return __p;
}

namespace
{
const ::std::string __Test__ME__A_ids[2] =
{
    "::Ice::Object",
    "::Test::ME::A"
};

}

bool
Test::ME::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__ME__A_ids, __Test__ME__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::ME::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__ME__A_ids[0], &__Test__ME__A_ids[2]);
}

const ::std::string&
Test::ME::A::ice_id(const ::Ice::Current&) const
{
    return __Test__ME__A_ids[1];
}

const ::std::string&
Test::ME::A::ice_staticId()
{
    return __Test__ME__A_ids[1];
}

void
Test::ME::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(aA);
    __os->endWriteSlice();
}

void
Test::ME::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(aA);
    __is->endReadSlice();
}

namespace
{

class __F__Test__ME__A : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::ME::A::ice_staticId());
        return new ::Test::ME::A;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__ME__A_Ptr = new __F__Test__ME__A;

class __F__Test__ME__A__Init
{
public:

    __F__Test__ME__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::ME::A::ice_staticId(), __F__Test__ME__A_Ptr);
    }

    ~__F__Test__ME__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::ME::A::ice_staticId());
    }
};

const __F__Test__ME__A__Init __F__Test__ME__A__i;

}

const ::Ice::ObjectFactoryPtr&
Test::ME::A::ice_factory()
{
    return __F__Test__ME__A_Ptr;
}

void 
Test::ME::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::ME::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::ME::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::ME::upCast(::Test::ME::B* p) { return p; }
::Ice::ObjectPtr
Test::ME::B::ice_clone() const
{
    ::Ice::Object* __p = new B(*this);
    return __p;
}

namespace
{
const ::std::string __Test__ME__B_ids[3] =
{
    "::Ice::Object",
    "::Test::ME::A",
    "::Test::ME::B"
};

}

bool
Test::ME::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__ME__B_ids, __Test__ME__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::ME::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__ME__B_ids[0], &__Test__ME__B_ids[3]);
}

const ::std::string&
Test::ME::B::ice_id(const ::Ice::Current&) const
{
    return __Test__ME__B_ids[2];
}

const ::std::string&
Test::ME::B::ice_staticId()
{
    return __Test__ME__B_ids[2];
}

void
Test::ME::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(bB);
    __os->endWriteSlice();
    ::Test::ME::A::__writeImpl(__os);
}

void
Test::ME::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(bB);
    __is->endReadSlice();
    ::Test::ME::A::__readImpl(__is);
}

namespace
{

class __F__Test__ME__B : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::ME::B::ice_staticId());
        return new ::Test::ME::B;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__ME__B_Ptr = new __F__Test__ME__B;

class __F__Test__ME__B__Init
{
public:

    __F__Test__ME__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::ME::B::ice_staticId(), __F__Test__ME__B_Ptr);
    }

    ~__F__Test__ME__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::ME::B::ice_staticId());
    }
};

const __F__Test__ME__B__Init __F__Test__ME__B__i;

}

const ::Ice::ObjectFactoryPtr&
Test::ME::B::ice_factory()
{
    return __F__Test__ME__B_Ptr;
}

void 
Test::ME::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::ME::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::ME::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::ME::upCast(::Test::ME::C* p) { return p; }
::Ice::ObjectPtr
Test::ME::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__ME__C_ids[4] =
{
    "::Ice::Object",
    "::Test::ME::A",
    "::Test::ME::B",
    "::Test::ME::C"
};

}

bool
Test::ME::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__ME__C_ids, __Test__ME__C_ids + 4, _s);
}

::std::vector< ::std::string>
Test::ME::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__ME__C_ids[0], &__Test__ME__C_ids[4]);
}

const ::std::string&
Test::ME::C::ice_id(const ::Ice::Current&) const
{
    return __Test__ME__C_ids[3];
}

const ::std::string&
Test::ME::C::ice_staticId()
{
    return __Test__ME__C_ids[3];
}

void
Test::ME::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(cC);
    __os->endWriteSlice();
    ::Test::ME::B::__writeImpl(__os);
}

void
Test::ME::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(cC);
    __is->endReadSlice();
    ::Test::ME::B::__readImpl(__is);
}

namespace
{

class __F__Test__ME__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::ME::C::ice_staticId());
        return new ::Test::ME::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__ME__C_Ptr = new __F__Test__ME__C;

class __F__Test__ME__C__Init
{
public:

    __F__Test__ME__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::ME::C::ice_staticId(), __F__Test__ME__C_Ptr);
    }

    ~__F__Test__ME__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::ME::C::ice_staticId());
    }
};

const __F__Test__ME__C__Init __F__Test__ME__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::ME::C::ice_factory()
{
    return __F__Test__ME__C_Ptr;
}

void 
Test::ME::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::ME::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::ME::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::ME::upCast(::Test::ME::D* p) { return p; }
::Ice::ObjectPtr
Test::ME::D::ice_clone() const
{
    ::Ice::Object* __p = new D(*this);
    return __p;
}

namespace
{
const ::std::string __Test__ME__D_ids[5] =
{
    "::Ice::Object",
    "::Test::ME::A",
    "::Test::ME::B",
    "::Test::ME::C",
    "::Test::ME::D"
};

}

bool
Test::ME::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__ME__D_ids, __Test__ME__D_ids + 5, _s);
}

::std::vector< ::std::string>
Test::ME::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__ME__D_ids[0], &__Test__ME__D_ids[5]);
}

const ::std::string&
Test::ME::D::ice_id(const ::Ice::Current&) const
{
    return __Test__ME__D_ids[4];
}

const ::std::string&
Test::ME::D::ice_staticId()
{
    return __Test__ME__D_ids[4];
}

void
Test::ME::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(dD);
    __os->endWriteSlice();
    ::Test::ME::C::__writeImpl(__os);
}

void
Test::ME::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(dD);
    __is->endReadSlice();
    ::Test::ME::C::__readImpl(__is);
}

namespace
{

class __F__Test__ME__D : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::ME::D::ice_staticId());
        return new ::Test::ME::D;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__ME__D_Ptr = new __F__Test__ME__D;

class __F__Test__ME__D__Init
{
public:

    __F__Test__ME__D__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::ME::D::ice_staticId(), __F__Test__ME__D_Ptr);
    }

    ~__F__Test__ME__D__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::ME::D::ice_staticId());
    }
};

const __F__Test__ME__D__Init __F__Test__ME__D__i;

}

const ::Ice::ObjectFactoryPtr&
Test::ME::D::ice_factory()
{
    return __F__Test__ME__D_Ptr;
}

void 
Test::ME::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::ME::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::ME::D::ice_staticId(), v);
    }
}

::Ice::Object* Test::MF::upCast(::Test::MF::A* p) { return p; }
::Ice::ObjectPtr
Test::MF::A::ice_clone() const
{
    ::Ice::Object* __p = new A(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MF__A_ids[2] =
{
    "::Ice::Object",
    "::Test::MF::A"
};

}

bool
Test::MF::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MF__A_ids, __Test__MF__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MF::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MF__A_ids[0], &__Test__MF__A_ids[2]);
}

const ::std::string&
Test::MF::A::ice_id(const ::Ice::Current&) const
{
    return __Test__MF__A_ids[1];
}

const ::std::string&
Test::MF::A::ice_staticId()
{
    return __Test__MF__A_ids[1];
}

void
Test::MF::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(aA);
    __os->endWriteSlice();
}

void
Test::MF::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(aA);
    __is->endReadSlice();
}

namespace
{

class __F__Test__MF__A : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MF::A::ice_staticId());
        return new ::Test::MF::A;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MF__A_Ptr = new __F__Test__MF__A;

class __F__Test__MF__A__Init
{
public:

    __F__Test__MF__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MF::A::ice_staticId(), __F__Test__MF__A_Ptr);
    }

    ~__F__Test__MF__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MF::A::ice_staticId());
    }
};

const __F__Test__MF__A__Init __F__Test__MF__A__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MF::A::ice_factory()
{
    return __F__Test__MF__A_Ptr;
}

void 
Test::MF::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MF::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MF::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::MF::upCast(::Test::MF::B* p) { return p; }
::Ice::ObjectPtr
Test::MF::B::ice_clone() const
{
    ::Ice::Object* __p = new B(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MF__B_ids[3] =
{
    "::Ice::Object",
    "::Test::MF::A",
    "::Test::MF::B"
};

}

bool
Test::MF::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MF__B_ids, __Test__MF__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MF::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MF__B_ids[0], &__Test__MF__B_ids[3]);
}

const ::std::string&
Test::MF::B::ice_id(const ::Ice::Current&) const
{
    return __Test__MF__B_ids[2];
}

const ::std::string&
Test::MF::B::ice_staticId()
{
    return __Test__MF__B_ids[2];
}

void
Test::MF::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(bB);
    __os->endWriteSlice();
    ::Test::MF::A::__writeImpl(__os);
}

void
Test::MF::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(bB);
    __is->endReadSlice();
    ::Test::MF::A::__readImpl(__is);
}

namespace
{

class __F__Test__MF__B : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MF::B::ice_staticId());
        return new ::Test::MF::B;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MF__B_Ptr = new __F__Test__MF__B;

class __F__Test__MF__B__Init
{
public:

    __F__Test__MF__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MF::B::ice_staticId(), __F__Test__MF__B_Ptr);
    }

    ~__F__Test__MF__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MF::B::ice_staticId());
    }
};

const __F__Test__MF__B__Init __F__Test__MF__B__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MF::B::ice_factory()
{
    return __F__Test__MF__B_Ptr;
}

void 
Test::MF::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MF::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MF::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::MF::upCast(::Test::MF::C* p) { return p; }
::Ice::ObjectPtr
Test::MF::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MF__C_ids[4] =
{
    "::Ice::Object",
    "::Test::MF::A",
    "::Test::MF::B",
    "::Test::MF::C"
};

}

bool
Test::MF::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MF__C_ids, __Test__MF__C_ids + 4, _s);
}

::std::vector< ::std::string>
Test::MF::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MF__C_ids[0], &__Test__MF__C_ids[4]);
}

const ::std::string&
Test::MF::C::ice_id(const ::Ice::Current&) const
{
    return __Test__MF__C_ids[3];
}

const ::std::string&
Test::MF::C::ice_staticId()
{
    return __Test__MF__C_ids[3];
}

void
Test::MF::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(cC);
    __os->endWriteSlice();
    ::Test::MF::B::__writeImpl(__os);
}

void
Test::MF::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(cC);
    __is->endReadSlice();
    ::Test::MF::B::__readImpl(__is);
}

namespace
{

class __F__Test__MF__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MF::C::ice_staticId());
        return new ::Test::MF::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MF__C_Ptr = new __F__Test__MF__C;

class __F__Test__MF__C__Init
{
public:

    __F__Test__MF__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MF::C::ice_staticId(), __F__Test__MF__C_Ptr);
    }

    ~__F__Test__MF__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MF::C::ice_staticId());
    }
};

const __F__Test__MF__C__Init __F__Test__MF__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MF::C::ice_factory()
{
    return __F__Test__MF__C_Ptr;
}

void 
Test::MF::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MF::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MF::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::MF::upCast(::Test::MF::D* p) { return p; }
::Ice::ObjectPtr
Test::MF::D::ice_clone() const
{
    ::Ice::Object* __p = new D(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MF__D_ids[5] =
{
    "::Ice::Object",
    "::Test::MF::A",
    "::Test::MF::B",
    "::Test::MF::C",
    "::Test::MF::D"
};

}

bool
Test::MF::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MF__D_ids, __Test__MF__D_ids + 5, _s);
}

::std::vector< ::std::string>
Test::MF::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MF__D_ids[0], &__Test__MF__D_ids[5]);
}

const ::std::string&
Test::MF::D::ice_id(const ::Ice::Current&) const
{
    return __Test__MF__D_ids[4];
}

const ::std::string&
Test::MF::D::ice_staticId()
{
    return __Test__MF__D_ids[4];
}

void
Test::MF::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(dD);
    __os->endWriteSlice();
    ::Test::MF::C::__writeImpl(__os);
}

void
Test::MF::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(dD);
    __is->endReadSlice();
    ::Test::MF::C::__readImpl(__is);
}

namespace
{

class __F__Test__MF__D : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MF::D::ice_staticId());
        return new ::Test::MF::D;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MF__D_Ptr = new __F__Test__MF__D;

class __F__Test__MF__D__Init
{
public:

    __F__Test__MF__D__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MF::D::ice_staticId(), __F__Test__MF__D_Ptr);
    }

    ~__F__Test__MF__D__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MF::D::ice_staticId());
    }
};

const __F__Test__MF__D__Init __F__Test__MF__D__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MF::D::ice_factory()
{
    return __F__Test__MF__D_Ptr;
}

void 
Test::MF::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MF::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MF::D::ice_staticId(), v);
    }
}

::Ice::Object* Test::MG::upCast(::Test::MG::A* p) { return p; }
::Ice::ObjectPtr
Test::MG::A::ice_clone() const
{
    ::Ice::Object* __p = new A(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MG__A_ids[2] =
{
    "::Ice::Object",
    "::Test::MG::A"
};

}

bool
Test::MG::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MG__A_ids, __Test__MG__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MG::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MG__A_ids[0], &__Test__MG__A_ids[2]);
}

const ::std::string&
Test::MG::A::ice_id(const ::Ice::Current&) const
{
    return __Test__MG__A_ids[1];
}

const ::std::string&
Test::MG::A::ice_staticId()
{
    return __Test__MG__A_ids[1];
}

void
Test::MG::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(aA);
    __os->endWriteSlice();
}

void
Test::MG::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(aA);
    __is->endReadSlice();
}

namespace
{

class __F__Test__MG__A : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MG::A::ice_staticId());
        return new ::Test::MG::A;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MG__A_Ptr = new __F__Test__MG__A;

class __F__Test__MG__A__Init
{
public:

    __F__Test__MG__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MG::A::ice_staticId(), __F__Test__MG__A_Ptr);
    }

    ~__F__Test__MG__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MG::A::ice_staticId());
    }
};

const __F__Test__MG__A__Init __F__Test__MG__A__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MG::A::ice_factory()
{
    return __F__Test__MG__A_Ptr;
}

void 
Test::MG::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MG::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MG::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::MG::upCast(::Test::MG::B* p) { return p; }
::Ice::ObjectPtr
Test::MG::B::ice_clone() const
{
    ::Ice::Object* __p = new B(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MG__B_ids[3] =
{
    "::Ice::Object",
    "::Test::MG::A",
    "::Test::MG::B"
};

}

bool
Test::MG::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MG__B_ids, __Test__MG__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MG::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MG__B_ids[0], &__Test__MG__B_ids[3]);
}

const ::std::string&
Test::MG::B::ice_id(const ::Ice::Current&) const
{
    return __Test__MG__B_ids[2];
}

const ::std::string&
Test::MG::B::ice_staticId()
{
    return __Test__MG__B_ids[2];
}

void
Test::MG::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(bB);
    __os->endWriteSlice();
    ::Test::MG::A::__writeImpl(__os);
}

void
Test::MG::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(bB);
    __is->endReadSlice();
    ::Test::MG::A::__readImpl(__is);
}

namespace
{

class __F__Test__MG__B : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MG::B::ice_staticId());
        return new ::Test::MG::B;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MG__B_Ptr = new __F__Test__MG__B;

class __F__Test__MG__B__Init
{
public:

    __F__Test__MG__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MG::B::ice_staticId(), __F__Test__MG__B_Ptr);
    }

    ~__F__Test__MG__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MG::B::ice_staticId());
    }
};

const __F__Test__MG__B__Init __F__Test__MG__B__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MG::B::ice_factory()
{
    return __F__Test__MG__B_Ptr;
}

void 
Test::MG::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MG::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MG::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::MG::upCast(::Test::MG::C* p) { return p; }
::Ice::ObjectPtr
Test::MG::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MG__C_ids[4] =
{
    "::Ice::Object",
    "::Test::MG::A",
    "::Test::MG::B",
    "::Test::MG::C"
};

}

bool
Test::MG::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MG__C_ids, __Test__MG__C_ids + 4, _s);
}

::std::vector< ::std::string>
Test::MG::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MG__C_ids[0], &__Test__MG__C_ids[4]);
}

const ::std::string&
Test::MG::C::ice_id(const ::Ice::Current&) const
{
    return __Test__MG__C_ids[3];
}

const ::std::string&
Test::MG::C::ice_staticId()
{
    return __Test__MG__C_ids[3];
}

void
Test::MG::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(cC);
    __os->endWriteSlice();
    ::Test::MG::B::__writeImpl(__os);
}

void
Test::MG::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(cC);
    __is->endReadSlice();
    ::Test::MG::B::__readImpl(__is);
}

namespace
{

class __F__Test__MG__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MG::C::ice_staticId());
        return new ::Test::MG::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MG__C_Ptr = new __F__Test__MG__C;

class __F__Test__MG__C__Init
{
public:

    __F__Test__MG__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MG::C::ice_staticId(), __F__Test__MG__C_Ptr);
    }

    ~__F__Test__MG__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MG::C::ice_staticId());
    }
};

const __F__Test__MG__C__Init __F__Test__MG__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MG::C::ice_factory()
{
    return __F__Test__MG__C_Ptr;
}

void 
Test::MG::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MG::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MG::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::MG::upCast(::Test::MG::D* p) { return p; }
::Ice::ObjectPtr
Test::MG::D::ice_clone() const
{
    ::Ice::Object* __p = new D(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MG__D_ids[5] =
{
    "::Ice::Object",
    "::Test::MG::A",
    "::Test::MG::B",
    "::Test::MG::C",
    "::Test::MG::D"
};

}

bool
Test::MG::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MG__D_ids, __Test__MG__D_ids + 5, _s);
}

::std::vector< ::std::string>
Test::MG::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MG__D_ids[0], &__Test__MG__D_ids[5]);
}

const ::std::string&
Test::MG::D::ice_id(const ::Ice::Current&) const
{
    return __Test__MG__D_ids[4];
}

const ::std::string&
Test::MG::D::ice_staticId()
{
    return __Test__MG__D_ids[4];
}

void
Test::MG::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(dD);
    __os->endWriteSlice();
    ::Test::MG::C::__writeImpl(__os);
}

void
Test::MG::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(dD);
    __is->endReadSlice();
    ::Test::MG::C::__readImpl(__is);
}

namespace
{

class __F__Test__MG__D : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MG::D::ice_staticId());
        return new ::Test::MG::D;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MG__D_Ptr = new __F__Test__MG__D;

class __F__Test__MG__D__Init
{
public:

    __F__Test__MG__D__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MG::D::ice_staticId(), __F__Test__MG__D_Ptr);
    }

    ~__F__Test__MG__D__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MG::D::ice_staticId());
    }
};

const __F__Test__MG__D__Init __F__Test__MG__D__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MG::D::ice_factory()
{
    return __F__Test__MG__D_Ptr;
}

void 
Test::MG::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MG::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MG::D::ice_staticId(), v);
    }
}

::Ice::Object* Test::MH::upCast(::Test::MH::A* p) { return p; }
::Ice::ObjectPtr
Test::MH::A::ice_clone() const
{
    ::Ice::Object* __p = new A(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MH__A_ids[2] =
{
    "::Ice::Object",
    "::Test::MH::A"
};

}

bool
Test::MH::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MH__A_ids, __Test__MH__A_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MH::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MH__A_ids[0], &__Test__MH__A_ids[2]);
}

const ::std::string&
Test::MH::A::ice_id(const ::Ice::Current&) const
{
    return __Test__MH__A_ids[1];
}

const ::std::string&
Test::MH::A::ice_staticId()
{
    return __Test__MH__A_ids[1];
}

void
Test::MH::A::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(aA);
    __os->endWriteSlice();
}

void
Test::MH::A::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(aA);
    __is->endReadSlice();
}

namespace
{

class __F__Test__MH__A : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MH::A::ice_staticId());
        return new ::Test::MH::A;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MH__A_Ptr = new __F__Test__MH__A;

class __F__Test__MH__A__Init
{
public:

    __F__Test__MH__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MH::A::ice_staticId(), __F__Test__MH__A_Ptr);
    }

    ~__F__Test__MH__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MH::A::ice_staticId());
    }
};

const __F__Test__MH__A__Init __F__Test__MH__A__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MH::A::ice_factory()
{
    return __F__Test__MH__A_Ptr;
}

void 
Test::MH::__patch(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MH::APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MH::A::ice_staticId(), v);
    }
}

::Ice::Object* Test::MH::upCast(::Test::MH::B* p) { return p; }
::Ice::ObjectPtr
Test::MH::B::ice_clone() const
{
    ::Ice::Object* __p = new B(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MH__B_ids[3] =
{
    "::Ice::Object",
    "::Test::MH::A",
    "::Test::MH::B"
};

}

bool
Test::MH::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MH__B_ids, __Test__MH__B_ids + 3, _s);
}

::std::vector< ::std::string>
Test::MH::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MH__B_ids[0], &__Test__MH__B_ids[3]);
}

const ::std::string&
Test::MH::B::ice_id(const ::Ice::Current&) const
{
    return __Test__MH__B_ids[2];
}

const ::std::string&
Test::MH::B::ice_staticId()
{
    return __Test__MH__B_ids[2];
}

void
Test::MH::B::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(bB);
    __os->endWriteSlice();
    ::Test::MH::A::__writeImpl(__os);
}

void
Test::MH::B::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(bB);
    __is->endReadSlice();
    ::Test::MH::A::__readImpl(__is);
}

namespace
{

class __F__Test__MH__B : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MH::B::ice_staticId());
        return new ::Test::MH::B;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MH__B_Ptr = new __F__Test__MH__B;

class __F__Test__MH__B__Init
{
public:

    __F__Test__MH__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MH::B::ice_staticId(), __F__Test__MH__B_Ptr);
    }

    ~__F__Test__MH__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MH::B::ice_staticId());
    }
};

const __F__Test__MH__B__Init __F__Test__MH__B__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MH::B::ice_factory()
{
    return __F__Test__MH__B_Ptr;
}

void 
Test::MH::__patch(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MH::BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MH::B::ice_staticId(), v);
    }
}

::Ice::Object* Test::MH::upCast(::Test::MH::C* p) { return p; }
::Ice::ObjectPtr
Test::MH::C::ice_clone() const
{
    ::Ice::Object* __p = new C(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MH__C_ids[4] =
{
    "::Ice::Object",
    "::Test::MH::A",
    "::Test::MH::B",
    "::Test::MH::C"
};

}

bool
Test::MH::C::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MH__C_ids, __Test__MH__C_ids + 4, _s);
}

::std::vector< ::std::string>
Test::MH::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MH__C_ids[0], &__Test__MH__C_ids[4]);
}

const ::std::string&
Test::MH::C::ice_id(const ::Ice::Current&) const
{
    return __Test__MH__C_ids[3];
}

const ::std::string&
Test::MH::C::ice_staticId()
{
    return __Test__MH__C_ids[3];
}

void
Test::MH::C::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(cC);
    __os->endWriteSlice();
    ::Test::MH::B::__writeImpl(__os);
}

void
Test::MH::C::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(cC);
    __is->endReadSlice();
    ::Test::MH::B::__readImpl(__is);
}

namespace
{

class __F__Test__MH__C : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MH::C::ice_staticId());
        return new ::Test::MH::C;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MH__C_Ptr = new __F__Test__MH__C;

class __F__Test__MH__C__Init
{
public:

    __F__Test__MH__C__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MH::C::ice_staticId(), __F__Test__MH__C_Ptr);
    }

    ~__F__Test__MH__C__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MH::C::ice_staticId());
    }
};

const __F__Test__MH__C__Init __F__Test__MH__C__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MH::C::ice_factory()
{
    return __F__Test__MH__C_Ptr;
}

void 
Test::MH::__patch(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MH::CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MH::C::ice_staticId(), v);
    }
}

::Ice::Object* Test::MH::upCast(::Test::MH::D* p) { return p; }
::Ice::ObjectPtr
Test::MH::D::ice_clone() const
{
    ::Ice::Object* __p = new D(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MH__D_ids[5] =
{
    "::Ice::Object",
    "::Test::MH::A",
    "::Test::MH::B",
    "::Test::MH::C",
    "::Test::MH::D"
};

}

bool
Test::MH::D::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MH__D_ids, __Test__MH__D_ids + 5, _s);
}

::std::vector< ::std::string>
Test::MH::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MH__D_ids[0], &__Test__MH__D_ids[5]);
}

const ::std::string&
Test::MH::D::ice_id(const ::Ice::Current&) const
{
    return __Test__MH__D_ids[4];
}

const ::std::string&
Test::MH::D::ice_staticId()
{
    return __Test__MH__D_ids[4];
}

void
Test::MH::D::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(dD);
    __os->endWriteSlice();
    ::Test::MH::C::__writeImpl(__os);
}

void
Test::MH::D::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(dD);
    __is->endReadSlice();
    ::Test::MH::C::__readImpl(__is);
}

namespace
{

class __F__Test__MH__D : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MH::D::ice_staticId());
        return new ::Test::MH::D;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MH__D_Ptr = new __F__Test__MH__D;

class __F__Test__MH__D__Init
{
public:

    __F__Test__MH__D__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MH::D::ice_staticId(), __F__Test__MH__D_Ptr);
    }

    ~__F__Test__MH__D__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MH::D::ice_staticId());
    }
};

const __F__Test__MH__D__Init __F__Test__MH__D__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MH::D::ice_factory()
{
    return __F__Test__MH__D_Ptr;
}

void 
Test::MH::__patch(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MH::DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MH::D::ice_staticId(), v);
    }
}
