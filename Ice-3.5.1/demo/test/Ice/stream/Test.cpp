// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/Stream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}

namespace
{

const char* __Test__MyException_name = "Test::MyException";

struct __F__Test__MyException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::MyException();
    }
};

class __F__Test__MyException__Init
{
public:

    __F__Test__MyException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::MyException", new __F__Test__MyException);
    }

    ~__F__Test__MyException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::MyException");
    }
};

const __F__Test__MyException__Init __F__Test__MyException__i;

}

Test::MyException::MyException(const ::Test::MyClassPtr& __ice_c) :
    ::Ice::UserException(),
    c(__ice_c)
{
}

Test::MyException::~MyException() throw()
{
}

::std::string
Test::MyException::ice_name() const
{
    return __Test__MyException_name;
}

Test::MyException*
Test::MyException::ice_clone() const
{
    return new MyException(*this);
}

void
Test::MyException::ice_throw() const
{
    throw *this;
}

bool
Test::MyException::__usesClasses() const
{
    return true;
}

void
Test::MyException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::MyException", -1, true);
    __os->write(c);
    __os->endWriteSlice();
}

void
Test::MyException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(c);
    __is->endReadSlice();
}

void
Test::MyException::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice("::Test::MyException", -1, true);
    __os->write(c);
    __os->endSlice();
}

void
Test::MyException::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(c);
    __is->endSlice();
}

namespace
{

const char* __Test__Sub__NestedException_name = "Test::Sub::NestedException";

struct __F__Test__Sub__NestedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::Sub::NestedException();
    }
};

class __F__Test__Sub__NestedException__Init
{
public:

    __F__Test__Sub__NestedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::Sub::NestedException", new __F__Test__Sub__NestedException);
    }

    ~__F__Test__Sub__NestedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::Sub::NestedException");
    }
};

const __F__Test__Sub__NestedException__Init __F__Test__Sub__NestedException__i;

}

Test::Sub::NestedException::NestedException(const ::std::string& __ice_str) :
    ::Ice::UserException(),
    str(__ice_str)
{
}

Test::Sub::NestedException::~NestedException() throw()
{
}

::std::string
Test::Sub::NestedException::ice_name() const
{
    return __Test__Sub__NestedException_name;
}

Test::Sub::NestedException*
Test::Sub::NestedException::ice_clone() const
{
    return new NestedException(*this);
}

void
Test::Sub::NestedException::ice_throw() const
{
    throw *this;
}

void
Test::Sub::NestedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::Sub::NestedException", -1, true);
    __os->write(str);
    __os->endWriteSlice();
}

void
Test::Sub::NestedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(str);
    __is->endReadSlice();
}

void
Test::Sub::NestedException::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice("::Test::Sub::NestedException", -1, true);
    __os->write(str);
    __os->endSlice();
}

void
Test::Sub::NestedException::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(str);
    __is->endSlice();
}

namespace
{

const char* __Test2__Sub2__NestedException2_name = "Test2::Sub2::NestedException2";

struct __F__Test2__Sub2__NestedException2 : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test2::Sub2::NestedException2();
    }
};

class __F__Test2__Sub2__NestedException2__Init
{
public:

    __F__Test2__Sub2__NestedException2__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test2::Sub2::NestedException2", new __F__Test2__Sub2__NestedException2);
    }

    ~__F__Test2__Sub2__NestedException2__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test2::Sub2::NestedException2");
    }
};

const __F__Test2__Sub2__NestedException2__Init __F__Test2__Sub2__NestedException2__i;

}

Test2::Sub2::NestedException2::NestedException2(const ::std::string& __ice_str) :
    ::Ice::UserException(),
    str(__ice_str)
{
}

Test2::Sub2::NestedException2::~NestedException2() throw()
{
}

::std::string
Test2::Sub2::NestedException2::ice_name() const
{
    return __Test2__Sub2__NestedException2_name;
}

Test2::Sub2::NestedException2*
Test2::Sub2::NestedException2::ice_clone() const
{
    return new NestedException2(*this);
}

void
Test2::Sub2::NestedException2::ice_throw() const
{
    throw *this;
}

void
Test2::Sub2::NestedException2::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test2::Sub2::NestedException2", -1, true);
    __os->write(str);
    __os->endWriteSlice();
}

void
Test2::Sub2::NestedException2::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(str);
    __is->endReadSlice();
}

void
Test2::Sub2::NestedException2::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice("::Test2::Sub2::NestedException2", -1, true);
    __os->write(str);
    __os->endSlice();
}

void
Test2::Sub2::NestedException2::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(str);
    __is->endSlice();
}

namespace Ice
{
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::OptionalClass* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::OptionalClass>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::OptionalClass;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::OptionalClass::ice_staticId()
{
    return ::Test::OptionalClass::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::OptionalClass::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::OptionalClass);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::OptionalClass::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::OptionalClass);
}

::IceProxy::Ice::Object*
IceProxy::Test::OptionalClass::__newInstance() const
{
    return new OptionalClass;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MyClass* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MyClass;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MyClass::ice_staticId()
{
    return ::Test::MyClass::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MyClass::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MyClass);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MyClass::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MyClass);
}

::IceProxy::Ice::Object*
IceProxy::Test::MyClass::__newInstance() const
{
    return new MyClass;
}
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::MyInterface* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::MyInterface>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::MyInterface;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::MyInterface::ice_staticId()
{
    return ::Test::MyInterface::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::MyInterface::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::MyInterface);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::MyInterface::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::MyInterface);
}

::IceProxy::Ice::Object*
IceProxy::Test::MyInterface::__newInstance() const
{
    return new MyInterface;
}

::Ice::Object* Test::upCast(::Test::OptionalClass* p) { return p; }
::Ice::ObjectPtr
Test::OptionalClass::ice_clone() const
{
    ::Ice::Object* __p = new OptionalClass(*this);
    return __p;
}

namespace
{
const ::std::string __Test__OptionalClass_ids[2] =
{
    "::Ice::Object",
    "::Test::OptionalClass"
};

}

bool
Test::OptionalClass::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__OptionalClass_ids, __Test__OptionalClass_ids + 2, _s);
}

::std::vector< ::std::string>
Test::OptionalClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__OptionalClass_ids[0], &__Test__OptionalClass_ids[2]);
}

const ::std::string&
Test::OptionalClass::ice_id(const ::Ice::Current&) const
{
    return __Test__OptionalClass_ids[1];
}

const ::std::string&
Test::OptionalClass::ice_staticId()
{
    return __Test__OptionalClass_ids[1];
}

void
Test::OptionalClass::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(bo);
    __os->write(by);
    __os->write(1, sh);
    __os->write(2, i);
    __os->endWriteSlice();
}

void
Test::OptionalClass::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(bo);
    __is->read(by);
    __is->read(1, sh);
    __is->read(2, i);
    __is->endReadSlice();
}

void
Test::OptionalClass::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->write(bo);
    __os->write(by);
    __os->write(1, sh);
    __os->write(2, i);
    __os->endSlice();
}

void
Test::OptionalClass::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(bo);
    __is->read(by);
    __is->read(1, sh);
    __is->read(2, i);
    __is->endSlice();
}

namespace
{

class __F__Test__OptionalClass : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::OptionalClass::ice_staticId());
        return new ::Test::OptionalClass;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__OptionalClass_Ptr = new __F__Test__OptionalClass;

class __F__Test__OptionalClass__Init
{
public:

    __F__Test__OptionalClass__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::OptionalClass::ice_staticId(), __F__Test__OptionalClass_Ptr);
    }

    ~__F__Test__OptionalClass__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::OptionalClass::ice_staticId());
    }
};

const __F__Test__OptionalClass__Init __F__Test__OptionalClass__i;

}

const ::Ice::ObjectFactoryPtr&
Test::OptionalClass::ice_factory()
{
    return __F__Test__OptionalClass_Ptr;
}

void 
Test::__patch(OptionalClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::OptionalClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::OptionalClass::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::MyClass* p) { return p; }
::Ice::ObjectPtr
Test::MyClass::ice_clone() const
{
    ::Ice::Object* __p = new MyClass(*this);
    return __p;
}

namespace
{
const ::std::string __Test__MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};

}

bool
Test::MyClass::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MyClass_ids, __Test__MyClass_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MyClass_ids[0], &__Test__MyClass_ids[2]);
}

const ::std::string&
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return __Test__MyClass_ids[1];
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    return __Test__MyClass_ids[1];
}

void
Test::MyClass::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
Test::MyClass::__usesGC()
{
    return true;
}

void
Test::MyClass::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(c)
    {
        ::Test::upCast(c.get())->__addObject(_c);
    }
    if(o)
    {
        o->__addObject(_c);
    }
    {
        for(::Test::MyClassS::const_iterator _i0 = seq10.begin(); _i0 != seq10.end(); ++_i0)
        {
            if((*_i0))
            {
                ::Test::upCast((*_i0).get())->__addObject(_c);
            }
        }
    }
    {
        for(::Test::StringMyClassD::const_iterator _i0 = d.begin(); _i0 != d.end(); ++_i0)
        {
            if((*_i0).second)
            {
                ::Test::upCast((*_i0).second.get())->__addObject(_c);
            }
        }
    }
}

void
Test::MyClass::__gcClear()
{
    if(c)
    {
        if(::Test::upCast(c.get())->__usesGC())
        {
            ::Test::upCast(c.get())->__decRefUnsafe();
            c.__clearHandleUnsafe();
        }
        else
        {
            c = 0;
        }
    }
    if(o)
    {
        if(o->__usesGC())
        {
            o->__decRefUnsafe();
            o.__clearHandleUnsafe();
        }
        else
        {
            o = 0;
        }
    }
    {
        for(::Test::MyClassS::iterator _i0 = seq10.begin(); _i0 != seq10.end(); ++_i0)
        {
            if((*_i0))
            {
                if(::Test::upCast((*_i0).get())->__usesGC())
                {
                    ::Test::upCast((*_i0).get())->__decRefUnsafe();
                    (*_i0).__clearHandleUnsafe();
                }
                else
                {
                    (*_i0) = 0;
                }
            }
        }
    }
    {
        for(::Test::StringMyClassD::iterator _i0 = d.begin(); _i0 != d.end(); ++_i0)
        {
            if((*_i0).second)
            {
                if(::Test::upCast((*_i0).second.get())->__usesGC())
                {
                    ::Test::upCast((*_i0).second.get())->__decRefUnsafe();
                    (*_i0).second.__clearHandleUnsafe();
                }
                else
                {
                    (*_i0).second = 0;
                }
            }
        }
    }
}

void
Test::MyClass::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(c);
    __os->write(o);
    __os->write(s);
    __os->write(seq1);
    __os->write(seq2);
    __os->write(seq3);
    __os->write(seq4);
    __os->write(seq5);
    __os->write(seq6);
    __os->write(seq7);
    __os->write(seq8);
    __os->write(seq9);
    __os->write(seq10);
    __os->write(d);
    __os->endWriteSlice();
}

void
Test::MyClass::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(c);
    __is->read(o);
    __is->read(s);
    __is->read(seq1);
    __is->read(seq2);
    __is->read(seq3);
    __is->read(seq4);
    __is->read(seq5);
    __is->read(seq6);
    __is->read(seq7);
    __is->read(seq8);
    __is->read(seq9);
    __is->read(seq10);
    __is->read(d);
    __is->endReadSlice();
}

void
Test::MyClass::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->write(c);
    __os->write(o);
    __os->write(s);
    __os->write(seq1);
    __os->write(seq2);
    __os->write(seq3);
    __os->write(seq4);
    __os->write(seq5);
    __os->write(seq6);
    __os->write(seq7);
    __os->write(seq8);
    __os->write(seq9);
    __os->write(seq10);
    __os->write(d);
    __os->endSlice();
}

void
Test::MyClass::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->read(c);
    __is->read(o);
    __is->read(s);
    __is->read(seq1);
    __is->read(seq2);
    __is->read(seq3);
    __is->read(seq4);
    __is->read(seq5);
    __is->read(seq6);
    __is->read(seq7);
    __is->read(seq8);
    __is->read(seq9);
    __is->read(seq10);
    __is->read(d);
    __is->endSlice();
}

namespace
{

class __F__Test__MyClass : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::MyClass::ice_staticId());
        return new ::Test::MyClass;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__MyClass_Ptr = new __F__Test__MyClass;

class __F__Test__MyClass__Init
{
public:

    __F__Test__MyClass__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::MyClass::ice_staticId(), __F__Test__MyClass_Ptr);
    }

    ~__F__Test__MyClass__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::MyClass::ice_staticId());
    }
};

const __F__Test__MyClass__Init __F__Test__MyClass__i;

}

const ::Ice::ObjectFactoryPtr&
Test::MyClass::ice_factory()
{
    return __F__Test__MyClass_Ptr;
}

void 
Test::__patch(MyClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MyClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MyClass::ice_staticId(), v);
    }
}

::Ice::Object* Test::upCast(::Test::MyInterface* p) { return p; }

namespace
{
const ::std::string __Test__MyInterface_ids[2] =
{
    "::Ice::Object",
    "::Test::MyInterface"
};

}

bool
Test::MyInterface::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__MyInterface_ids, __Test__MyInterface_ids + 2, _s);
}

::std::vector< ::std::string>
Test::MyInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__MyInterface_ids[0], &__Test__MyInterface_ids[2]);
}

const ::std::string&
Test::MyInterface::ice_id(const ::Ice::Current&) const
{
    return __Test__MyInterface_ids[1];
}

const ::std::string&
Test::MyInterface::ice_staticId()
{
    return __Test__MyInterface_ids[1];
}

void
Test::MyInterface::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Test::MyInterface::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void
Test::MyInterface::__writeImpl(const ::Ice::OutputStreamPtr& __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->endSlice();
}

void
Test::MyInterface::__readImpl(const ::Ice::InputStreamPtr& __is)
{
    __is->startSlice();
    __is->endSlice();
}

void 
Test::__patch(MyInterfacePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::MyInterfacePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::MyInterface::ice_staticId(), v);
    }
}
