// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __TestAMD_h__
#define __TestAMD_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class Metrics;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Metrics>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Metrics*);

class Controller;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Controller>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Controller*);

}

}

namespace Test
{

class Metrics;
bool operator==(const Metrics&, const Metrics&);
bool operator<(const Metrics&, const Metrics&);
::Ice::Object* upCast(::Test::Metrics*);
typedef ::IceInternal::Handle< ::Test::Metrics> MetricsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Metrics> MetricsPrx;
void __patch(MetricsPtr&, const ::Ice::ObjectPtr&);

class Controller;
bool operator==(const Controller&, const Controller&);
bool operator<(const Controller&, const Controller&);
::Ice::Object* upCast(::Test::Controller*);
typedef ::IceInternal::Handle< ::Test::Controller> ControllerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Controller> ControllerPrx;
void __patch(ControllerPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class UserEx : public ::Ice::UserException
{
public:

    UserEx() {}
    virtual ~UserEx() throw();

    virtual ::std::string ice_name() const;
    virtual UserEx* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static UserEx __UserEx_init;

typedef ::std::vector< ::Ice::Byte> ByteSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::UserEx>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test
{

class AMD_Metrics_op : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Metrics_op> AMD_Metrics_opPtr;

class AMD_Metrics_fail : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Metrics_fail> AMD_Metrics_failPtr;

class AMD_Metrics_opWithUserException : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Metrics_opWithUserException> AMD_Metrics_opWithUserExceptionPtr;

class AMD_Metrics_opWithRequestFailedException : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Metrics_opWithRequestFailedException> AMD_Metrics_opWithRequestFailedExceptionPtr;

class AMD_Metrics_opWithLocalException : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Metrics_opWithLocalException> AMD_Metrics_opWithLocalExceptionPtr;

class AMD_Metrics_opWithUnknownException : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Metrics_opWithUnknownException> AMD_Metrics_opWithUnknownExceptionPtr;

class AMD_Metrics_opByteS : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Metrics_opByteS> AMD_Metrics_opByteSPtr;

}

namespace IceAsync
{

namespace Test
{

class AMD_Metrics_op : public ::Test::AMD_Metrics_op, public ::IceInternal::IncomingAsync
{
public:

    AMD_Metrics_op(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Metrics_fail : public ::Test::AMD_Metrics_fail, public ::IceInternal::IncomingAsync
{
public:

    AMD_Metrics_fail(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Metrics_opWithUserException : public ::Test::AMD_Metrics_opWithUserException, public ::IceInternal::IncomingAsync
{
public:

    AMD_Metrics_opWithUserException(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Metrics_opWithRequestFailedException : public ::Test::AMD_Metrics_opWithRequestFailedException, public ::IceInternal::IncomingAsync
{
public:

    AMD_Metrics_opWithRequestFailedException(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Metrics_opWithLocalException : public ::Test::AMD_Metrics_opWithLocalException, public ::IceInternal::IncomingAsync
{
public:

    AMD_Metrics_opWithLocalException(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Metrics_opWithUnknownException : public ::Test::AMD_Metrics_opWithUnknownException, public ::IceInternal::IncomingAsync
{
public:

    AMD_Metrics_opWithUnknownException(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Metrics_opByteS : public ::Test::AMD_Metrics_opByteS, public ::IceInternal::IncomingAsync
{
public:

    AMD_Metrics_opByteS(::IceInternal::Incoming&);

    virtual void ice_response();
};

}

}

namespace Test
{

class Callback_Metrics_op_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_op_Base> Callback_Metrics_opPtr;

class Callback_Metrics_fail_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_fail_Base> Callback_Metrics_failPtr;

class Callback_Metrics_opWithUserException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_opWithUserException_Base> Callback_Metrics_opWithUserExceptionPtr;

class Callback_Metrics_opWithRequestFailedException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_opWithRequestFailedException_Base> Callback_Metrics_opWithRequestFailedExceptionPtr;

class Callback_Metrics_opWithLocalException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_opWithLocalException_Base> Callback_Metrics_opWithLocalExceptionPtr;

class Callback_Metrics_opWithUnknownException_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_opWithUnknownException_Base> Callback_Metrics_opWithUnknownExceptionPtr;

class Callback_Metrics_opByteS_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_opByteS_Base> Callback_Metrics_opByteSPtr;

class Callback_Metrics_getAdmin_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_getAdmin_Base> Callback_Metrics_getAdminPtr;

class Callback_Metrics_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Metrics_shutdown_Base> Callback_Metrics_shutdownPtr;

class Callback_Controller_hold_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Controller_hold_Base> Callback_Controller_holdPtr;

class Callback_Controller_resume_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Controller_resume_Base> Callback_Controller_resumePtr;

}

namespace IceProxy
{

namespace Test
{

class Metrics : virtual public ::IceProxy::Ice::Object
{
public:

    void op()
    {
        op(0);
    }
    void op(const ::Ice::Context& __ctx)
    {
        op(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_op(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_op(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_op(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_op(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_op()
    {
        return begin_op(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx)
    {
        return begin_op(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Test::Callback_Metrics_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_opPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_op(&__ctx, __del, __cookie);
    }

    void end_op(const ::Ice::AsyncResultPtr&);
    
private:

    void op(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void fail()
    {
        fail(0);
    }
    void fail(const ::Ice::Context& __ctx)
    {
        fail(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fail(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_fail(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_fail(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fail(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fail(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_fail(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fail(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fail(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_fail()
    {
        return begin_fail(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fail(const ::Ice::Context& __ctx)
    {
        return begin_fail(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fail(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fail(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fail(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fail(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fail(const ::Test::Callback_Metrics_failPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fail(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fail(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_failPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fail(&__ctx, __del, __cookie);
    }

    void end_fail(const ::Ice::AsyncResultPtr&);
    
private:

    void fail(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fail(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void opWithUserException()
    {
        opWithUserException(0);
    }
    void opWithUserException(const ::Ice::Context& __ctx)
    {
        opWithUserException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opWithUserException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opWithUserException(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opWithUserException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithUserException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithUserException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_opWithUserException(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_opWithUserException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithUserException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_opWithUserException(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MetricsPrx __proxy = ::Test::MetricsPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_opWithUserException(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_opWithUserException(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_opWithUserException()
    {
        return begin_opWithUserException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithUserException(const ::Ice::Context& __ctx)
    {
        return begin_opWithUserException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithUserException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUserException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithUserException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUserException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithUserException(const ::Test::Callback_Metrics_opWithUserExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUserException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithUserException(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_opWithUserExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUserException(&__ctx, __del, __cookie);
    }

    void end_opWithUserException(const ::Ice::AsyncResultPtr&);
    
private:

    void opWithUserException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opWithUserException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void opWithRequestFailedException()
    {
        opWithRequestFailedException(0);
    }
    void opWithRequestFailedException(const ::Ice::Context& __ctx)
    {
        opWithRequestFailedException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opWithRequestFailedException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithRequestFailedException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_opWithRequestFailedException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithRequestFailedException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithRequestFailedException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithRequestFailedException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithRequestFailedException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithRequestFailedException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_opWithRequestFailedException()
    {
        return begin_opWithRequestFailedException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithRequestFailedException(const ::Ice::Context& __ctx)
    {
        return begin_opWithRequestFailedException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithRequestFailedException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithRequestFailedException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithRequestFailedException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithRequestFailedException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithRequestFailedException(const ::Test::Callback_Metrics_opWithRequestFailedExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithRequestFailedException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithRequestFailedException(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_opWithRequestFailedExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithRequestFailedException(&__ctx, __del, __cookie);
    }

    void end_opWithRequestFailedException(const ::Ice::AsyncResultPtr&);
    
private:

    void opWithRequestFailedException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opWithRequestFailedException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void opWithLocalException()
    {
        opWithLocalException(0);
    }
    void opWithLocalException(const ::Ice::Context& __ctx)
    {
        opWithLocalException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opWithLocalException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithLocalException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_opWithLocalException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithLocalException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithLocalException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithLocalException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithLocalException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithLocalException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_opWithLocalException()
    {
        return begin_opWithLocalException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithLocalException(const ::Ice::Context& __ctx)
    {
        return begin_opWithLocalException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithLocalException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithLocalException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithLocalException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithLocalException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithLocalException(const ::Test::Callback_Metrics_opWithLocalExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithLocalException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithLocalException(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_opWithLocalExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithLocalException(&__ctx, __del, __cookie);
    }

    void end_opWithLocalException(const ::Ice::AsyncResultPtr&);
    
private:

    void opWithLocalException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opWithLocalException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void opWithUnknownException()
    {
        opWithUnknownException(0);
    }
    void opWithUnknownException(const ::Ice::Context& __ctx)
    {
        opWithUnknownException(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opWithUnknownException(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithUnknownException(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_opWithUnknownException(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithUnknownException(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithUnknownException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opWithUnknownException(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opWithUnknownException(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opWithUnknownException(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_opWithUnknownException()
    {
        return begin_opWithUnknownException(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithUnknownException(const ::Ice::Context& __ctx)
    {
        return begin_opWithUnknownException(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opWithUnknownException(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUnknownException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithUnknownException(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUnknownException(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithUnknownException(const ::Test::Callback_Metrics_opWithUnknownExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUnknownException(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opWithUnknownException(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_opWithUnknownExceptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opWithUnknownException(&__ctx, __del, __cookie);
    }

    void end_opWithUnknownException(const ::Ice::AsyncResultPtr&);
    
private:

    void opWithUnknownException(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opWithUnknownException(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void opByteS(const ::Test::ByteSeq& bs)
    {
        opByteS(bs, 0);
    }
    void opByteS(const ::Test::ByteSeq& bs, const ::Ice::Context& __ctx)
    {
        opByteS(bs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_opByteS(const ::Test::ByteSeq& bs, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opByteS(bs, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_opByteS(const ::Test::ByteSeq& bs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opByteS(bs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opByteS(const ::Test::ByteSeq& bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_opByteS(bs, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_opByteS(const ::Test::ByteSeq& bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_opByteS(bs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_opByteS(const ::Test::ByteSeq& bs)
    {
        return begin_opByteS(bs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByteS(const ::Test::ByteSeq& bs, const ::Ice::Context& __ctx)
    {
        return begin_opByteS(bs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByteS(const ::Test::ByteSeq& bs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByteS(bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteS(const ::Test::ByteSeq& bs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByteS(bs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteS(const ::Test::ByteSeq& bs, const ::Test::Callback_Metrics_opByteSPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByteS(bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteS(const ::Test::ByteSeq& bs, const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_opByteSPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_opByteS(bs, &__ctx, __del, __cookie);
    }

    void end_opByteS(const ::Ice::AsyncResultPtr&);
    
private:

    void opByteS(const ::Test::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_opByteS(const ::Test::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ObjectPrx getAdmin()
    {
        return getAdmin(0);
    }
    ::Ice::ObjectPrx getAdmin(const ::Ice::Context& __ctx)
    {
        return getAdmin(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAdmin(const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAdmin(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAdmin(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAdmin(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAdmin(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAdmin(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAdmin(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAdmin(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAdmin(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ObjectPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::MetricsPrx __proxy = ::Test::MetricsPrx::uncheckedCast(__result->getProxy());
                ::Ice::ObjectPrx __ret;
                try
                {
                    __ret = __proxy->end_getAdmin(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ObjectPrx&)> _response;
        };
        return begin_getAdmin(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAdmin()
    {
        return begin_getAdmin(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAdmin(const ::Ice::Context& __ctx)
    {
        return begin_getAdmin(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAdmin(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdmin(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdmin(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdmin(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdmin(const ::Test::Callback_Metrics_getAdminPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdmin(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdmin(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_getAdminPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdmin(&__ctx, __del, __cookie);
    }

    ::Ice::ObjectPrx end_getAdmin(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ObjectPrx getAdmin(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAdmin(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Metrics_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_Metrics_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Metrics> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_secure(bool __secure) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_twoway() const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_oneway() const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_batchOneway() const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_datagram() const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_batchDatagram() const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_compress(bool __compress) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Metrics> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Metrics*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Controller : virtual public ::IceProxy::Ice::Object
{
public:

    void hold()
    {
        hold(0);
    }
    void hold(const ::Ice::Context& __ctx)
    {
        hold(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_hold(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_hold(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_hold(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_hold(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_hold(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_hold(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_hold(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_hold(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_hold()
    {
        return begin_hold(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::Context& __ctx)
    {
        return begin_hold(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_hold(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_hold(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Test::Callback_Controller_holdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_hold(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::Context& __ctx, const ::Test::Callback_Controller_holdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_hold(&__ctx, __del, __cookie);
    }

    void end_hold(const ::Ice::AsyncResultPtr&);
    
private:

    void hold(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_hold(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resume()
    {
        resume(0);
    }
    void resume(const ::Ice::Context& __ctx)
    {
        resume(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resume(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resume(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_resume(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resume(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resume(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resume(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resume(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resume(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_resume()
    {
        return begin_resume(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& __ctx)
    {
        return begin_resume(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Test::Callback_Controller_resumePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& __ctx, const ::Test::Callback_Controller_resumePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(&__ctx, __del, __cookie);
    }

    void end_resume(const ::Ice::AsyncResultPtr&);
    
private:

    void resume(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Controller> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_secure(bool __secure) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_twoway() const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_oneway() const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_batchOneway() const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_datagram() const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_batchDatagram() const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_compress(bool __compress) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Controller> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Controller*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class Metrics : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void fail(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void opWithUserException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void opWithRequestFailedException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void opWithLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void opWithUnknownException(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void opByteS(const ::Test::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::ObjectPrx getAdmin(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Controller : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void hold(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void resume(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class Metrics : virtual public ::IceDelegate::Test::Metrics,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void fail(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithUserException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithRequestFailedException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithUnknownException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opByteS(const ::Test::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ObjectPrx getAdmin(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Controller : virtual public ::IceDelegate::Test::Controller,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void hold(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resume(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class Metrics : virtual public ::IceDelegate::Test::Metrics,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void op(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void fail(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithUserException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithRequestFailedException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithLocalException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opWithUnknownException(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void opByteS(const ::Test::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ObjectPrx getAdmin(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Controller : virtual public ::IceDelegate::Test::Controller,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void hold(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resume(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class Metrics : virtual public ::Ice::Object
{
public:

    typedef MetricsPrx ProxyType;
    typedef MetricsPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void op_async(const ::Test::AMD_Metrics_opPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___op(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void fail_async(const ::Test::AMD_Metrics_failPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fail(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opWithUserException_async(const ::Test::AMD_Metrics_opWithUserExceptionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opWithUserException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opWithRequestFailedException_async(const ::Test::AMD_Metrics_opWithRequestFailedExceptionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opWithRequestFailedException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opWithLocalException_async(const ::Test::AMD_Metrics_opWithLocalExceptionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opWithLocalException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opWithUnknownException_async(const ::Test::AMD_Metrics_opWithUnknownExceptionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opWithUnknownException(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void opByteS_async(const ::Test::AMD_Metrics_opByteSPtr&, const ::Test::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___opByteS(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::ObjectPrx getAdmin(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAdmin(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Metrics& l, const Metrics& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Metrics& l, const Metrics& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Controller : virtual public ::Ice::Object
{
public:

    typedef ControllerPrx ProxyType;
    typedef ControllerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void hold(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___hold(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resume(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resume(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Controller& l, const Controller& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Controller& l, const Controller& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_Metrics_op : public Callback_Metrics_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Metrics_opPtr
newCallback_Metrics_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_op<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opPtr
newCallback_Metrics_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_op<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_opPtr
newCallback_Metrics_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_op<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opPtr
newCallback_Metrics_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_op<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_op : public Callback_Metrics_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Metrics_opPtr
newCallback_Metrics_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_op<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opPtr
newCallback_Metrics_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_op<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opPtr
newCallback_Metrics_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_op<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opPtr
newCallback_Metrics_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_op<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_fail : public Callback_Metrics_fail_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_fail(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Metrics_failPtr
newCallback_Metrics_fail(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_fail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_failPtr
newCallback_Metrics_fail(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_fail<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_failPtr
newCallback_Metrics_fail(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_fail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_failPtr
newCallback_Metrics_fail(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_fail<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_fail : public Callback_Metrics_fail_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_fail(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Metrics_failPtr
newCallback_Metrics_fail(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_fail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_failPtr
newCallback_Metrics_fail(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_fail<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_failPtr
newCallback_Metrics_fail(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_fail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_failPtr
newCallback_Metrics_fail(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_fail<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_opWithUserException : public Callback_Metrics_opWithUserException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_opWithUserException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MetricsPrx __proxy = ::Test::MetricsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_opWithUserException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUserException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUserException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUserException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUserException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_opWithUserException : public Callback_Metrics_opWithUserException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_opWithUserException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MetricsPrx __proxy = ::Test::MetricsPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_opWithUserException(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUserException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUserException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUserException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithUserExceptionPtr
newCallback_Metrics_opWithUserException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUserException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_opWithRequestFailedException : public Callback_Metrics_opWithRequestFailedException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_opWithRequestFailedException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithRequestFailedException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithRequestFailedException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithRequestFailedException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithRequestFailedException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_opWithRequestFailedException : public Callback_Metrics_opWithRequestFailedException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_opWithRequestFailedException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithRequestFailedException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithRequestFailedException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithRequestFailedException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithRequestFailedExceptionPtr
newCallback_Metrics_opWithRequestFailedException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithRequestFailedException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_opWithLocalException : public Callback_Metrics_opWithLocalException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_opWithLocalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithLocalException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithLocalException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithLocalException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithLocalException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_opWithLocalException : public Callback_Metrics_opWithLocalException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_opWithLocalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithLocalException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithLocalException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithLocalException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithLocalExceptionPtr
newCallback_Metrics_opWithLocalException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithLocalException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_opWithUnknownException : public Callback_Metrics_opWithUnknownException_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_opWithUnknownException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUnknownException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUnknownException<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUnknownException<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opWithUnknownException<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_opWithUnknownException : public Callback_Metrics_opWithUnknownException_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_opWithUnknownException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUnknownException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUnknownException<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUnknownException<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opWithUnknownExceptionPtr
newCallback_Metrics_opWithUnknownException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opWithUnknownException<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_opByteS : public Callback_Metrics_opByteS_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_opByteS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opByteS<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opByteS<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opByteS<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_opByteS<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_opByteS : public Callback_Metrics_opByteS_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_opByteS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opByteS<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opByteS<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opByteS<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_opByteSPtr
newCallback_Metrics_opByteS(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_opByteS<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_getAdmin : public Callback_Metrics_getAdmin_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ObjectPrx&);

    CallbackNC_Metrics_getAdmin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MetricsPrx __proxy = ::Test::MetricsPrx::uncheckedCast(__result->getProxy());
        ::Ice::ObjectPrx __ret;
        try
        {
            __ret = __proxy->end_getAdmin(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Metrics_getAdminPtr
newCallback_Metrics_getAdmin(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ObjectPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_getAdmin<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_getAdminPtr
newCallback_Metrics_getAdmin(T* instance, void (T::*cb)(const ::Ice::ObjectPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_getAdmin<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_getAdmin : public Callback_Metrics_getAdmin_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ObjectPrx&, const CT&);

    Callback_Metrics_getAdmin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::MetricsPrx __proxy = ::Test::MetricsPrx::uncheckedCast(__result->getProxy());
        ::Ice::ObjectPrx __ret;
        try
        {
            __ret = __proxy->end_getAdmin(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Metrics_getAdminPtr
newCallback_Metrics_getAdmin(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ObjectPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_getAdmin<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_getAdminPtr
newCallback_Metrics_getAdmin(T* instance, void (T::*cb)(const ::Ice::ObjectPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_getAdmin<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Metrics_shutdown : public Callback_Metrics_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Metrics_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Metrics_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Metrics_shutdown : public Callback_Metrics_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Metrics_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Metrics_shutdownPtr
newCallback_Metrics_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Metrics_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Controller_hold : public Callback_Controller_hold_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Controller_hold(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Controller_holdPtr
newCallback_Controller_hold(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_hold<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Controller_holdPtr
newCallback_Controller_hold(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_hold<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Controller_holdPtr
newCallback_Controller_hold(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_hold<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Controller_holdPtr
newCallback_Controller_hold(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_hold<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Controller_hold : public Callback_Controller_hold_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Controller_hold(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Controller_holdPtr
newCallback_Controller_hold(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_hold<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Controller_holdPtr
newCallback_Controller_hold(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_hold<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Controller_holdPtr
newCallback_Controller_hold(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_hold<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Controller_holdPtr
newCallback_Controller_hold(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_hold<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Controller_resume : public Callback_Controller_resume_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Controller_resume(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Controller_resumePtr
newCallback_Controller_resume(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_resume<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Controller_resumePtr
newCallback_Controller_resume(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_resume<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Controller_resumePtr
newCallback_Controller_resume(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_resume<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Controller_resumePtr
newCallback_Controller_resume(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_resume<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Controller_resume : public Callback_Controller_resume_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Controller_resume(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Controller_resumePtr
newCallback_Controller_resume(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_resume<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Controller_resumePtr
newCallback_Controller_resume(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_resume<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Controller_resumePtr
newCallback_Controller_resume(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_resume<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Controller_resumePtr
newCallback_Controller_resume(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_resume<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
