// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef TEST_API_EXPORTS
#   define TEST_API_EXPORTS
#endif
#include <Test.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}

namespace
{

const char* __Test__BaseEx_name = "Test::BaseEx";

struct __F__Test__BaseEx : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::BaseEx();
    }
};

class __F__Test__BaseEx__Init
{
public:

    __F__Test__BaseEx__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::BaseEx", new __F__Test__BaseEx);
    }

    ~__F__Test__BaseEx__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::BaseEx");
    }
};

const __F__Test__BaseEx__Init __F__Test__BaseEx__i;

}

Test::BaseEx::BaseEx() :
    boolFalse(false),
    boolTrue(true),
    b(1),
    s(2),
    i(3),
    l(ICE_INT64(4)),
    f(5.1F),
    d(6.2),
    str("foo \\ \"bar\012 \015\012\011\013\014\007\010? \007 \007"),
    zeroI(0),
    zeroL(ICE_INT64(0)),
    zeroF(0.0F),
    zeroDotF(0.0F),
    zeroD(0),
    zeroDotD(0)
{
}

Test::BaseEx::BaseEx(bool __ice_boolFalse, bool __ice_boolTrue, ::Ice::Byte __ice_b, ::Ice::Short __ice_s, ::Ice::Int __ice_i, ::Ice::Long __ice_l, ::Ice::Float __ice_f, ::Ice::Double __ice_d, const ::std::string& __ice_str, const ::std::string& __ice_noDefault, ::Ice::Int __ice_zeroI, ::Ice::Long __ice_zeroL, ::Ice::Float __ice_zeroF, ::Ice::Float __ice_zeroDotF, ::Ice::Double __ice_zeroD, ::Ice::Double __ice_zeroDotD) :
    ::Ice::UserException(),
    boolFalse(__ice_boolFalse),
    boolTrue(__ice_boolTrue),
    b(__ice_b),
    s(__ice_s),
    i(__ice_i),
    l(__ice_l),
    f(__ice_f),
    d(__ice_d),
    str(__ice_str),
    noDefault(__ice_noDefault),
    zeroI(__ice_zeroI),
    zeroL(__ice_zeroL),
    zeroF(__ice_zeroF),
    zeroDotF(__ice_zeroDotF),
    zeroD(__ice_zeroD),
    zeroDotD(__ice_zeroDotD)
{
}

Test::BaseEx::~BaseEx() throw()
{
}

::std::string
Test::BaseEx::ice_name() const
{
    return __Test__BaseEx_name;
}

Test::BaseEx*
Test::BaseEx::ice_clone() const
{
    return new BaseEx(*this);
}

void
Test::BaseEx::ice_throw() const
{
    throw *this;
}

void
Test::BaseEx::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::BaseEx", -1, true);
    __os->write(boolFalse);
    __os->write(boolTrue);
    __os->write(b);
    __os->write(s);
    __os->write(i);
    __os->write(l);
    __os->write(f);
    __os->write(d);
    __os->write(str);
    __os->write(noDefault);
    __os->write(zeroI);
    __os->write(zeroL);
    __os->write(zeroF);
    __os->write(zeroDotF);
    __os->write(zeroD);
    __os->write(zeroDotD);
    __os->endWriteSlice();
}

void
Test::BaseEx::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(boolFalse);
    __is->read(boolTrue);
    __is->read(b);
    __is->read(s);
    __is->read(i);
    __is->read(l);
    __is->read(f);
    __is->read(d);
    __is->read(str);
    __is->read(noDefault);
    __is->read(zeroI);
    __is->read(zeroL);
    __is->read(zeroF);
    __is->read(zeroDotF);
    __is->read(zeroD);
    __is->read(zeroDotD);
    __is->endReadSlice();
}

namespace
{

const char* __Test__DerivedEx_name = "Test::DerivedEx";

struct __F__Test__DerivedEx : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Test::DerivedEx();
    }
};

class __F__Test__DerivedEx__Init
{
public:

    __F__Test__DerivedEx__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Test::DerivedEx", new __F__Test__DerivedEx);
    }

    ~__F__Test__DerivedEx__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Test::DerivedEx");
    }
};

const __F__Test__DerivedEx__Init __F__Test__DerivedEx__i;

}

Test::DerivedEx::DerivedEx() :
    c1(::Test::ConstColor1),
    c2(::Test::ConstColor2),
    c3(::Test::ConstColor3),
    nc1(::Test::ConstNestedColor1),
    nc2(::Test::ConstNestedColor2),
    nc3(::Test::ConstNestedColor3)
{
}

Test::DerivedEx::DerivedEx(bool __ice_boolFalse, bool __ice_boolTrue, ::Ice::Byte __ice_b, ::Ice::Short __ice_s, ::Ice::Int __ice_i, ::Ice::Long __ice_l, ::Ice::Float __ice_f, ::Ice::Double __ice_d, const ::std::string& __ice_str, const ::std::string& __ice_noDefault, ::Ice::Int __ice_zeroI, ::Ice::Long __ice_zeroL, ::Ice::Float __ice_zeroF, ::Ice::Float __ice_zeroDotF, ::Ice::Double __ice_zeroD, ::Ice::Double __ice_zeroDotD, ::Test::Color __ice_c1, ::Test::Color __ice_c2, ::Test::Color __ice_c3, ::Test::Nested::Color __ice_nc1, ::Test::Nested::Color __ice_nc2, ::Test::Nested::Color __ice_nc3) :
    ::Test::BaseEx(__ice_boolFalse, __ice_boolTrue, __ice_b, __ice_s, __ice_i, __ice_l, __ice_f, __ice_d, __ice_str, __ice_noDefault, __ice_zeroI, __ice_zeroL, __ice_zeroF, __ice_zeroDotF, __ice_zeroD, __ice_zeroDotD),
    c1(__ice_c1),
    c2(__ice_c2),
    c3(__ice_c3),
    nc1(__ice_nc1),
    nc2(__ice_nc2),
    nc3(__ice_nc3)
{
}

Test::DerivedEx::~DerivedEx() throw()
{
}

::std::string
Test::DerivedEx::ice_name() const
{
    return __Test__DerivedEx_name;
}

Test::DerivedEx*
Test::DerivedEx::ice_clone() const
{
    return new DerivedEx(*this);
}

void
Test::DerivedEx::ice_throw() const
{
    throw *this;
}

void
Test::DerivedEx::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Test::DerivedEx", -1, false);
    __os->write(c1);
    __os->write(c2);
    __os->write(c3);
    __os->write(nc1);
    __os->write(nc2);
    __os->write(nc3);
    __os->endWriteSlice();
    ::Test::BaseEx::__writeImpl(__os);
}

void
Test::DerivedEx::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(c1);
    __is->read(c2);
    __is->read(c3);
    __is->read(nc1);
    __is->read(nc2);
    __is->read(nc3);
    __is->endReadSlice();
    ::Test::BaseEx::__readImpl(__is);
}

namespace Ice
{
#ifdef ICE_HAS_DECLSPEC_IMPORT_EXPORT
template struct TEST_API StreamWriter< ::Test::Struct1, ::IceInternal::BasicStream>;
template struct TEST_API StreamReader< ::Test::Struct1, ::IceInternal::BasicStream>;
#endif
#ifdef ICE_HAS_DECLSPEC_IMPORT_EXPORT
template struct TEST_API StreamWriter< ::Test::Struct2, ::IceInternal::BasicStream>;
template struct TEST_API StreamReader< ::Test::Struct2, ::IceInternal::BasicStream>;
#endif
#ifdef ICE_HAS_DECLSPEC_IMPORT_EXPORT
template struct TEST_API StreamWriter< ::Test::Struct3Ptr, ::IceInternal::BasicStream>;
template struct TEST_API StreamReader< ::Test::Struct3Ptr, ::IceInternal::BasicStream>;
#endif
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Test::Base;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Base* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Base>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Base;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Base::ice_staticId()
{
    return ::Test::Base::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Base::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Base);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Base::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Base);
}

::IceProxy::Ice::Object*
IceProxy::Test::Base::__newInstance() const
{
    return new Base;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Test::Derived;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Test::upCast(::IceProxy::Test::Derived* p) { return p; }

void
::IceProxy::Test::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Test::Derived>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Test::Derived;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Test::Derived::ice_staticId()
{
    return ::Test::Derived::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Test::Derived::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Test::Derived);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Test::Derived::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Test::Derived);
}

::IceProxy::Ice::Object*
IceProxy::Test::Derived::__newInstance() const
{
    return new Derived;
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Test::upCast(::Test::Base* p) { return p; }
::Ice::ObjectPtr
Test::Base::ice_clone() const
{
    ::Ice::Object* __p = new Base(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Base_ids[2] =
{
    "::Ice::Object",
    "::Test::Base"
};

}

bool
Test::Base::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Base_ids, __Test__Base_ids + 2, _s);
}

::std::vector< ::std::string>
Test::Base::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Base_ids[0], &__Test__Base_ids[2]);
}

const ::std::string&
Test::Base::ice_id(const ::Ice::Current&) const
{
    return __Test__Base_ids[1];
}

const ::std::string&
Test::Base::ice_staticId()
{
    return __Test__Base_ids[1];
}

void
Test::Base::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(boolFalse);
    __os->write(boolTrue);
    __os->write(b);
    __os->write(s);
    __os->write(i);
    __os->write(l);
    __os->write(f);
    __os->write(d);
    __os->write(str);
    __os->write(noDefault);
    __os->write(zeroI);
    __os->write(zeroL);
    __os->write(zeroF);
    __os->write(zeroDotF);
    __os->write(zeroD);
    __os->write(zeroDotD);
    __os->endWriteSlice();
}

void
Test::Base::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(boolFalse);
    __is->read(boolTrue);
    __is->read(b);
    __is->read(s);
    __is->read(i);
    __is->read(l);
    __is->read(f);
    __is->read(d);
    __is->read(str);
    __is->read(noDefault);
    __is->read(zeroI);
    __is->read(zeroL);
    __is->read(zeroF);
    __is->read(zeroDotF);
    __is->read(zeroD);
    __is->read(zeroDotD);
    __is->endReadSlice();
}

namespace
{

class __F__Test__Base : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Base::ice_staticId());
        return new ::Test::Base;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Base_Ptr = new __F__Test__Base;

class __F__Test__Base__Init
{
public:

    __F__Test__Base__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Base::ice_staticId(), __F__Test__Base_Ptr);
    }

    ~__F__Test__Base__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Base::ice_staticId());
    }
};

const __F__Test__Base__Init __F__Test__Base__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Base::ice_factory()
{
    return __F__Test__Base_Ptr;
}

void ICE_DECLSPEC_EXPORT 
Test::__patch(BasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::BasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Base::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Test::upCast(::Test::Derived* p) { return p; }
::Ice::ObjectPtr
Test::Derived::ice_clone() const
{
    ::Ice::Object* __p = new Derived(*this);
    return __p;
}

namespace
{
const ::std::string __Test__Derived_ids[3] =
{
    "::Ice::Object",
    "::Test::Base",
    "::Test::Derived"
};

}

bool
Test::Derived::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Test__Derived_ids, __Test__Derived_ids + 3, _s);
}

::std::vector< ::std::string>
Test::Derived::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Test__Derived_ids[0], &__Test__Derived_ids[3]);
}

const ::std::string&
Test::Derived::ice_id(const ::Ice::Current&) const
{
    return __Test__Derived_ids[2];
}

const ::std::string&
Test::Derived::ice_staticId()
{
    return __Test__Derived_ids[2];
}

void
Test::Derived::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(c1);
    __os->write(c2);
    __os->write(c3);
    __os->write(nc1);
    __os->write(nc2);
    __os->write(nc3);
    __os->endWriteSlice();
    ::Test::Base::__writeImpl(__os);
}

void
Test::Derived::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(c1);
    __is->read(c2);
    __is->read(c3);
    __is->read(nc1);
    __is->read(nc2);
    __is->read(nc3);
    __is->endReadSlice();
    ::Test::Base::__readImpl(__is);
}

namespace
{

class __F__Test__Derived : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::Test::Derived::ice_staticId());
        return new ::Test::Derived;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__Test__Derived_Ptr = new __F__Test__Derived;

class __F__Test__Derived__Init
{
public:

    __F__Test__Derived__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::Test::Derived::ice_staticId(), __F__Test__Derived_Ptr);
    }

    ~__F__Test__Derived__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::Test::Derived::ice_staticId());
    }
};

const __F__Test__Derived__Init __F__Test__Derived__i;

}

const ::Ice::ObjectFactoryPtr&
Test::Derived::ice_factory()
{
    return __F__Test__Derived_Ptr;
}

void ICE_DECLSPEC_EXPORT 
Test::__patch(DerivedPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Test::DerivedPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Test::Derived::ice_staticId(), v);
    }
}
