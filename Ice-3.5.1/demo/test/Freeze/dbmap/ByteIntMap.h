// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ByteIntMap.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


// Freeze types in this file:
// name="Test::ByteIntMap", key="byte", value="int"

#ifndef __ByteIntMap_h__
#define __ByteIntMap_h__

#include <Freeze/Map.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace Test
{

class ByteIntMapKeyCodec
{
public:

    static void write(::Ice::Byte, Freeze::Key&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static void read(::Ice::Byte&, const Freeze::Key&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static const std::string& typeId();
};

class ByteIntMapValueCodec
{
public:

    static void write(::Ice::Int, Freeze::Value&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static void read(::Ice::Int&, const Freeze::Value&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
    static const std::string& typeId();
};

class ByteIntMap : public Freeze::Map< ::Ice::Byte, ::Ice::Int, ByteIntMapKeyCodec, ByteIntMapValueCodec, Freeze::IceEncodingCompare >
{
public:


    class ValueIndex : public Freeze::MapIndex< ::Ice::Int, ValueIndex, std::less< ::Ice::Int> >
    {
    public:

        ValueIndex(const std::string&, const std::less< ::Ice::Int>& = std::less< ::Ice::Int>());

        static void write(::Ice::Int, Freeze::Key&, const Ice::CommunicatorPtr&, const Ice::EncodingVersion&);
        static void read(::Ice::Int&, const Freeze::Key&, const ::Ice::CommunicatorPtr&, const Ice::EncodingVersion&);

    protected:

        virtual void marshalKey(const Freeze::Value&, Freeze::Key&) const;
    };

    ByteIntMap(const Freeze::ConnectionPtr&, const std::string&, bool = true, const Freeze::IceEncodingCompare& = Freeze::IceEncodingCompare());

    template <class _InputIterator>
    ByteIntMap(const Freeze::ConnectionPtr& __connection, const std::string& __dbName, bool __createDb, _InputIterator __first, _InputIterator __last, const Freeze::IceEncodingCompare& __compare = Freeze::IceEncodingCompare())
        : Freeze::Map< ::Ice::Byte, ::Ice::Int, ByteIntMapKeyCodec, ByteIntMapValueCodec, Freeze::IceEncodingCompare >(__connection->getCommunicator(), __connection->getEncoding())
    {
        Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::Ice::Byte, ByteIntMapKeyCodec, Freeze::IceEncodingCompare >(__compare, this->_communicator, this->_encoding);
        std::vector<Freeze::MapIndexBasePtr> __indices;
        __indices.push_back(new ValueIndex("index"));
        this->_helper.reset(Freeze::MapHelper::create(__connection, __dbName, ByteIntMapKeyCodec::typeId(), ByteIntMapValueCodec::typeId(), __keyCompare, __indices, __createDb));
        while(__first != __last)
        {
            put(*__first);
            ++__first;
        }
    }
    static void recreate(const Freeze::ConnectionPtr&, const std::string&, const Freeze::IceEncodingCompare& = Freeze::IceEncodingCompare());


    iterator findByValue(::Ice::Int, bool = true);
    const_iterator findByValue(::Ice::Int, bool = true) const;
    iterator beginForValue();
    const_iterator beginForValue() const;
    iterator endForValue();
    const_iterator endForValue() const;
    iterator lowerBoundForValue(::Ice::Int);
    const_iterator lowerBoundForValue(::Ice::Int) const;
    iterator upperBoundForValue(::Ice::Int);
    const_iterator upperBoundForValue(::Ice::Int) const;
    std::pair<iterator, iterator> equalRangeForValue(::Ice::Int);
    std::pair<const_iterator, const_iterator> equalRangeForValue(::Ice::Int) const;
    int valueCount(::Ice::Int) const;
};

}

#endif
