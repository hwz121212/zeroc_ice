// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `WstringWstringMap.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


// Freeze types in this file:
// name="Test::WstringWstringMap", key="string", value="string"

#include <Ice/BasicStream.h>
#include <IceUtil/StringUtil.h>
#include <WstringWstringMap.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

void
Test::WstringWstringMapKeyCodec::write(const ::std::wstring& v, Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.write(v);
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
Test::WstringWstringMapKeyCodec::read(::std::wstring& v, const Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.read(v);
}

namespace
{
    const ::std::string __Test__WstringWstringMapKeyCodec_typeId = "wstring";
}

const ::std::string&
Test::WstringWstringMapKeyCodec::typeId()
{
    return __Test__WstringWstringMapKeyCodec_typeId;
}

void
Test::WstringWstringMapValueCodec::write(const ::std::wstring& v, Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.startWriteEncaps();
    stream.write(v);
    stream.endWriteEncaps();
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
Test::WstringWstringMapValueCodec::read(::std::wstring& v, const Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.startReadEncaps();
    stream.read(v);
    stream.endReadEncaps();
}

namespace
{
    const ::std::string __Test__WstringWstringMapValueCodec_typeId = "wstring";
}

const ::std::string&
Test::WstringWstringMapValueCodec::typeId()
{
    return __Test__WstringWstringMapValueCodec_typeId;
}

Test::WstringWstringMap::ValueIndex::ValueIndex(const std::string& __name, const Freeze::IceEncodingCompare& __compare)
    : Freeze::MapIndex< ::std::wstring, ValueIndex, Freeze::IceEncodingCompare >(__name, __compare)
{
}

void
Test::WstringWstringMap::ValueIndex::marshalKey(const Freeze::Value& __v, Freeze::Key& __k) const
{
    __k = __v;
}

void
Test::WstringWstringMap::ValueIndex::write(const ::std::wstring& __index, Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    Test::WstringWstringMapValueCodec::write(__index, __bytes, __communicator, __encoding);
}

void
Test::WstringWstringMap::ValueIndex::read(::std::wstring& __index, const Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    Test::WstringWstringMapValueCodec::read(__index, __bytes, __communicator, __encoding);
}

Test::WstringWstringMap::WstringWstringMap(const Freeze::ConnectionPtr& __connection, const std::string& __dbName ,bool __createDb, const Freeze::IceEncodingCompare& __compare)
    : Freeze::Map< ::std::wstring, ::std::wstring, WstringWstringMapKeyCodec, WstringWstringMapValueCodec, Freeze::IceEncodingCompare >(__connection->getCommunicator(), __connection->getEncoding())
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::std::wstring, WstringWstringMapKeyCodec, Freeze::IceEncodingCompare >(__compare, _communicator, _encoding);
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new ValueIndex("index"));
    _helper.reset(Freeze::MapHelper::create(__connection, __dbName, Test::WstringWstringMapKeyCodec::typeId(), Test::WstringWstringMapValueCodec::typeId(), __keyCompare, __indices, __createDb));
}

void
Test::WstringWstringMap::recreate(const Freeze::ConnectionPtr& __connection, const std::string& __dbName , const Freeze::IceEncodingCompare& __compare)
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::std::wstring, WstringWstringMapKeyCodec, Freeze::IceEncodingCompare >(__compare, __connection->getCommunicator(), __connection->getEncoding());
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new ValueIndex("index"));
    Freeze::MapHelper::recreate(__connection, __dbName, Test::WstringWstringMapKeyCodec::typeId(), Test::WstringWstringMapValueCodec::typeId(), __keyCompare, __indices);
}

Test::WstringWstringMap::iterator
Test::WstringWstringMap::findByValue(const ::std::wstring& __index, bool __onlyDups)
{
    Freeze::Key __bytes;
    ValueIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("index")->untypedFind(__bytes, false, __onlyDups), _communicator, _encoding);
}

Test::WstringWstringMap::const_iterator
Test::WstringWstringMap::findByValue(const ::std::wstring& __index, bool __onlyDups) const
{
    Freeze::Key __bytes;
    ValueIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("index")->untypedFind(__bytes, true, __onlyDups), _communicator, _encoding);
}

Test::WstringWstringMap::iterator
Test::WstringWstringMap::beginForValue()
{
    return iterator(_helper->index("index")->begin(false), _communicator, _encoding);
}

Test::WstringWstringMap::const_iterator
Test::WstringWstringMap::beginForValue() const
{
    return const_iterator(_helper->index("index")->begin(true), _communicator, _encoding);
}

Test::WstringWstringMap::iterator
Test::WstringWstringMap::endForValue()
{
    return iterator();
}

Test::WstringWstringMap::const_iterator
Test::WstringWstringMap::endForValue() const
{
    return const_iterator();
}

Test::WstringWstringMap::iterator
Test::WstringWstringMap::lowerBoundForValue(const ::std::wstring& __index)
{
    Freeze::Key __bytes;
    ValueIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("index")->untypedLowerBound(__bytes, false), _communicator, _encoding);
}

Test::WstringWstringMap::const_iterator
Test::WstringWstringMap::lowerBoundForValue(const ::std::wstring& __index) const
{
    Freeze::Key __bytes;
    ValueIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("index")->untypedLowerBound(__bytes, true), _communicator, _encoding);
}

Test::WstringWstringMap::iterator
Test::WstringWstringMap::upperBoundForValue(const ::std::wstring& __index)
{
    Freeze::Key __bytes;
    ValueIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("index")->untypedUpperBound(__bytes, false), _communicator, _encoding);
}

Test::WstringWstringMap::const_iterator
Test::WstringWstringMap::upperBoundForValue(const ::std::wstring& __index) const
{
    Freeze::Key __bytes;
    ValueIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("index")->untypedUpperBound(__bytes, true), _communicator, _encoding);
}

std::pair<Test::WstringWstringMap::iterator, Test::WstringWstringMap::iterator>
Test::WstringWstringMap::equalRangeForValue(const ::std::wstring& __index)
{
    return std::make_pair(lowerBoundForValue(__index), upperBoundForValue(__index));
}

std::pair<Test::WstringWstringMap::const_iterator, Test::WstringWstringMap::const_iterator>
Test::WstringWstringMap::equalRangeForValue(const ::std::wstring& __index) const
{
    return std::make_pair(lowerBoundForValue(__index), upperBoundForValue(__index));
}

int
Test::WstringWstringMap::valueCount(const ::std::wstring& __index) const
{
    Freeze::Key __bytes;
    ValueIndex::write(__index, __bytes, _communicator, _encoding);
    return _helper->index("index")->untypedCount(__bytes);
}
