// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Test
{

class Account;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Account>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Account*);

class Servant;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Servant>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Servant*);

class Facet;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::Facet>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::Facet*);

class RemoteEvictor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::RemoteEvictor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::RemoteEvictor*);

class RemoteEvictorFactory;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Test::RemoteEvictorFactory>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Test::RemoteEvictorFactory*);

}

}

namespace Test
{

class Account;
bool operator==(const Account&, const Account&);
bool operator<(const Account&, const Account&);
::Ice::Object* upCast(::Test::Account*);
typedef ::IceInternal::Handle< ::Test::Account> AccountPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Account> AccountPrx;
void __patch(AccountPtr&, const ::Ice::ObjectPtr&);

class Servant;
bool operator==(const Servant&, const Servant&);
bool operator<(const Servant&, const Servant&);
::Ice::Object* upCast(::Test::Servant*);
typedef ::IceInternal::Handle< ::Test::Servant> ServantPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Servant> ServantPrx;
void __patch(ServantPtr&, const ::Ice::ObjectPtr&);

class Facet;
bool operator==(const Facet&, const Facet&);
bool operator<(const Facet&, const Facet&);
::Ice::Object* upCast(::Test::Facet*);
typedef ::IceInternal::Handle< ::Test::Facet> FacetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Facet> FacetPrx;
void __patch(FacetPtr&, const ::Ice::ObjectPtr&);

class RemoteEvictor;
bool operator==(const RemoteEvictor&, const RemoteEvictor&);
bool operator<(const RemoteEvictor&, const RemoteEvictor&);
::Ice::Object* upCast(::Test::RemoteEvictor*);
typedef ::IceInternal::Handle< ::Test::RemoteEvictor> RemoteEvictorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::RemoteEvictor> RemoteEvictorPrx;
void __patch(RemoteEvictorPtr&, const ::Ice::ObjectPtr&);

class RemoteEvictorFactory;
bool operator==(const RemoteEvictorFactory&, const RemoteEvictorFactory&);
bool operator<(const RemoteEvictorFactory&, const RemoteEvictorFactory&);
::Ice::Object* upCast(::Test::RemoteEvictorFactory*);
typedef ::IceInternal::Handle< ::Test::RemoteEvictorFactory> RemoteEvictorFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::RemoteEvictorFactory> RemoteEvictorFactoryPrx;
void __patch(RemoteEvictorFactoryPtr&, const ::Ice::ObjectPtr&);

}

namespace Test
{

class AlreadyRegisteredException : public ::Ice::UserException
{
public:

    AlreadyRegisteredException() {}
    virtual ~AlreadyRegisteredException() throw();

    virtual ::std::string ice_name() const;
    virtual AlreadyRegisteredException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static AlreadyRegisteredException __AlreadyRegisteredException_init;

class NotRegisteredException : public ::Ice::UserException
{
public:

    NotRegisteredException() {}
    virtual ~NotRegisteredException() throw();

    virtual ::std::string ice_name() const;
    virtual NotRegisteredException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class EvictorDeactivatedException : public ::Ice::UserException
{
public:

    EvictorDeactivatedException() {}
    virtual ~EvictorDeactivatedException() throw();

    virtual ::std::string ice_name() const;
    virtual EvictorDeactivatedException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class InsufficientFundsException : public ::Ice::UserException
{
public:

    InsufficientFundsException() {}
    virtual ~InsufficientFundsException() throw();

    virtual ::std::string ice_name() const;
    virtual InsufficientFundsException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

typedef ::std::vector< ::Test::AccountPrx> AccountPrxSeq;

typedef ::std::vector< ::Ice::Identity> AccountIdSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Test::AlreadyRegisteredException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::NotRegisteredException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::EvictorDeactivatedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Test::InsufficientFundsException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Test
{

class AMD_Account_transfer2 : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Account_transfer2> AMD_Account_transfer2Ptr;

class AMD_Account_transfer3 : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Account_transfer3> AMD_Account_transfer3Ptr;

class AMD_Servant_slowGetValue : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Servant_slowGetValue> AMD_Servant_slowGetValuePtr;

class AMD_Servant_setValueAsync : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Servant_setValueAsync> AMD_Servant_setValueAsyncPtr;

}

namespace IceAsync
{

namespace Test
{

class AMD_Account_transfer2 : public ::Test::AMD_Account_transfer2, public ::IceInternal::IncomingAsync
{
public:

    AMD_Account_transfer2(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Account_transfer3 : public ::Test::AMD_Account_transfer3, public ::IceInternal::IncomingAsync
{
public:

    AMD_Account_transfer3(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Servant_slowGetValue : public ::Test::AMD_Servant_slowGetValue, public ::IceInternal::IncomingAsync
{
public:

    AMD_Servant_slowGetValue(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

class AMD_Servant_setValueAsync : public ::Test::AMD_Servant_setValueAsync, public ::IceInternal::IncomingAsync
{
public:

    AMD_Servant_setValueAsync(::IceInternal::Incoming&);

    virtual void ice_response();
};

}

}

namespace Test
{

class Callback_Account_getBalance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_getBalance_Base> Callback_Account_getBalancePtr;

class Callback_Account_transfer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_transfer_Base> Callback_Account_transferPtr;

class Callback_Account_transfer2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_transfer2_Base> Callback_Account_transfer2Ptr;

class Callback_Account_transfer3_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_transfer3_Base> Callback_Account_transfer3Ptr;

class Callback_Account_deposit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_deposit_Base> Callback_Account_depositPtr;

class Callback_Servant_getValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_getValue_Base> Callback_Servant_getValuePtr;

class Callback_Servant_slowGetValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_slowGetValue_Base> Callback_Servant_slowGetValuePtr;

class Callback_Servant_setValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_setValue_Base> Callback_Servant_setValuePtr;

class Callback_Servant_setValueAsync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_setValueAsync_Base> Callback_Servant_setValueAsyncPtr;

class Callback_Servant_releaseAsync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_releaseAsync_Base> Callback_Servant_releaseAsyncPtr;

class Callback_Servant_addFacet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_addFacet_Base> Callback_Servant_addFacetPtr;

class Callback_Servant_removeFacet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_removeFacet_Base> Callback_Servant_removeFacetPtr;

class Callback_Servant_getTransientValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_getTransientValue_Base> Callback_Servant_getTransientValuePtr;

class Callback_Servant_setTransientValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_setTransientValue_Base> Callback_Servant_setTransientValuePtr;

class Callback_Servant_keepInCache_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_keepInCache_Base> Callback_Servant_keepInCachePtr;

class Callback_Servant_release_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_release_Base> Callback_Servant_releasePtr;

class Callback_Servant_getAccounts_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_getAccounts_Base> Callback_Servant_getAccountsPtr;

class Callback_Servant_getTotalBalance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_getTotalBalance_Base> Callback_Servant_getTotalBalancePtr;

class Callback_Servant_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Servant_destroy_Base> Callback_Servant_destroyPtr;

class Callback_Facet_getData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Facet_getData_Base> Callback_Facet_getDataPtr;

class Callback_Facet_setData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Facet_setData_Base> Callback_Facet_setDataPtr;

class Callback_RemoteEvictor_setSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictor_setSize_Base> Callback_RemoteEvictor_setSizePtr;

class Callback_RemoteEvictor_createServant_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictor_createServant_Base> Callback_RemoteEvictor_createServantPtr;

class Callback_RemoteEvictor_getServant_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictor_getServant_Base> Callback_RemoteEvictor_getServantPtr;

class Callback_RemoteEvictor_saveNow_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictor_saveNow_Base> Callback_RemoteEvictor_saveNowPtr;

class Callback_RemoteEvictor_deactivate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictor_deactivate_Base> Callback_RemoteEvictor_deactivatePtr;

class Callback_RemoteEvictor_destroyAllServants_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictor_destroyAllServants_Base> Callback_RemoteEvictor_destroyAllServantsPtr;

class Callback_RemoteEvictorFactory_createEvictor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictorFactory_createEvictor_Base> Callback_RemoteEvictorFactory_createEvictorPtr;

class Callback_RemoteEvictorFactory_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteEvictorFactory_shutdown_Base> Callback_RemoteEvictorFactory_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class Account : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getBalance()
    {
        return getBalance(0);
    }
    ::Ice::Int getBalance(const ::Ice::Context& __ctx)
    {
        return getBalance(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBalance(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBalance(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBalance(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBalance(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBalance(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getBalance(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getBalance(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBalance()
    {
        return begin_getBalance(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context& __ctx)
    {
        return begin_getBalance(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Test::Callback_Account_getBalancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context& __ctx, const ::Test::Callback_Account_getBalancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getBalance(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getBalance(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount)
    {
        transfer(amount, toAccount, 0);
    }
    void transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx)
    {
        transfer(amount, toAccount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transfer(amount, toAccount, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transfer(amount, toAccount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transfer(amount, toAccount, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transfer(amount, toAccount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_transfer(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_transfer(amount, toAccount, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount)
    {
        return begin_transfer(amount, toAccount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx)
    {
        return begin_transfer(amount, toAccount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer(amount, toAccount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer(amount, toAccount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Test::Callback_Account_transferPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer(amount, toAccount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::Test::Callback_Account_transferPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer(amount, toAccount, &__ctx, __del, __cookie);
    }

    void end_transfer(const ::Ice::AsyncResultPtr&);
    
private:

    void transfer(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_transfer(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount)
    {
        transfer2(amount, toAccount, 0);
    }
    void transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx)
    {
        transfer2(amount, toAccount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transfer2(amount, toAccount, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transfer2(amount, toAccount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transfer2(amount, toAccount, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transfer2(amount, toAccount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_transfer2(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_transfer2(amount, toAccount, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount)
    {
        return begin_transfer2(amount, toAccount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx)
    {
        return begin_transfer2(amount, toAccount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer2(amount, toAccount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer2(amount, toAccount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Test::Callback_Account_transfer2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer2(amount, toAccount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer2(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::Test::Callback_Account_transfer2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer2(amount, toAccount, &__ctx, __del, __cookie);
    }

    void end_transfer2(const ::Ice::AsyncResultPtr&);
    
private:

    void transfer2(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_transfer2(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount)
    {
        transfer3(amount, toAccount, 0);
    }
    void transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx)
    {
        transfer3(amount, toAccount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transfer3(amount, toAccount, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transfer3(amount, toAccount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_transfer3(amount, toAccount, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_transfer3(amount, toAccount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_transfer3(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_transfer3(amount, toAccount, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount)
    {
        return begin_transfer3(amount, toAccount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx)
    {
        return begin_transfer3(amount, toAccount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer3(amount, toAccount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer3(amount, toAccount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Test::Callback_Account_transfer3Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer3(amount, toAccount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transfer3(::Ice::Int amount, const ::Test::AccountPrx& toAccount, const ::Ice::Context& __ctx, const ::Test::Callback_Account_transfer3Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transfer3(amount, toAccount, &__ctx, __del, __cookie);
    }

    void end_transfer3(const ::Ice::AsyncResultPtr&);
    
private:

    void transfer3(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_transfer3(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void deposit(::Ice::Int amount)
    {
        deposit(amount, 0);
    }
    void deposit(::Ice::Int amount, const ::Ice::Context& __ctx)
    {
        deposit(amount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deposit(amount, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deposit(amount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deposit(amount, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deposit(amount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deposit(::Ice::Int amount, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deposit(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deposit(amount, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount)
    {
        return begin_deposit(amount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx)
    {
        return begin_deposit(amount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Test::Callback_Account_depositPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx, const ::Test::Callback_Account_depositPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, &__ctx, __del, __cookie);
    }

    void end_deposit(const ::Ice::AsyncResultPtr&);
    
private:

    void deposit(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Account> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_secure(bool __secure) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_twoway() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_oneway() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_batchOneway() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_datagram() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_batchDatagram() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_compress(bool __compress) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Servant : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getValue()
    {
        return getValue(0);
    }
    ::Ice::Int getValue(const ::Ice::Context& __ctx)
    {
        return getValue(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getValue(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getValue(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getValue(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getValue(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getValue(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getValue(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getValue(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getValue(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getValue(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getValue()
    {
        return begin_getValue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getValue(const ::Ice::Context& __ctx)
    {
        return begin_getValue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getValue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getValue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getValue(const ::Test::Callback_Servant_getValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getValue(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_getValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getValue(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getValue(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getValue(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getValue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int slowGetValue()
    {
        return slowGetValue(0);
    }
    ::Ice::Int slowGetValue(const ::Ice::Context& __ctx)
    {
        return slowGetValue(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_slowGetValue(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_slowGetValue(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_slowGetValue(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_slowGetValue(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_slowGetValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_slowGetValue(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_slowGetValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_slowGetValue(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_slowGetValue(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_slowGetValue(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_slowGetValue(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_slowGetValue()
    {
        return begin_slowGetValue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_slowGetValue(const ::Ice::Context& __ctx)
    {
        return begin_slowGetValue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_slowGetValue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_slowGetValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_slowGetValue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_slowGetValue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_slowGetValue(const ::Test::Callback_Servant_slowGetValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_slowGetValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_slowGetValue(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_slowGetValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_slowGetValue(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_slowGetValue(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int slowGetValue(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_slowGetValue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setValue(::Ice::Int value)
    {
        setValue(value, 0);
    }
    void setValue(::Ice::Int value, const ::Ice::Context& __ctx)
    {
        setValue(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setValue(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setValue(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setValue(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setValue(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int value)
    {
        return begin_setValue(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int value, const ::Ice::Context& __ctx)
    {
        return begin_setValue(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int value, const ::Test::Callback_Servant_setValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::Test::Callback_Servant_setValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(value, &__ctx, __del, __cookie);
    }

    void end_setValue(const ::Ice::AsyncResultPtr&);
    
private:

    void setValue(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setValueAsync(::Ice::Int value)
    {
        setValueAsync(value, 0);
    }
    void setValueAsync(::Ice::Int value, const ::Ice::Context& __ctx)
    {
        setValueAsync(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setValueAsync(::Ice::Int value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setValueAsync(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setValueAsync(::Ice::Int value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setValueAsync(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setValueAsync(::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setValueAsync(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setValueAsync(::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setValueAsync(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setValueAsync(::Ice::Int value)
    {
        return begin_setValueAsync(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setValueAsync(::Ice::Int value, const ::Ice::Context& __ctx)
    {
        return begin_setValueAsync(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setValueAsync(::Ice::Int value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValueAsync(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValueAsync(::Ice::Int value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValueAsync(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValueAsync(::Ice::Int value, const ::Test::Callback_Servant_setValueAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValueAsync(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValueAsync(::Ice::Int value, const ::Ice::Context& __ctx, const ::Test::Callback_Servant_setValueAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValueAsync(value, &__ctx, __del, __cookie);
    }

    void end_setValueAsync(const ::Ice::AsyncResultPtr&);
    
private:

    void setValueAsync(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setValueAsync(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void releaseAsync()
    {
        releaseAsync(0);
    }
    void releaseAsync(const ::Ice::Context& __ctx)
    {
        releaseAsync(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_releaseAsync(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_releaseAsync(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_releaseAsync(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_releaseAsync(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_releaseAsync(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_releaseAsync(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_releaseAsync(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_releaseAsync(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_releaseAsync()
    {
        return begin_releaseAsync(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_releaseAsync(const ::Ice::Context& __ctx)
    {
        return begin_releaseAsync(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_releaseAsync(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_releaseAsync(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_releaseAsync(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_releaseAsync(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_releaseAsync(const ::Test::Callback_Servant_releaseAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_releaseAsync(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_releaseAsync(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_releaseAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_releaseAsync(&__ctx, __del, __cookie);
    }

    void end_releaseAsync(const ::Ice::AsyncResultPtr&);
    
private:

    void releaseAsync(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_releaseAsync(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFacet(const ::std::string& name, const ::std::string& data)
    {
        addFacet(name, data, 0);
    }
    void addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::Context& __ctx)
    {
        addFacet(name, data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFacet(const ::std::string& name, const ::std::string& data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addFacet(name, data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addFacet(const ::std::string& name, const ::std::string& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFacet(name, data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addFacet(name, data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFacet(name, data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_addFacet(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_addFacet(name, data, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addFacet(const ::std::string& name, const ::std::string& data)
    {
        return begin_addFacet(name, data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::Context& __ctx)
    {
        return begin_addFacet(name, data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFacet(name, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFacet(name, data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Test::Callback_Servant_addFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFacet(name, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFacet(const ::std::string& name, const ::std::string& data, const ::Ice::Context& __ctx, const ::Test::Callback_Servant_addFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFacet(name, data, &__ctx, __del, __cookie);
    }

    void end_addFacet(const ::Ice::AsyncResultPtr&);
    
private:

    void addFacet(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFacet(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFacet(const ::std::string& name)
    {
        removeFacet(name, 0);
    }
    void removeFacet(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        removeFacet(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFacet(const ::std::string& name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeFacet(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeFacet(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFacet(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFacet(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeFacet(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeFacet(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFacet(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeFacet(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_removeFacet(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_removeFacet(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeFacet(const ::std::string& name)
    {
        return begin_removeFacet(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFacet(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_removeFacet(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFacet(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFacet(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFacet(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFacet(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFacet(const ::std::string& name, const ::Test::Callback_Servant_removeFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFacet(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFacet(const ::std::string& name, const ::Ice::Context& __ctx, const ::Test::Callback_Servant_removeFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFacet(name, &__ctx, __del, __cookie);
    }

    void end_removeFacet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFacet(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFacet(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getTransientValue()
    {
        return getTransientValue(0);
    }
    ::Ice::Int getTransientValue(const ::Ice::Context& __ctx)
    {
        return getTransientValue(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTransientValue(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTransientValue(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTransientValue(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTransientValue(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTransientValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTransientValue(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTransientValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTransientValue(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTransientValue(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getTransientValue(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getTransientValue(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTransientValue()
    {
        return begin_getTransientValue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransientValue(const ::Ice::Context& __ctx)
    {
        return begin_getTransientValue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransientValue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransientValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransientValue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransientValue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransientValue(const ::Test::Callback_Servant_getTransientValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransientValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransientValue(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_getTransientValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransientValue(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getTransientValue(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getTransientValue(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTransientValue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTransientValue(::Ice::Int value)
    {
        setTransientValue(value, 0);
    }
    void setTransientValue(::Ice::Int value, const ::Ice::Context& __ctx)
    {
        setTransientValue(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTransientValue(::Ice::Int value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTransientValue(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setTransientValue(::Ice::Int value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTransientValue(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTransientValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTransientValue(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTransientValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTransientValue(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setTransientValue(::Ice::Int value)
    {
        return begin_setTransientValue(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTransientValue(::Ice::Int value, const ::Ice::Context& __ctx)
    {
        return begin_setTransientValue(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTransientValue(::Ice::Int value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransientValue(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransientValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransientValue(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransientValue(::Ice::Int value, const ::Test::Callback_Servant_setTransientValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransientValue(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransientValue(::Ice::Int value, const ::Ice::Context& __ctx, const ::Test::Callback_Servant_setTransientValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransientValue(value, &__ctx, __del, __cookie);
    }

    void end_setTransientValue(const ::Ice::AsyncResultPtr&);
    
private:

    void setTransientValue(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTransientValue(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void keepInCache()
    {
        keepInCache(0);
    }
    void keepInCache(const ::Ice::Context& __ctx)
    {
        keepInCache(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_keepInCache(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_keepInCache(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_keepInCache(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepInCache(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_keepInCache(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_keepInCache(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_keepInCache(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepInCache(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_keepInCache()
    {
        return begin_keepInCache(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepInCache(const ::Ice::Context& __ctx)
    {
        return begin_keepInCache(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepInCache(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepInCache(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepInCache(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepInCache(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepInCache(const ::Test::Callback_Servant_keepInCachePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepInCache(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepInCache(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_keepInCachePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepInCache(&__ctx, __del, __cookie);
    }

    void end_keepInCache(const ::Ice::AsyncResultPtr&);
    
private:

    void keepInCache(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_keepInCache(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void release()
    {
        release(0);
    }
    void release(const ::Ice::Context& __ctx)
    {
        release(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_release(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_release(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_release(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_release(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_release(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_release(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_release(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_release(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_release(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_release(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_release(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_release()
    {
        return begin_release(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_release(const ::Ice::Context& __ctx)
    {
        return begin_release(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_release(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_release(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_release(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_release(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_release(const ::Test::Callback_Servant_releasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_release(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_release(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_releasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_release(&__ctx, __del, __cookie);
    }

    void end_release(const ::Ice::AsyncResultPtr&);
    
private:

    void release(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_release(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::AccountPrxSeq getAccounts()
    {
        return getAccounts(0);
    }
    ::Test::AccountPrxSeq getAccounts(const ::Ice::Context& __ctx)
    {
        return getAccounts(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAccounts(const ::IceInternal::Function<void (const ::Test::AccountPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAccounts(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAccounts(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAccounts(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAccounts(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::AccountPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAccounts(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAccounts(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAccounts(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAccounts(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::AccountPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::AccountPrxSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                ::Test::AccountPrxSeq __ret;
                try
                {
                    __ret = __proxy->end_getAccounts(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::AccountPrxSeq&)> _response;
        };
        return begin_getAccounts(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAccounts()
    {
        return begin_getAccounts(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAccounts(const ::Ice::Context& __ctx)
    {
        return begin_getAccounts(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAccounts(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccounts(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAccounts(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccounts(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAccounts(const ::Test::Callback_Servant_getAccountsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccounts(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAccounts(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_getAccountsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccounts(&__ctx, __del, __cookie);
    }

    ::Test::AccountPrxSeq end_getAccounts(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::AccountPrxSeq getAccounts(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAccounts(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getTotalBalance()
    {
        return getTotalBalance(0);
    }
    ::Ice::Int getTotalBalance(const ::Ice::Context& __ctx)
    {
        return getTotalBalance(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTotalBalance(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTotalBalance(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTotalBalance(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTotalBalance(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTotalBalance(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTotalBalance(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTotalBalance(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTotalBalance(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTotalBalance(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getTotalBalance(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getTotalBalance(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTotalBalance()
    {
        return begin_getTotalBalance(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTotalBalance(const ::Ice::Context& __ctx)
    {
        return begin_getTotalBalance(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTotalBalance(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalBalance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTotalBalance(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalBalance(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTotalBalance(const ::Test::Callback_Servant_getTotalBalancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalBalance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTotalBalance(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_getTotalBalancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalBalance(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getTotalBalance(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getTotalBalance(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTotalBalance(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Test::Callback_Servant_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Test::Callback_Servant_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Servant> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_secure(bool __secure) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_twoway() const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_oneway() const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_batchOneway() const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_datagram() const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_batchDatagram() const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_compress(bool __compress) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Servant> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Servant*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Facet : virtual public ::IceProxy::Test::Servant
{
public:

    ::std::string getData()
    {
        return getData(0);
    }
    ::std::string getData(const ::Ice::Context& __ctx)
    {
        return getData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::FacetPrx __proxy = ::Test::FacetPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getData(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getData(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getData()
    {
        return begin_getData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx)
    {
        return begin_getData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Test::Callback_Facet_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::Test::Callback_Facet_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    ::std::string end_getData(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setData(const ::std::string& data)
    {
        setData(data, 0);
    }
    void setData(const ::std::string& data, const ::Ice::Context& __ctx)
    {
        setData(data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setData(const ::std::string& data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setData(data, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setData(const ::std::string& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setData(data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setData(const ::std::string& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setData(data, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setData(const ::std::string& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setData(data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setData(const ::std::string& data)
    {
        return begin_setData(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::std::string& data, const ::Ice::Context& __ctx)
    {
        return begin_setData(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::std::string& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::std::string& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::std::string& data, const ::Test::Callback_Facet_setDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::std::string& data, const ::Ice::Context& __ctx, const ::Test::Callback_Facet_setDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(data, &__ctx, __del, __cookie);
    }

    void end_setData(const ::Ice::AsyncResultPtr&);
    
private:

    void setData(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setData(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Facet> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_secure(bool __secure) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_twoway() const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_oneway() const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_batchOneway() const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_datagram() const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_batchDatagram() const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_compress(bool __compress) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Facet> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Facet*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RemoteEvictor : virtual public ::IceProxy::Ice::Object
{
public:

    void setSize(::Ice::Int size)
    {
        setSize(size, 0);
    }
    void setSize(::Ice::Int size, const ::Ice::Context& __ctx)
    {
        setSize(size, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSize(::Ice::Int size, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSize(size, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSize(::Ice::Int size, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSize(size, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSize(size, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSize(size, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSize(::Ice::Int size)
    {
        return begin_setSize(size, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSize(::Ice::Int size, const ::Ice::Context& __ctx)
    {
        return begin_setSize(size, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSize(::Ice::Int size, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(size, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSize(::Ice::Int size, const ::Test::Callback_RemoteEvictor_setSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSize(::Ice::Int size, const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictor_setSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(size, &__ctx, __del, __cookie);
    }

    void end_setSize(const ::Ice::AsyncResultPtr&);
    
private:

    void setSize(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSize(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::ServantPrx createServant(const ::std::string& id, ::Ice::Int value)
    {
        return createServant(id, value, 0);
    }
    ::Test::ServantPrx createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::Context& __ctx)
    {
        return createServant(id, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createServant(const ::std::string& id, ::Ice::Int value, const ::IceInternal::Function<void (const ::Test::ServantPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createServant(id, value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createServant(const ::std::string& id, ::Ice::Int value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createServant(id, value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::ServantPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createServant(id, value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createServant(id, value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::ServantPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::ServantPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::RemoteEvictorPrx __proxy = ::Test::RemoteEvictorPrx::uncheckedCast(__result->getProxy());
                ::Test::ServantPrx __ret;
                try
                {
                    __ret = __proxy->end_createServant(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::ServantPrx&)> _response;
        };
        return begin_createServant(id, value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createServant(const ::std::string& id, ::Ice::Int value)
    {
        return begin_createServant(id, value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::Context& __ctx)
    {
        return begin_createServant(id, value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createServant(id, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createServant(id, value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Test::Callback_RemoteEvictor_createServantPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createServant(id, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createServant(const ::std::string& id, ::Ice::Int value, const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictor_createServantPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createServant(id, value, &__ctx, __del, __cookie);
    }

    ::Test::ServantPrx end_createServant(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::ServantPrx createServant(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createServant(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Test::ServantPrx getServant(const ::std::string& id)
    {
        return getServant(id, 0);
    }
    ::Test::ServantPrx getServant(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return getServant(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getServant(const ::std::string& id, const ::IceInternal::Function<void (const ::Test::ServantPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getServant(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getServant(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getServant(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getServant(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::ServantPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getServant(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getServant(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getServant(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getServant(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::ServantPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::ServantPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::RemoteEvictorPrx __proxy = ::Test::RemoteEvictorPrx::uncheckedCast(__result->getProxy());
                ::Test::ServantPrx __ret;
                try
                {
                    __ret = __proxy->end_getServant(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::ServantPrx&)> _response;
        };
        return begin_getServant(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getServant(const ::std::string& id)
    {
        return begin_getServant(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getServant(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_getServant(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getServant(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServant(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getServant(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServant(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getServant(const ::std::string& id, const ::Test::Callback_RemoteEvictor_getServantPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServant(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getServant(const ::std::string& id, const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictor_getServantPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServant(id, &__ctx, __del, __cookie);
    }

    ::Test::ServantPrx end_getServant(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::ServantPrx getServant(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getServant(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void saveNow()
    {
        saveNow(0);
    }
    void saveNow(const ::Ice::Context& __ctx)
    {
        saveNow(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saveNow(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_saveNow(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_saveNow(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveNow(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveNow(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_saveNow(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saveNow(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saveNow(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_saveNow()
    {
        return begin_saveNow(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveNow(const ::Ice::Context& __ctx)
    {
        return begin_saveNow(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saveNow(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveNow(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveNow(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveNow(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveNow(const ::Test::Callback_RemoteEvictor_saveNowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveNow(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saveNow(const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictor_saveNowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saveNow(&__ctx, __del, __cookie);
    }

    void end_saveNow(const ::Ice::AsyncResultPtr&);
    
private:

    void saveNow(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saveNow(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void deactivate()
    {
        deactivate(0);
    }
    void deactivate(const ::Ice::Context& __ctx)
    {
        deactivate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_deactivate(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_deactivate(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deactivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deactivate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_deactivate()
    {
        return begin_deactivate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx)
    {
        return begin_deactivate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Test::Callback_RemoteEvictor_deactivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictor_deactivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deactivate(&__ctx, __del, __cookie);
    }

    void end_deactivate(const ::Ice::AsyncResultPtr&);
    
private:

    void deactivate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroyAllServants(const ::std::string& facet)
    {
        destroyAllServants(facet, 0);
    }
    void destroyAllServants(const ::std::string& facet, const ::Ice::Context& __ctx)
    {
        destroyAllServants(facet, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroyAllServants(const ::std::string& facet, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroyAllServants(facet, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroyAllServants(const ::std::string& facet, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyAllServants(facet, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroyAllServants(const ::std::string& facet, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroyAllServants(facet, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroyAllServants(const ::std::string& facet, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyAllServants(facet, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroyAllServants(const ::std::string& facet)
    {
        return begin_destroyAllServants(facet, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyAllServants(const ::std::string& facet, const ::Ice::Context& __ctx)
    {
        return begin_destroyAllServants(facet, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyAllServants(const ::std::string& facet, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyAllServants(facet, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyAllServants(const ::std::string& facet, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyAllServants(facet, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyAllServants(const ::std::string& facet, const ::Test::Callback_RemoteEvictor_destroyAllServantsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyAllServants(facet, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyAllServants(const ::std::string& facet, const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictor_destroyAllServantsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyAllServants(facet, &__ctx, __del, __cookie);
    }

    void end_destroyAllServants(const ::Ice::AsyncResultPtr&);
    
private:

    void destroyAllServants(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroyAllServants(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_secure(bool __secure) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_twoway() const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_oneway() const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_batchOneway() const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_datagram() const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_batchDatagram() const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_compress(bool __compress) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RemoteEvictor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RemoteEvictorFactory : virtual public ::IceProxy::Ice::Object
{
public:

    ::Test::RemoteEvictorPrx createEvictor(const ::std::string& name, bool transactional)
    {
        return createEvictor(name, transactional, 0);
    }
    ::Test::RemoteEvictorPrx createEvictor(const ::std::string& name, bool transactional, const ::Ice::Context& __ctx)
    {
        return createEvictor(name, transactional, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createEvictor(const ::std::string& name, bool transactional, const ::IceInternal::Function<void (const ::Test::RemoteEvictorPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createEvictor(name, transactional, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createEvictor(const ::std::string& name, bool transactional, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createEvictor(name, transactional, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createEvictor(const ::std::string& name, bool transactional, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Test::RemoteEvictorPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createEvictor(name, transactional, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createEvictor(const ::std::string& name, bool transactional, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createEvictor(name, transactional, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createEvictor(const ::std::string& name, bool transactional, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Test::RemoteEvictorPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Test::RemoteEvictorPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Test::RemoteEvictorFactoryPrx __proxy = ::Test::RemoteEvictorFactoryPrx::uncheckedCast(__result->getProxy());
                ::Test::RemoteEvictorPrx __ret;
                try
                {
                    __ret = __proxy->end_createEvictor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Test::RemoteEvictorPrx&)> _response;
        };
        return begin_createEvictor(name, transactional, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createEvictor(const ::std::string& name, bool transactional)
    {
        return begin_createEvictor(name, transactional, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createEvictor(const ::std::string& name, bool transactional, const ::Ice::Context& __ctx)
    {
        return begin_createEvictor(name, transactional, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createEvictor(const ::std::string& name, bool transactional, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createEvictor(name, transactional, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createEvictor(const ::std::string& name, bool transactional, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createEvictor(name, transactional, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createEvictor(const ::std::string& name, bool transactional, const ::Test::Callback_RemoteEvictorFactory_createEvictorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createEvictor(name, transactional, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createEvictor(const ::std::string& name, bool transactional, const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictorFactory_createEvictorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createEvictor(name, transactional, &__ctx, __del, __cookie);
    }

    ::Test::RemoteEvictorPrx end_createEvictor(const ::Ice::AsyncResultPtr&);
    
private:

    ::Test::RemoteEvictorPrx createEvictor(const ::std::string&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createEvictor(const ::std::string&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_RemoteEvictorFactory_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Test::Callback_RemoteEvictorFactory_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_secure(bool __secure) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_twoway() const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_oneway() const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_batchOneway() const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_datagram() const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_batchDatagram() const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_compress(bool __compress) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RemoteEvictorFactory> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RemoteEvictorFactory*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Test
{

class Account : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void transfer(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void transfer2(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void transfer3(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deposit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Servant : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int slowGetValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setValue(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setValueAsync(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void releaseAsync(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFacet(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFacet(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getTransientValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setTransientValue(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void keepInCache(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void release(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::AccountPrxSeq getAccounts(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getTotalBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Facet : virtual public ::IceDelegate::Test::Servant
{
public:

    virtual ::std::string getData(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setData(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class RemoteEvictor : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void setSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::ServantPrx createServant(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Test::ServantPrx getServant(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void saveNow(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroyAllServants(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class RemoteEvictorFactory : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Test::RemoteEvictorPrx createEvictor(const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Test
{

class Account : virtual public ::IceDelegate::Test::Account,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void transfer(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void transfer2(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void transfer3(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deposit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Servant : virtual public ::IceDelegate::Test::Servant,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int slowGetValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setValue(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setValueAsync(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void releaseAsync(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFacet(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFacet(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTransientValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTransientValue(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void keepInCache(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void release(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::AccountPrxSeq getAccounts(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTotalBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Facet : virtual public ::IceDelegate::Test::Facet,
              virtual public ::IceDelegateM::Test::Servant
{
public:

    virtual ::std::string getData(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setData(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class RemoteEvictor : virtual public ::IceDelegate::Test::RemoteEvictor,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void setSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::ServantPrx createServant(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::ServantPrx getServant(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveNow(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyAllServants(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class RemoteEvictorFactory : virtual public ::IceDelegate::Test::RemoteEvictorFactory,
                             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Test::RemoteEvictorPrx createEvictor(const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Test
{

class Account : virtual public ::IceDelegate::Test::Account,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void transfer(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void transfer2(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void transfer3(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deposit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Servant : virtual public ::IceDelegate::Test::Servant,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int slowGetValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setValue(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setValueAsync(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void releaseAsync(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFacet(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFacet(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTransientValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTransientValue(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void keepInCache(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void release(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::AccountPrxSeq getAccounts(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTotalBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Facet : virtual public ::IceDelegate::Test::Facet,
              virtual public ::IceDelegateD::Test::Servant
{
public:

    virtual ::std::string getData(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setData(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class RemoteEvictor : virtual public ::IceDelegate::Test::RemoteEvictor,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void setSize(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::ServantPrx createServant(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Test::ServantPrx getServant(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void saveNow(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deactivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyAllServants(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class RemoteEvictorFactory : virtual public ::IceDelegate::Test::RemoteEvictorFactory,
                             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Test::RemoteEvictorPrx createEvictor(const ::std::string&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Test
{

class Account : virtual public ::Ice::Object
{
public:

    typedef AccountPrx ProxyType;
    typedef AccountPtr PointerType;

    Account()
    {
    }

    explicit Account(::Ice::Int __ice_balance) :
        balance(__ice_balance)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::Ice::Int getBalance(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBalance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void transfer(::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___transfer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void transfer2_async(const ::Test::AMD_Account_transfer2Ptr&, ::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___transfer2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void transfer3_async(const ::Test::AMD_Account_transfer3Ptr&, ::Ice::Int, const ::Test::AccountPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___transfer3(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deposit(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deposit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int balance;
};

inline bool operator==(const Account& l, const Account& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Account& l, const Account& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Servant : virtual public ::Ice::Object
{
public:

    typedef ServantPrx ProxyType;
    typedef ServantPtr PointerType;

    Servant()
    {
    }

    Servant(::Ice::Int __ice_value, const ::Test::AccountIdSeq& __ice_accounts) :
        value(__ice_value),
        accounts(__ice_accounts)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::Ice::Int getValue(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getValue(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void slowGetValue_async(const ::Test::AMD_Servant_slowGetValuePtr&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___slowGetValue(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setValue(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setValueAsync_async(const ::Test::AMD_Servant_setValueAsyncPtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setValueAsync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void releaseAsync(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___releaseAsync(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void addFacet(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___addFacet(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void removeFacet(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___removeFacet(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int getTransientValue(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getTransientValue(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setTransientValue(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTransientValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void keepInCache(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___keepInCache(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void release(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___release(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::AccountPrxSeq getAccounts(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAccounts(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getTotalBalance(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTotalBalance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int value;

    ::Test::AccountIdSeq accounts;
};

inline bool operator==(const Servant& l, const Servant& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Servant& l, const Servant& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Facet : virtual public ::Test::Servant
{
public:

    typedef FacetPrx ProxyType;
    typedef FacetPtr PointerType;

    Facet()
    {
    }

    Facet(::Ice::Int __ice_value, const ::Test::AccountIdSeq& __ice_accounts, const ::std::string& __ice_data) :
        ::Test::Servant(__ice_value, __ice_accounts)
        ,
        data(__ice_data)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::std::string getData(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getData(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setData(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ice_operationAttributes(const ::std::string&) const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Test::Servant::__writeImpl;
    using ::Test::Servant::__readImpl;
    #endif

public:

    ::std::string data;
};

inline bool operator==(const Facet& l, const Facet& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Facet& l, const Facet& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RemoteEvictor : virtual public ::Ice::Object
{
public:

    typedef RemoteEvictorPrx ProxyType;
    typedef RemoteEvictorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void setSize(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::ServantPrx createServant(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createServant(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Test::ServantPrx getServant(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getServant(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saveNow(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saveNow(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deactivate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deactivate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroyAllServants(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroyAllServants(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const RemoteEvictor& l, const RemoteEvictor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RemoteEvictor& l, const RemoteEvictor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RemoteEvictorFactory : virtual public ::Ice::Object
{
public:

    typedef RemoteEvictorFactoryPrx ProxyType;
    typedef RemoteEvictorFactoryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Test::RemoteEvictorPrx createEvictor(const ::std::string&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createEvictor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const RemoteEvictorFactory& l, const RemoteEvictorFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RemoteEvictorFactory& l, const RemoteEvictorFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Test
{

template<class T>
class CallbackNC_Account_getBalance : public Callback_Account_getBalance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Account_getBalance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBalance(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Account_getBalancePtr
newCallback_Account_getBalance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_getBalance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_getBalancePtr
newCallback_Account_getBalance(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_getBalance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_getBalance : public Callback_Account_getBalance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Account_getBalance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBalance(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_getBalancePtr
newCallback_Account_getBalance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_getBalance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_getBalancePtr
newCallback_Account_getBalance(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_getBalance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Account_transfer : public Callback_Account_transfer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Account_transfer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_transfer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Account_transferPtr
newCallback_Account_transfer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_transferPtr
newCallback_Account_transfer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Account_transferPtr
newCallback_Account_transfer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_transferPtr
newCallback_Account_transfer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_transfer : public Callback_Account_transfer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Account_transfer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_transfer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_transferPtr
newCallback_Account_transfer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transferPtr
newCallback_Account_transfer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transferPtr
newCallback_Account_transfer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transferPtr
newCallback_Account_transfer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Account_transfer2 : public Callback_Account_transfer2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Account_transfer2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_transfer2(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer2<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer2<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_transfer2 : public Callback_Account_transfer2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Account_transfer2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_transfer2(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer2<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transfer2Ptr
newCallback_Account_transfer2(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer2<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Account_transfer3 : public Callback_Account_transfer3_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Account_transfer3(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_transfer3(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer3<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer3<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer3<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_transfer3<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_transfer3 : public Callback_Account_transfer3_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Account_transfer3(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_transfer3(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer3<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer3<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer3<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_transfer3Ptr
newCallback_Account_transfer3(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_transfer3<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Account_deposit : public Callback_Account_deposit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Account_deposit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deposit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_deposit : public Callback_Account_deposit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Account_deposit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::AccountPrx __proxy = ::Test::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deposit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_getValue : public Callback_Servant_getValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Servant_getValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Servant_getValuePtr
newCallback_Servant_getValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_getValuePtr
newCallback_Servant_getValue(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_getValue : public Callback_Servant_getValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Servant_getValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_getValuePtr
newCallback_Servant_getValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_getValuePtr
newCallback_Servant_getValue(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_slowGetValue : public Callback_Servant_slowGetValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Servant_slowGetValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_slowGetValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Servant_slowGetValuePtr
newCallback_Servant_slowGetValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_slowGetValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_slowGetValuePtr
newCallback_Servant_slowGetValue(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_slowGetValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_slowGetValue : public Callback_Servant_slowGetValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Servant_slowGetValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_slowGetValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_slowGetValuePtr
newCallback_Servant_slowGetValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_slowGetValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_slowGetValuePtr
newCallback_Servant_slowGetValue(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_slowGetValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_setValue : public Callback_Servant_setValue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_setValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Servant_setValuePtr
newCallback_Servant_setValue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_setValuePtr
newCallback_Servant_setValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_setValuePtr
newCallback_Servant_setValue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_setValuePtr
newCallback_Servant_setValue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_setValue : public Callback_Servant_setValue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_setValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Servant_setValuePtr
newCallback_Servant_setValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setValuePtr
newCallback_Servant_setValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setValuePtr
newCallback_Servant_setValue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setValuePtr
newCallback_Servant_setValue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_setValueAsync : public Callback_Servant_setValueAsync_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_setValueAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValueAsync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValueAsync<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValueAsync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setValueAsync<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_setValueAsync : public Callback_Servant_setValueAsync_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_setValueAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValueAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValueAsync<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValueAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setValueAsyncPtr
newCallback_Servant_setValueAsync(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setValueAsync<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_releaseAsync : public Callback_Servant_releaseAsync_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_releaseAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_releaseAsync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_releaseAsync<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_releaseAsync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_releaseAsync<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_releaseAsync : public Callback_Servant_releaseAsync_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_releaseAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_releaseAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_releaseAsync<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_releaseAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_releaseAsyncPtr
newCallback_Servant_releaseAsync(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_releaseAsync<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_addFacet : public Callback_Servant_addFacet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_addFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_addFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_addFacet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_addFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_addFacet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_addFacet : public Callback_Servant_addFacet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_addFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_addFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_addFacet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_addFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_addFacetPtr
newCallback_Servant_addFacet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_addFacet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_removeFacet : public Callback_Servant_removeFacet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_removeFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_removeFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_removeFacet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_removeFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_removeFacet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_removeFacet : public Callback_Servant_removeFacet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_removeFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_removeFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_removeFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_removeFacet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_removeFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_removeFacetPtr
newCallback_Servant_removeFacet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_removeFacet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_getTransientValue : public Callback_Servant_getTransientValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Servant_getTransientValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTransientValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Servant_getTransientValuePtr
newCallback_Servant_getTransientValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getTransientValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_getTransientValuePtr
newCallback_Servant_getTransientValue(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getTransientValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_getTransientValue : public Callback_Servant_getTransientValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Servant_getTransientValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTransientValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_getTransientValuePtr
newCallback_Servant_getTransientValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getTransientValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_getTransientValuePtr
newCallback_Servant_getTransientValue(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getTransientValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_setTransientValue : public Callback_Servant_setTransientValue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_setTransientValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setTransientValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setTransientValue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setTransientValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_setTransientValue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_setTransientValue : public Callback_Servant_setTransientValue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_setTransientValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setTransientValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setTransientValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setTransientValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_setTransientValuePtr
newCallback_Servant_setTransientValue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_setTransientValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_keepInCache : public Callback_Servant_keepInCache_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_keepInCache(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_keepInCache<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_keepInCache<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_keepInCache<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_keepInCache<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_keepInCache : public Callback_Servant_keepInCache_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_keepInCache(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_keepInCache<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_keepInCache<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_keepInCache<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_keepInCachePtr
newCallback_Servant_keepInCache(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_keepInCache<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_release : public Callback_Servant_release_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_release(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_release(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Servant_releasePtr
newCallback_Servant_release(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_release<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_releasePtr
newCallback_Servant_release(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_release<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_releasePtr
newCallback_Servant_release(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_release<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_releasePtr
newCallback_Servant_release(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_release<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_release : public Callback_Servant_release_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_release(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_release(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_releasePtr
newCallback_Servant_release(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_release<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_releasePtr
newCallback_Servant_release(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_release<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_releasePtr
newCallback_Servant_release(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_release<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_releasePtr
newCallback_Servant_release(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_release<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_getAccounts : public Callback_Servant_getAccounts_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::AccountPrxSeq&);

    CallbackNC_Servant_getAccounts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Test::AccountPrxSeq __ret;
        try
        {
            __ret = __proxy->end_getAccounts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Servant_getAccountsPtr
newCallback_Servant_getAccounts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::AccountPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getAccounts<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_getAccountsPtr
newCallback_Servant_getAccounts(T* instance, void (T::*cb)(const ::Test::AccountPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getAccounts<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_getAccounts : public Callback_Servant_getAccounts_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::AccountPrxSeq&, const CT&);

    Callback_Servant_getAccounts(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Test::AccountPrxSeq __ret;
        try
        {
            __ret = __proxy->end_getAccounts(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_getAccountsPtr
newCallback_Servant_getAccounts(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::AccountPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getAccounts<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_getAccountsPtr
newCallback_Servant_getAccounts(T* instance, void (T::*cb)(const ::Test::AccountPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getAccounts<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_getTotalBalance : public Callback_Servant_getTotalBalance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Servant_getTotalBalance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTotalBalance(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Servant_getTotalBalancePtr
newCallback_Servant_getTotalBalance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getTotalBalance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_getTotalBalancePtr
newCallback_Servant_getTotalBalance(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_getTotalBalance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_getTotalBalance : public Callback_Servant_getTotalBalance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Servant_getTotalBalance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::ServantPrx __proxy = ::Test::ServantPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTotalBalance(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Servant_getTotalBalancePtr
newCallback_Servant_getTotalBalance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getTotalBalance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_getTotalBalancePtr
newCallback_Servant_getTotalBalance(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_getTotalBalance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Servant_destroy : public Callback_Servant_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Servant_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Servant_destroyPtr
newCallback_Servant_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_destroyPtr
newCallback_Servant_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Servant_destroyPtr
newCallback_Servant_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Servant_destroyPtr
newCallback_Servant_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Servant_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Servant_destroy : public Callback_Servant_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Servant_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Servant_destroyPtr
newCallback_Servant_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_destroyPtr
newCallback_Servant_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_destroyPtr
newCallback_Servant_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Servant_destroyPtr
newCallback_Servant_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Servant_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Facet_getData : public Callback_Facet_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Facet_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::FacetPrx __proxy = ::Test::FacetPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Facet_getDataPtr
newCallback_Facet_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Facet_getData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Facet_getDataPtr
newCallback_Facet_getData(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Facet_getData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Facet_getData : public Callback_Facet_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Facet_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::FacetPrx __proxy = ::Test::FacetPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Facet_getDataPtr
newCallback_Facet_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Facet_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Facet_getDataPtr
newCallback_Facet_getData(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Facet_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Facet_setData : public Callback_Facet_setData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Facet_setData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Facet_setDataPtr
newCallback_Facet_setData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Facet_setData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Facet_setDataPtr
newCallback_Facet_setData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Facet_setData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Facet_setDataPtr
newCallback_Facet_setData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Facet_setData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Facet_setDataPtr
newCallback_Facet_setData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Facet_setData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Facet_setData : public Callback_Facet_setData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Facet_setData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Facet_setDataPtr
newCallback_Facet_setData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Facet_setData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Facet_setDataPtr
newCallback_Facet_setData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Facet_setData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Facet_setDataPtr
newCallback_Facet_setData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Facet_setData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Facet_setDataPtr
newCallback_Facet_setData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Facet_setData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictor_setSize : public Callback_RemoteEvictor_setSize_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteEvictor_setSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_setSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_setSize<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_setSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_setSize<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictor_setSize : public Callback_RemoteEvictor_setSize_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteEvictor_setSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_setSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_setSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_setSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_setSizePtr
newCallback_RemoteEvictor_setSize(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_setSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictor_createServant : public Callback_RemoteEvictor_createServant_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::ServantPrx&);

    CallbackNC_RemoteEvictor_createServant(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RemoteEvictorPrx __proxy = ::Test::RemoteEvictorPrx::uncheckedCast(__result->getProxy());
        ::Test::ServantPrx __ret;
        try
        {
            __ret = __proxy->end_createServant(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_RemoteEvictor_createServantPtr
newCallback_RemoteEvictor_createServant(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::ServantPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_createServant<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_createServantPtr
newCallback_RemoteEvictor_createServant(T* instance, void (T::*cb)(const ::Test::ServantPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_createServant<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictor_createServant : public Callback_RemoteEvictor_createServant_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::ServantPrx&, const CT&);

    Callback_RemoteEvictor_createServant(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RemoteEvictorPrx __proxy = ::Test::RemoteEvictorPrx::uncheckedCast(__result->getProxy());
        ::Test::ServantPrx __ret;
        try
        {
            __ret = __proxy->end_createServant(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RemoteEvictor_createServantPtr
newCallback_RemoteEvictor_createServant(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::ServantPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_createServant<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_createServantPtr
newCallback_RemoteEvictor_createServant(T* instance, void (T::*cb)(const ::Test::ServantPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_createServant<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictor_getServant : public Callback_RemoteEvictor_getServant_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::ServantPrx&);

    CallbackNC_RemoteEvictor_getServant(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RemoteEvictorPrx __proxy = ::Test::RemoteEvictorPrx::uncheckedCast(__result->getProxy());
        ::Test::ServantPrx __ret;
        try
        {
            __ret = __proxy->end_getServant(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_RemoteEvictor_getServantPtr
newCallback_RemoteEvictor_getServant(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::ServantPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_getServant<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_getServantPtr
newCallback_RemoteEvictor_getServant(T* instance, void (T::*cb)(const ::Test::ServantPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_getServant<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictor_getServant : public Callback_RemoteEvictor_getServant_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::ServantPrx&, const CT&);

    Callback_RemoteEvictor_getServant(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RemoteEvictorPrx __proxy = ::Test::RemoteEvictorPrx::uncheckedCast(__result->getProxy());
        ::Test::ServantPrx __ret;
        try
        {
            __ret = __proxy->end_getServant(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RemoteEvictor_getServantPtr
newCallback_RemoteEvictor_getServant(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::ServantPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_getServant<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_getServantPtr
newCallback_RemoteEvictor_getServant(T* instance, void (T::*cb)(const ::Test::ServantPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_getServant<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictor_saveNow : public Callback_RemoteEvictor_saveNow_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteEvictor_saveNow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_saveNow<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_saveNow<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_saveNow<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_saveNow<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictor_saveNow : public Callback_RemoteEvictor_saveNow_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteEvictor_saveNow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_saveNow<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_saveNow<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_saveNow<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_saveNowPtr
newCallback_RemoteEvictor_saveNow(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_saveNow<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictor_deactivate : public Callback_RemoteEvictor_deactivate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteEvictor_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_deactivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_deactivate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_deactivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_deactivate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictor_deactivate : public Callback_RemoteEvictor_deactivate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteEvictor_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_deactivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_deactivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_deactivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_deactivatePtr
newCallback_RemoteEvictor_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_deactivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictor_destroyAllServants : public Callback_RemoteEvictor_destroyAllServants_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteEvictor_destroyAllServants(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_destroyAllServants<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_destroyAllServants<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_destroyAllServants<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictor_destroyAllServants<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictor_destroyAllServants : public Callback_RemoteEvictor_destroyAllServants_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteEvictor_destroyAllServants(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_destroyAllServants<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_destroyAllServants<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_destroyAllServants<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictor_destroyAllServantsPtr
newCallback_RemoteEvictor_destroyAllServants(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictor_destroyAllServants<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictorFactory_createEvictor : public Callback_RemoteEvictorFactory_createEvictor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::RemoteEvictorPrx&);

    CallbackNC_RemoteEvictorFactory_createEvictor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RemoteEvictorFactoryPrx __proxy = ::Test::RemoteEvictorFactoryPrx::uncheckedCast(__result->getProxy());
        ::Test::RemoteEvictorPrx __ret;
        try
        {
            __ret = __proxy->end_createEvictor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_RemoteEvictorFactory_createEvictorPtr
newCallback_RemoteEvictorFactory_createEvictor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::RemoteEvictorPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictorFactory_createEvictor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictorFactory_createEvictorPtr
newCallback_RemoteEvictorFactory_createEvictor(T* instance, void (T::*cb)(const ::Test::RemoteEvictorPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictorFactory_createEvictor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictorFactory_createEvictor : public Callback_RemoteEvictorFactory_createEvictor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::RemoteEvictorPrx&, const CT&);

    Callback_RemoteEvictorFactory_createEvictor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Test::RemoteEvictorFactoryPrx __proxy = ::Test::RemoteEvictorFactoryPrx::uncheckedCast(__result->getProxy());
        ::Test::RemoteEvictorPrx __ret;
        try
        {
            __ret = __proxy->end_createEvictor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RemoteEvictorFactory_createEvictorPtr
newCallback_RemoteEvictorFactory_createEvictor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::RemoteEvictorPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictorFactory_createEvictor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictorFactory_createEvictorPtr
newCallback_RemoteEvictorFactory_createEvictor(T* instance, void (T::*cb)(const ::Test::RemoteEvictorPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictorFactory_createEvictor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RemoteEvictorFactory_shutdown : public Callback_RemoteEvictorFactory_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteEvictorFactory_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictorFactory_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictorFactory_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictorFactory_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteEvictorFactory_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RemoteEvictorFactory_shutdown : public Callback_RemoteEvictorFactory_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteEvictorFactory_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictorFactory_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictorFactory_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictorFactory_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RemoteEvictorFactory_shutdownPtr
newCallback_RemoteEvictorFactory_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteEvictorFactory_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
