// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Complex.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Complex_h__
#define __Complex_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Complex
{

class Node;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Complex::Node>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Complex::Node*);

class NumberNode;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Complex::NumberNode>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Complex::NumberNode*);

class BinaryNode;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Complex::BinaryNode>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Complex::BinaryNode*);

class AddNode;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Complex::AddNode>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Complex::AddNode*);

class MultiplyNode;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Complex::MultiplyNode>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Complex::MultiplyNode*);

}

}

namespace Complex
{

class Node;
bool operator==(const Node&, const Node&);
bool operator<(const Node&, const Node&);
::Ice::Object* upCast(::Complex::Node*);
typedef ::IceInternal::Handle< ::Complex::Node> NodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Complex::Node> NodePrx;
void __patch(NodePtr&, const ::Ice::ObjectPtr&);

class NumberNode;
bool operator==(const NumberNode&, const NumberNode&);
bool operator<(const NumberNode&, const NumberNode&);
::Ice::Object* upCast(::Complex::NumberNode*);
typedef ::IceInternal::Handle< ::Complex::NumberNode> NumberNodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Complex::NumberNode> NumberNodePrx;
void __patch(NumberNodePtr&, const ::Ice::ObjectPtr&);

class BinaryNode;
bool operator==(const BinaryNode&, const BinaryNode&);
bool operator<(const BinaryNode&, const BinaryNode&);
::Ice::Object* upCast(::Complex::BinaryNode*);
typedef ::IceInternal::Handle< ::Complex::BinaryNode> BinaryNodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Complex::BinaryNode> BinaryNodePrx;
void __patch(BinaryNodePtr&, const ::Ice::ObjectPtr&);

class AddNode;
bool operator==(const AddNode&, const AddNode&);
bool operator<(const AddNode&, const AddNode&);
::Ice::Object* upCast(::Complex::AddNode*);
typedef ::IceInternal::Handle< ::Complex::AddNode> AddNodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Complex::AddNode> AddNodePrx;
void __patch(AddNodePtr&, const ::Ice::ObjectPtr&);

class MultiplyNode;
bool operator==(const MultiplyNode&, const MultiplyNode&);
bool operator<(const MultiplyNode&, const MultiplyNode&);
::Ice::Object* upCast(::Complex::MultiplyNode*);
typedef ::IceInternal::Handle< ::Complex::MultiplyNode> MultiplyNodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Complex::MultiplyNode> MultiplyNodePrx;
void __patch(MultiplyNodePtr&, const ::Ice::ObjectPtr&);

}

namespace Complex
{

struct Key
{
    ::std::string expression;
    ::Ice::Int result;

    bool operator==(const Key& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(expression != __rhs.expression)
        {
            return false;
        }
        if(result != __rhs.result)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Key& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(expression < __rhs.expression)
        {
            return true;
        }
        else if(__rhs.expression < expression)
        {
            return false;
        }
        if(result < __rhs.result)
        {
            return true;
        }
        else if(__rhs.result < result)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Key& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Key& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Key& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Key& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Complex::Key>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Complex::Key, S>
{
    static void write(S* __os, const ::Complex::Key& v)
    {
        __os->write(v.expression);
        __os->write(v.result);
    }
};

template<class S>
struct StreamReader< ::Complex::Key, S>
{
    static void read(S* __is, ::Complex::Key& v)
    {
        __is->read(v.expression);
        __is->read(v.result);
    }
};

}

namespace Complex
{

class Callback_Node_calc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_calc_Base> Callback_Node_calcPtr;

}

namespace IceProxy
{

namespace Complex
{

class Node : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int calc()
    {
        return calc(0);
    }
    ::Ice::Int calc(const ::Ice::Context& __ctx)
    {
        return calc(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_calc(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_calc(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_calc(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_calc(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_calc(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_calc(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_calc(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_calc(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_calc(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Complex::NodePrx __proxy = ::Complex::NodePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_calc(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_calc(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_calc()
    {
        return begin_calc(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_calc(const ::Ice::Context& __ctx)
    {
        return begin_calc(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_calc(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calc(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calc(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calc(const ::Complex::Callback_Node_calcPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calc(const ::Ice::Context& __ctx, const ::Complex::Callback_Node_calcPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calc(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_calc(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int calc(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_calc(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Node> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_secure(bool __secure) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_twoway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_oneway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_batchOneway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_datagram() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_batchDatagram() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_compress(bool __compress) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class NumberNode : virtual public ::IceProxy::Complex::Node
{
public:
    
    ::IceInternal::ProxyHandle<NumberNode> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_secure(bool __secure) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_twoway() const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_oneway() const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_batchOneway() const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_datagram() const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_batchDatagram() const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_compress(bool __compress) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NumberNode> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NumberNode*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class BinaryNode : virtual public ::IceProxy::Complex::Node
{
public:
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_secure(bool __secure) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_twoway() const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_oneway() const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_batchOneway() const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_datagram() const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_batchDatagram() const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_compress(bool __compress) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BinaryNode> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BinaryNode*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AddNode : virtual public ::IceProxy::Complex::BinaryNode
{
public:
    
    ::IceInternal::ProxyHandle<AddNode> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_secure(bool __secure) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_twoway() const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_oneway() const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_batchOneway() const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_datagram() const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_batchDatagram() const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_compress(bool __compress) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AddNode> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AddNode*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MultiplyNode : virtual public ::IceProxy::Complex::BinaryNode
{
public:
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_secure(bool __secure) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_twoway() const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_oneway() const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_batchOneway() const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_datagram() const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_batchDatagram() const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_compress(bool __compress) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MultiplyNode> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MultiplyNode*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Complex
{

class Node : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int calc(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class NumberNode : virtual public ::IceDelegate::Complex::Node
{
public:
};

class BinaryNode : virtual public ::IceDelegate::Complex::Node
{
public:
};

class AddNode : virtual public ::IceDelegate::Complex::BinaryNode
{
public:
};

class MultiplyNode : virtual public ::IceDelegate::Complex::BinaryNode
{
public:
};

}

}

namespace IceDelegateM
{

namespace Complex
{

class Node : virtual public ::IceDelegate::Complex::Node,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int calc(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class NumberNode : virtual public ::IceDelegate::Complex::NumberNode,
                   virtual public ::IceDelegateM::Complex::Node
{
public:
};

class BinaryNode : virtual public ::IceDelegate::Complex::BinaryNode,
                   virtual public ::IceDelegateM::Complex::Node
{
public:
};

class AddNode : virtual public ::IceDelegate::Complex::AddNode,
                virtual public ::IceDelegateM::Complex::BinaryNode
{
public:
};

class MultiplyNode : virtual public ::IceDelegate::Complex::MultiplyNode,
                     virtual public ::IceDelegateM::Complex::BinaryNode
{
public:
};

}

}

namespace IceDelegateD
{

namespace Complex
{

class Node : virtual public ::IceDelegate::Complex::Node,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int calc(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class NumberNode : virtual public ::IceDelegate::Complex::NumberNode,
                   virtual public ::IceDelegateD::Complex::Node
{
public:
};

class BinaryNode : virtual public ::IceDelegate::Complex::BinaryNode,
                   virtual public ::IceDelegateD::Complex::Node
{
public:
};

class AddNode : virtual public ::IceDelegate::Complex::AddNode,
                virtual public ::IceDelegateD::Complex::BinaryNode
{
public:
};

class MultiplyNode : virtual public ::IceDelegate::Complex::MultiplyNode,
                     virtual public ::IceDelegateD::Complex::BinaryNode
{
public:
};

}

}

namespace Complex
{

class Node : virtual public ::Ice::Object
{
public:

    typedef NodePrx ProxyType;
    typedef NodePtr PointerType;

    Node()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int calc(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___calc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Node& l, const Node& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Node& l, const Node& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class NumberNode : public ::Complex::Node
{
public:

    typedef NumberNodePrx ProxyType;
    typedef NumberNodePtr PointerType;

    NumberNode()
    {
    }

    explicit NumberNode(::Ice::Int __ice_number) :
        number(__ice_number)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Complex::Node::__writeImpl;
    using ::Complex::Node::__readImpl;
    #endif

public:

    ::Ice::Int number;
};

inline bool operator==(const NumberNode& l, const NumberNode& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NumberNode& l, const NumberNode& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class BinaryNode : public ::Complex::Node, public IceInternal::GCShared
{
public:

    typedef BinaryNodePrx ProxyType;
    typedef BinaryNodePtr PointerType;

    BinaryNode()
    {
    }

    BinaryNode(const ::Complex::NodePtr& __ice_left, const ::Complex::NodePtr& __ice_right) :
        left(__ice_left),
        right(__ice_right)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Complex::Node::__writeImpl;
    using ::Complex::Node::__readImpl;
    #endif

public:

    ::Complex::NodePtr left;

    ::Complex::NodePtr right;
};

inline bool operator==(const BinaryNode& l, const BinaryNode& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BinaryNode& l, const BinaryNode& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AddNode : public ::Complex::BinaryNode
{
public:

    typedef AddNodePrx ProxyType;
    typedef AddNodePtr PointerType;

    AddNode()
    {
    }

    AddNode(const ::Complex::NodePtr& __ice_left, const ::Complex::NodePtr& __ice_right) :
        ::Complex::BinaryNode(__ice_left, __ice_right)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Complex::BinaryNode::__writeImpl;
    using ::Complex::BinaryNode::__readImpl;
    #endif
};

inline bool operator==(const AddNode& l, const AddNode& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AddNode& l, const AddNode& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MultiplyNode : public ::Complex::BinaryNode
{
public:

    typedef MultiplyNodePrx ProxyType;
    typedef MultiplyNodePtr PointerType;

    MultiplyNode()
    {
    }

    MultiplyNode(const ::Complex::NodePtr& __ice_left, const ::Complex::NodePtr& __ice_right) :
        ::Complex::BinaryNode(__ice_left, __ice_right)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Complex::BinaryNode::__writeImpl;
    using ::Complex::BinaryNode::__readImpl;
    #endif
};

inline bool operator==(const MultiplyNode& l, const MultiplyNode& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MultiplyNode& l, const MultiplyNode& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Complex
{

template<class T>
class CallbackNC_Node_calc : public Callback_Node_calc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Node_calc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Complex::NodePrx __proxy = ::Complex::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_calc(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_calcPtr
newCallback_Node_calc(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_calc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_calcPtr
newCallback_Node_calc(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_calc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_calc : public Callback_Node_calc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Node_calc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Complex::NodePrx __proxy = ::Complex::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_calc(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_calcPtr
newCallback_Node_calc(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_calc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_calcPtr
newCallback_Node_calc(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_calc<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
