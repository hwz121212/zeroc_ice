// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Stats.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Ice____slice_generate_Ice_Stats_h__
#define __Ice____slice_generate_Ice_Stats_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace Ice
{

class Stats;
bool operator==(const Stats&, const Stats&);
bool operator<(const Stats&, const Stats&);
::Ice::LocalObject* upCast(::Ice::Stats*);
typedef ::IceInternal::Handle< ::Ice::Stats> StatsPtr;

}

namespace Ice
{

class Stats : virtual public ::Ice::LocalObject
{
public:

    typedef StatsPtr PointerType;

    ICE_DEPRECATED_API virtual void bytesSent(const ::std::string&, ::Ice::Int) = 0;

    ICE_DEPRECATED_API virtual void bytesReceived(const ::std::string&, ::Ice::Int) = 0;
};

inline bool operator==(const Stats& l, const Stats& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const Stats& l, const Stats& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

}

#endif
