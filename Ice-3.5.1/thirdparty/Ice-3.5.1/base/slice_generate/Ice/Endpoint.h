// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Endpoint.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Ice____slice_generate_Ice_Endpoint_h__
#define __Ice____slice_generate_Ice_Endpoint_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/Version.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/EndpointF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace Ice
{

class EndpointInfo;
bool operator==(const EndpointInfo&, const EndpointInfo&);
bool operator<(const EndpointInfo&, const EndpointInfo&);
::Ice::LocalObject* upCast(::Ice::EndpointInfo*);
typedef ::IceInternal::Handle< ::Ice::EndpointInfo> EndpointInfoPtr;

class Endpoint;
bool operator==(const Endpoint&, const Endpoint&);
bool operator<(const Endpoint&, const Endpoint&);
::Ice::LocalObject* upCast(::Ice::Endpoint*);
typedef ::IceInternal::Handle< ::Ice::Endpoint> EndpointPtr;

class IPEndpointInfo;
bool operator==(const IPEndpointInfo&, const IPEndpointInfo&);
bool operator<(const IPEndpointInfo&, const IPEndpointInfo&);
::Ice::LocalObject* upCast(::Ice::IPEndpointInfo*);
typedef ::IceInternal::Handle< ::Ice::IPEndpointInfo> IPEndpointInfoPtr;

class TCPEndpointInfo;
bool operator==(const TCPEndpointInfo&, const TCPEndpointInfo&);
bool operator<(const TCPEndpointInfo&, const TCPEndpointInfo&);
::Ice::LocalObject* upCast(::Ice::TCPEndpointInfo*);
typedef ::IceInternal::Handle< ::Ice::TCPEndpointInfo> TCPEndpointInfoPtr;

class UDPEndpointInfo;
bool operator==(const UDPEndpointInfo&, const UDPEndpointInfo&);
bool operator<(const UDPEndpointInfo&, const UDPEndpointInfo&);
::Ice::LocalObject* upCast(::Ice::UDPEndpointInfo*);
typedef ::IceInternal::Handle< ::Ice::UDPEndpointInfo> UDPEndpointInfoPtr;

class OpaqueEndpointInfo;
bool operator==(const OpaqueEndpointInfo&, const OpaqueEndpointInfo&);
bool operator<(const OpaqueEndpointInfo&, const OpaqueEndpointInfo&);
::Ice::LocalObject* upCast(::Ice::OpaqueEndpointInfo*);
typedef ::IceInternal::Handle< ::Ice::OpaqueEndpointInfo> OpaqueEndpointInfoPtr;

}

namespace Ice
{

const ::Ice::Short TCPEndpointType = 1;

const ::Ice::Short UDPEndpointType = 3;

}

namespace Ice
{

class EndpointInfo : virtual public ::Ice::LocalObject
{
public:

    typedef EndpointInfoPtr PointerType;

    EndpointInfo()
    {
    }

    EndpointInfo(::Ice::Int __ice_timeout, bool __ice_compress) :
        timeout(__ice_timeout),
        compress(__ice_compress)
    {
    }


    virtual ::Ice::Short type() const = 0;

    virtual bool datagram() const = 0;

    virtual bool secure() const = 0;

public:

    ::Ice::Int timeout;

    bool compress;
};

inline bool operator==(const EndpointInfo& l, const EndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const EndpointInfo& l, const EndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class Endpoint : virtual public ::Ice::LocalObject
{
public:

    typedef EndpointPtr PointerType;

    virtual ::std::string toString() const = 0;

    virtual ::Ice::EndpointInfoPtr getInfo() const = 0;
};

inline bool operator==(const Endpoint& l, const Endpoint& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const Endpoint& l, const Endpoint& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class IPEndpointInfo : public ::Ice::EndpointInfo
{
public:

    typedef IPEndpointInfoPtr PointerType;

    IPEndpointInfo()
    {
    }

    IPEndpointInfo(::Ice::Int __ice_timeout, bool __ice_compress, const ::std::string& __ice_host, ::Ice::Int __ice_port) :
        ::Ice::EndpointInfo(__ice_timeout, __ice_compress)
        ,
        host(__ice_host),
        port(__ice_port)
    {
    }


public:

    ::std::string host;

    ::Ice::Int port;
};

inline bool operator==(const IPEndpointInfo& l, const IPEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const IPEndpointInfo& l, const IPEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class TCPEndpointInfo : public ::Ice::IPEndpointInfo
{
public:

    typedef TCPEndpointInfoPtr PointerType;

    TCPEndpointInfo()
    {
    }

    TCPEndpointInfo(::Ice::Int __ice_timeout, bool __ice_compress, const ::std::string& __ice_host, ::Ice::Int __ice_port) :
        ::Ice::IPEndpointInfo(__ice_timeout, __ice_compress, __ice_host, __ice_port)
        
    {
    }

};

inline bool operator==(const TCPEndpointInfo& l, const TCPEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const TCPEndpointInfo& l, const TCPEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class UDPEndpointInfo : public ::Ice::IPEndpointInfo
{
public:

    typedef UDPEndpointInfoPtr PointerType;

    UDPEndpointInfo()
    {
    }

    UDPEndpointInfo(::Ice::Int __ice_timeout, bool __ice_compress, const ::std::string& __ice_host, ::Ice::Int __ice_port, const ::std::string& __ice_mcastInterface, ::Ice::Int __ice_mcastTtl) :
        ::Ice::IPEndpointInfo(__ice_timeout, __ice_compress, __ice_host, __ice_port)
        ,
        mcastInterface(__ice_mcastInterface),
        mcastTtl(__ice_mcastTtl)
    {
    }


public:

    ::std::string mcastInterface;

    ::Ice::Int mcastTtl;
};

inline bool operator==(const UDPEndpointInfo& l, const UDPEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const UDPEndpointInfo& l, const UDPEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class OpaqueEndpointInfo : public ::Ice::EndpointInfo
{
public:

    typedef OpaqueEndpointInfoPtr PointerType;

    OpaqueEndpointInfo()
    {
    }

    OpaqueEndpointInfo(::Ice::Int __ice_timeout, bool __ice_compress, const ::Ice::EncodingVersion& __ice_rawEncoding, const ::Ice::ByteSeq& __ice_rawBytes) :
        ::Ice::EndpointInfo(__ice_timeout, __ice_compress)
        ,
        rawEncoding(__ice_rawEncoding),
        rawBytes(__ice_rawBytes)
    {
    }


public:

    ::Ice::EncodingVersion rawEncoding;

    ::Ice::ByteSeq rawBytes;
};

inline bool operator==(const OpaqueEndpointInfo& l, const OpaqueEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const OpaqueEndpointInfo& l, const OpaqueEndpointInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

}

#endif
